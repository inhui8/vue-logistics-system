{"version":3,"file":"js/6114.02e63ff5.js","mappings":"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","sources":["webpack://vue-logistics-system/./src/views/FBX/newFBXVisactor.vue","webpack://vue-logistics-system/./src/components/logistics/GroupableTableVisactor.vue","webpack://vue-logistics-system/./src/components/logistics/GroupableTableVisactor.vue?fcb8","webpack://vue-logistics-system/./src/views/FBX/newFBXVisactor.vue?6c52"],"sourcesContent":["<template>\n  <!-- eslint-disable -->\n  <div class=\"delivery-trains-container\">\n    <!-- 顶部筛选区 -->\n    <div class=\"filter-bar\">\n      <div class=\"filter-row\">\n        <!-- 仓库选择 -->\n        <el-select v-model=\"warehouse\" placeholder=\"美西二号仓\" size=\"small\" class=\"filter-item\">\n          <el-option label=\"美西二号仓\" value=\"west2\"></el-option>\n          <el-option label=\"美西一号仓\" value=\"west1\"></el-option>\n          <el-option label=\"新泽西一号仓\" value=\"east1\"></el-option>\n          <el-option label=\"萨凡纳二号仓\" value=\"east2\"></el-option>\n          <el-option label=\"达拉斯三号仓\" value=\"east3\"></el-option>\n        </el-select>\n        \n        <!-- 创建日期 -->\n        <el-select v-model=\"createDateType\" placeholder=\"ETA\" size=\"small\" class=\"filter-item\">\n          <el-option label=\"ETA\" value=\"eta\"></el-option>\n          <el-option label=\"提柜时间\" value=\"issue\"></el-option>\n          <el-option label=\"抵仓时间\" value=\"appointment\"></el-option>\n          <el-option label=\"预计拆柜时间\" value=\"expectedUnloading\"></el-option>\n          <el-option label=\"拆柜完成时间\" value=\"unloading\"></el-option>\n        </el-select>\n        \n        <!-- 日期范围选择 -->\n        <div class=\"date-buttons\">\n          <el-date-picker\n            v-model=\"dateRange\"\n            type=\"daterange\"\n            range-separator=\"至\"\n            start-placeholder=\"开始日期\"\n            end-placeholder=\"结束日期\"\n            size=\"small\"\n            class=\"date-range-picker\"\n            format=\"yyyy-MM-dd\"\n            value-format=\"yyyy-MM-dd\"\n          ></el-date-picker>\n        </div>\n        \n        <!-- 批次号 -->\n        <el-select v-model=\"searchType\" placeholder=\"部分模糊搜索\" size=\"small\" class=\"filter-item\">\n          <el-option label=\"部分模糊搜索\" value=\"trainNumber\"></el-option>\n          <el-option label=\"柜号\" value=\"containerNo\"></el-option>\n          <el-option label=\"SO号\" value=\"soNumber\"></el-option>\n          <el-option label=\"货件编号\" value=\"shipmentNumber\"></el-option>\n          <el-option label=\"追踪编号\" value=\"trackingNumber\"></el-option>\n        </el-select>\n        \n        <!-- 搜索框 -->\n        <el-input \n          placeholder=\"MEMO/跟进记录/ref/zip_code等\" \n          v-model=\"searchText\" \n          size=\"small\" \n          class=\"search-input\"\n          prefix-icon=\"el-icon-search\"\n        ></el-input>\n        \n        <!-- 操作按钮 -->\n        <div class=\"action-buttons\">\n          <el-button type=\"primary\" size=\"small\" @click=\"handleSearch\">查询</el-button>\n          <el-button size=\"small\" type=\"warning\" @click=\"handleBatchOperation('followUp')\">批量跟进</el-button>\n          <el-button size=\"small\" type=\"warning\" @click=\"handleBatchOperation('memo')\">批量MEMO</el-button>\n          <el-button size=\"small\" type=\"warning\" @click=\"handleBatchOperation('createPC')\">创建PC</el-button>\n          <el-button size=\"small\">导出列表</el-button>\n        </div>\n      </div>\n    </div>\n\n    <!-- 状态筛选区域和视图控制 -->\n    <div class=\"view-management\">\n      <span class=\"view-label\"></span>\n      <el-radio-group v-model=\"currentView\" size=\"small\" class=\"status-view-group\">\n        <el-radio-button value=\"all\">全部({{statusCounts.all || 0}})</el-radio-button>\n        <el-radio-button value=\"pending\">待处理({{statusCounts.pending || 0}})</el-radio-button>\n        <el-radio-button value=\"processing\">处理中({{statusCounts.processing || 0}})</el-radio-button>\n        <el-radio-button value=\"completed\">已完成({{statusCounts.completed || 0}})</el-radio-button>\n        <el-radio-button value=\"cancelled\">已取消({{statusCounts.cancelled || 0}})</el-radio-button>\n        <!-- 动态添加自定义视图 -->\n        <el-radio-button \n          v-for=\"view in customViews\" \n          :key=\"view.id\" \n          :label=\"view.id\"\n          @contextmenu.prevent=\"handleContextMenu($event, view)\"\n        >\n          {{view.name}}\n        </el-radio-button>\n      </el-radio-group>\n      \n      <el-button type=\"text\" size=\"small\" @click=\"handleSaveView\">新增视图</el-button>\n      <el-button type=\"text\" size=\"small\" @click=\"showGroupModal\">高级分组</el-button>\n      <el-button type=\"text\" size=\"small\" @click=\"showSortModal\">高级排序</el-button>\n      <el-button type=\"text\" size=\"small\" @click=\"showFilterPanel\">筛选</el-button>\n      <el-button type=\"text\" size=\"small\" @click=\"showColumnSettings\">字段配置</el-button>\n    </div>\n\n    <!-- Visactor 表格 -->\n    <div class=\"table-container\">\n      <groupable-table-visactor\n        ref=\"visactorTable\"\n        :data=\"displayData\"\n        :columns=\"tableColumns.filter(col => col.visible !== false)\"\n        row-key=\"id\"\n        :group-fields=\"multiGroupFields.length > 0 ? multiGroupFields : (groupField ? [groupField] : [])\"\n        :show-selection=\"true\"\n        :show-group-column=\"hasGroupData\"\n        :group-column-label=\"multiGroupFields.length > 0 ? '多级分组' : (groupField ? getColumnLabel(groupField) : '分组')\"\n        :default-expand-all=\"true\"\n        :show-pagination=\"true\"\n        :current-page=\"currentPage\"\n        :page-size=\"pageSize\"\n        :page-sizes=\"[10, 20, 50, 100]\"\n        :total=\"total\"\n        :loading=\"loading\"\n        :showUnclassified=\"false\"\n        :childColumns=\"childColumns\"\n        :enableSubTable=\"true\"\n        @selection-change=\"handleSelectionChange\"\n        @size-change=\"handleSizeChange\"\n        @current-change=\"handleCurrentChange\"\n        @cell-dblclick=\"handleCellDbClick\"\n        @sort-change=\"handleSortChange\"\n        @clear-grouping=\"handleClearGrouping\"\n        @cell-value-change=\"handleCellValueChange\"\n      />\n    </div>\n    \n\n    \n    <!-- 筛选面板 -->\n    <filter-panel\n      v-model:visible=\"filterPanelVisible\"\n      :columns=\"tableColumns.filter(col => col.visible !== false)\"\n      :existing-filters=\"activeFilters\"\n      :existing-logic=\"filterLogic\"\n      @apply-filters=\"applyFilters\"\n      @cancel=\"cancelFilters\"\n    />\n\n    <!-- 保存视图对话框 -->\n    <el-dialog\n      title=\"保存视图\"\n      v-model=\"saveViewDialogVisible\"\n      width=\"500px\"\n    >\n      <el-form :model=\"viewForm\" label-width=\"100px\">\n        <el-form-item label=\"视图名称\" required>\n          <el-input v-model=\"viewForm.name\" placeholder=\"请输入视图名称\"></el-input>\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <el-button @click=\"saveViewDialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"saveView\">确定</el-button>\n      </template>\n    </el-dialog>\n\n    <!-- 高级分组对话框 -->\n    <el-dialog\n      title=\"高级分组\"\n      v-model=\"groupModalVisible\"\n      width=\"500px\"\n    >\n      <div class=\"group-settings\">\n        <div class=\"group-level\">\n          <span class=\"group-level-label\">一级分组：</span>\n          <el-select v-model=\"groupSettings.level1\" placeholder=\"选择字段\" style=\"width: 280px;\" clearable>\n            <el-option v-for=\"field in groupableFields\" :key=\"field.prop\" :label=\"field.label\" :value=\"field.prop\"></el-option>\n          </el-select>\n        </div>\n        <div class=\"group-level\">\n          <span class=\"group-level-label\">二级分组：</span>\n          <el-select v-model=\"groupSettings.level2\" placeholder=\"选择字段\" style=\"width: 280px;\" clearable>\n            <el-option v-for=\"field in groupableFields\" :key=\"field.prop\" :label=\"field.label\" :value=\"field.prop\"></el-option>\n          </el-select>\n        </div>\n        <div class=\"group-level\">\n          <span class=\"group-level-label\">三级分组：</span>\n          <el-select v-model=\"groupSettings.level3\" placeholder=\"选择字段\" style=\"width: 280px;\" clearable>\n            <el-option v-for=\"field in groupableFields\" :key=\"field.prop\" :label=\"field.label\" :value=\"field.prop\"></el-option>\n          </el-select>\n        </div>\n      </div>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"groupModalVisible = false\">取消</el-button>\n          <el-button type=\"danger\" @click=\"clearGroupSettings\">清除分组</el-button>\n          <el-button type=\"primary\" @click=\"applyGroupSettings\">确定</el-button>\n        </span>\n      </template>\n    </el-dialog>\n\n    <!-- 高级排序对话框 -->\n    <el-dialog\n      title=\"高级排序\"\n      v-model=\"sortModalVisible\"\n      width=\"600px\"\n    >\n      <div class=\"sort-rules-container\">\n        <div \n          v-for=\"(sortRule, index) in tempSortSettings\" \n          :key=\"index\"\n          class=\"sort-rule-item\"\n        >\n          <el-select \n            v-model=\"sortRule.field\" \n            placeholder=\"请选择排序字段\"\n            style=\"width: 200px; margin-right: 10px;\"\n          >\n            <el-option\n              v-for=\"field in sortableFields\"\n              :key=\"field.prop\"\n              :label=\"field.label\"\n              :value=\"field.prop\"\n            ></el-option>\n          </el-select>\n          <el-select \n            v-model=\"sortRule.order\" \n            placeholder=\"排序方式\"\n            style=\"width: 120px; margin-right: 10px;\"\n          >\n            <el-option label=\"升序\" value=\"asc\"></el-option>\n            <el-option label=\"降序\" value=\"desc\"></el-option>\n          </el-select>\n          <el-button \n            type=\"danger\" \n            icon=\"el-icon-delete\" \n            circle \n            size=\"mini\"\n            @click=\"removeTempSortRule(index)\"\n          ></el-button>\n        </div>\n        <div class=\"add-sort-rule\">\n          <el-button type=\"primary\" size=\"small\" @click=\"addTempSortRule\">\n            添加排序规则\n          </el-button>\n        </div>\n      </div>\n      <template #footer>\n        <el-button @click=\"cancelSorting\">取消</el-button>\n        <el-button type=\"primary\" @click=\"applySorting\">确定</el-button>\n      </template>\n    </el-dialog>\n\n    <!-- 字段配置对话框 -->\n    <el-dialog\n      title=\"字段配置\"\n      v-model=\"columnSettingsVisible\"\n      width=\"600px\"\n    >\n      <div class=\"columns-container\">\n        <p class=\"tip-text\">拖拽调整列顺序，勾选/取消显示列：</p>\n        <draggable \n          v-model=\"tempTableColumns\" \n          item-key=\"id\"\n          handle=\".drag-handle\"\n          ghost-class=\"ghost\"\n          animation=\"300\"\n        >\n          <template #item=\"{element}\">\n            <div class=\"column-item\">\n              <el-checkbox v-model=\"element.visible\">\n                {{element.label}}\n              </el-checkbox>\n              <i class=\"el-icon-rank drag-handle\"></i>\n            </div>\n          </template>\n        </draggable>\n      </div>\n      <template #footer>\n        <el-button @click=\"resetColumnSettings\">重置</el-button>\n        <el-button @click=\"cancelColumnSettings\">取消</el-button>\n        <el-button type=\"primary\" @click=\"applyColumnSettings\">确定</el-button>\n      </template>\n    </el-dialog>\n\n    <!-- 视图右键菜单 -->\n    <div \n      v-if=\"contextMenuVisible\" \n      class=\"context-menu\"\n      :style=\"{left: contextMenuX + 'px', top: contextMenuY + 'px'}\"\n      @click.stop\n    >\n      <div class=\"context-menu-item\" @click=\"deleteView(currentEditingView.id)\">\n        删除视图\n      </div>\n    </div>\n\n    <!-- 编辑对话框 -->\n    <el-dialog\n      title=\"编辑信息\"\n      v-model=\"editDialogVisible\"\n      width=\"500px\"\n    >\n      <el-form :model=\"editingForm\" label-width=\"120px\">\n        <el-form-item :label=\"editingColumn.label\" v-if=\"editingColumn.prop\">\n          <el-select \n            v-if=\"['appointmentStatus', 'tags'].includes(editingColumn.prop)\"\n            v-model=\"editingForm.value\" \n            style=\"width: 100%\"\n          >\n            <el-option \n              v-for=\"option in getOptionsForColumn(editingColumn.prop)\" \n              :key=\"option.value\" \n              :label=\"option.label\" \n              :value=\"option.value\">\n            </el-option>\n          </el-select>\n          <el-input \n            v-else\n            v-model=\"editingForm.value\"\n            :type=\"['zipCode', 'boxCount', 'weight', 'volume', 'palletCount'].includes(editingColumn.prop) ? 'number' : 'text'\"\n          ></el-input>\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <el-button @click=\"editDialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"saveDialogEdit\">确定</el-button>\n      </template>\n    </el-dialog>\n\n    <!-- 其他对话框 (后续继续添加) -->\n  </div>\n</template>\n\n<script>\n/* eslint-disable no-unused-vars */\nimport { defineComponent, ref, onMounted, onBeforeUnmount, watch, nextTick, computed } from 'vue'\nimport { ElMessage } from 'element-plus' // 引入分页和消息提示\nimport FilterPanel from '@/components/logistics/FilterPanel.vue' // 假设FilterPanel组件存在\nimport GroupableTableVisactor from '@/components/logistics/GroupableTableVisactor.vue'\nimport draggable from 'vuedraggable'\n\n// 引入数据源\nimport containerShipmentsColumns from '@/assets/json/containerShipmentsColumns.json';\nimport containerItemsColumns from '@/assets/json/containerItemsColumns.json';\nimport containerShipmentsData from '@/assets/json/containerShipmentsData.json';\n\n// 在数据源加载失败或为空的情况下使用的模拟数据\nconst mockData = Array.from({ length: 10 }).map((_, i) => ({\n  id: i + 1,\n  loadingStatus: ['待处理', '处理中', '已完成', '已取消'][i % 4],\n  trainNumber: `TR${1000 + i}`,\n  containerNo: `CN${2000 + i}`,\n  soNumber: `SO${3000 + i}`,\n  shipmentNumber: `SH${4000 + i}`,\n  trackingNumber: `TK${5000 + i}`,\n  warehouse: 'west2',\n  address: `123 Main St, Unit ${i}`,\n  city: ['Los Angeles', 'Seattle', 'New York', 'Miami', 'Dallas'][i % 5],\n  state: ['CA', 'WA', 'NY', 'FL', 'TX'][i % 5],\n  zipCode: 90000 + i,\n  deliveryArea: `Area ${i % 10 + 1}`,\n  appointmentStatus: ['电话预约', '平台预约', '邮件预约', '未预约'][i % 4],\n  deliveryAppointmentTime: `2024-04-${String(i % 28 + 1).padStart(2, '0')} 10:00:00`,\n  deliveryTime: `2024-04-${String(i % 28 + 1).padStart(2, '0')} 14:00:00`,\n  eta: `2024-04-${String(i % 28 + 1).padStart(2, '0')}`,\n  remarks: `备注信息 ${i}`\n}));\n\nexport default defineComponent({\n  name: 'NewFBXVisactor',\n  components: {\n    FilterPanel,\n    GroupableTableVisactor,\n    draggable\n  },\n  setup() {\n    const visactorTable = ref(null);\n    \n    // ===== 基础状态 =====\n    // 筛选条件\n    const warehouse = ref('west2');\n    const createDateType = ref('eta');\n    const dateRange = ref([]);\n    const searchType = ref('trainNumber');\n    const searchText = ref('');\n    \n    // 表格数据状态\n    const tableData = ref([]); // 原始数据\n    const displayData = ref([]); // 显示数据\n    const loading = ref(false);\n    const selectedRows = ref([]);\n    \n    // 分页状态\n    const currentPage = ref(1);\n    const pageSize = ref(20);\n    const total = ref(0);\n    \n    // 视图状态\n    const currentView = ref('all');\n    const customViews = ref([]);\n    const statusCounts = ref({\n      all: 0,\n      pending: 0,\n      processing: 0,\n      completed: 0,\n      cancelled: 0\n    });\n    \n    // 分组和排序\n    const groupField = ref('');\n    const sortConfig = ref({\n      field: '',\n      order: 'asc' // 'asc' 或 'desc'\n    });\n    \n    // 过滤状态\n    const filterPanelVisible = ref(false);\n    const activeFilters = ref([]);\n    const filterLogic = ref('and'); // 'and' 或 'or'\n    \n    // 对话框状态\n    const saveViewDialogVisible = ref(false);\n    const editDialogVisible = ref(false);\n    const viewForm = ref({\n      name: '',\n      columns: []\n    });\n    const editingForm = ref({\n      value: ''\n    });\n    const editingColumn = ref({});\n    \n    // 视图相关\n    const currentEditingView = ref(null); // 当前编辑的视图\n    \n    // 分组设置\n    const groupModalVisible = ref(false);\n    const groupSettings = ref({\n      level1: '',\n      level2: '',\n      level3: ''\n    });\n    \n    // 排序设置\n    const sortModalVisible = ref(false);\n    const sortSettings = ref([]);\n    const tempSortSettings = ref([]); // 临时存储排序设置\n    \n    // 字段配置\n    const columnSettingsVisible = ref(false);\n    const tempTableColumns = ref([]); // 临时存储列设置\n    \n    // MEMO相关\n    const memoDialogVisible = ref(false);\n    const memoForm = ref({ memo: '' });\n    \n    // 跟进记录相关\n    const followUpDialogVisible = ref(false);\n    const followUpForm = ref({ content: '', type: 'primary' });\n    const followUpHistory = ref([]);\n    \n    // 历史记录相关\n    const historyDialogVisible = ref(false);\n    const historyRecords = ref([]);\n    \n    // 批量操作相关\n    const batchDialogVisible = ref(false);\n    const batchOperation = ref('');\n    const batchForm = ref({\n      followUp: '',\n      memo: '',\n      pcType: 'delivery',\n      targetWarehouse: ''\n    });\n    \n    // 右键菜单\n    const contextMenuVisible = ref(false);\n    const contextMenuX = ref(0);\n    const contextMenuY = ref(0);\n    \n    // 当前处理的行\n    const currentRow = ref(null);\n    \n    // 新增筛选状态\n    const newFilter = ref({\n      field: '',\n      operator: 'equals',\n      value: ''\n    });\n    \n    // 新增排序状态\n    const newSort = ref({\n      field: '',\n      direction: 'asc'\n    });\n    \n    // 详情信息\n    const detailInfo = ref({});\n\n    // 详情对话框相关\n    const detailDialogVisible = ref(false);\n    const selectedRecord = ref(null);\n    const menuPosition = ref({ left: '0px', top: '0px' });\n\n    // ===== 表格列配置 =====\n    // 使用导入的列配置，并添加必要的属性\n    const tableColumns = ref(containerShipmentsColumns.map(col => ({\n      ...col,\n      visible: true,\n      sortable: col.sortable !== false, // 默认可排序\n      filterable: col.prop !== 'operation', // 为非操作列启用筛选\n      editable: ['address', 'city', 'state', 'zipCode', 'deliveryArea', 'appointmentStatus', \n        'deliveryAppointmentTime', 'deliveryTime', 'deliveryCompany', 'deliveryDriver', \n        'driverPhone', 'followUpRecord', 'remarks', 'internalRemarks', 'tags'].includes(col.prop)\n    })));\n\n    // 子表格列配置\n    const childColumns = ref(containerItemsColumns);\n\n    // === 计算属性 ===\n    // 可分组的字段\n    const groupableFields = computed(() => {\n      return tableColumns.value.filter(col => \n        !['operation'].includes(col.prop) && \n        col.visible !== false\n      );\n    });\n\n    // 可排序的字段\n    const sortableFields = computed(() => {\n      return tableColumns.value.filter(col => \n        col.sortable && \n        col.visible !== false\n      );\n    });\n\n    // 表格是否有分组数据\n    const hasGroupData = computed(() => {\n      return multiGroupFields.value.length > 0 || !!groupField.value;\n    });\n\n    // 当前选中的自定义视图\n    const viewOptions = computed(() => {\n      // 如果currentView是自定义视图的ID\n      if (currentView.value !== 'all' &&\n          currentView.value !== 'pending' &&\n          currentView.value !== 'processing' &&\n          currentView.value !== 'completed' &&\n          currentView.value !== 'cancelled') {\n        \n        const view = customViews.value.find(v => v.id === currentView.value);\n        if (view) {\n          return view;\n        }\n      }\n      return null;\n    });\n\n    // 在setup函数中添加\n    const multiGroupFields = ref([]);\n\n    // ===== 数据获取和处理 =====\n    // 获取数据\n    const fetchData = async () => {\n      loading.value = true;\n      try {\n        // 模拟API请求延迟\n        await new Promise(resolve => setTimeout(resolve, 300));\n        \n        // 检查导入的数据源是否有效\n        if (Array.isArray(containerShipmentsData) && containerShipmentsData.length > 0) {\n          console.log('使用导入的JSON数据源');\n          tableData.value = containerShipmentsData;\n        } else {\n          console.log('导入的数据源为空，使用模拟数据');\n          tableData.value = mockData;\n        }\n        \n        // 检查数据是否正确加载\n        console.log('加载的数据条数:', tableData.value.length);\n        console.log('数据样例:', tableData.value.slice(0, 2));\n        \n        total.value = tableData.value.length;\n        \n        // 计算状态数量\n        const counts = {\n          all: tableData.value.length,\n          pending: 0,\n          processing: 0,\n          completed: 0,\n          cancelled: 0\n        };\n        \n        tableData.value.forEach(item => {\n          if (item.loadingStatus === '待处理') counts.pending++;\n          else if (item.loadingStatus === '处理中') counts.processing++;\n          else if (item.loadingStatus === '已完成') counts.completed++;\n          else if (item.loadingStatus === '已取消') counts.cancelled++;\n        });\n        \n        statusCounts.value = counts;\n        console.log('状态统计:', counts);\n        \n        // 应用筛选、排序、分组等\n        refreshDisplayData();\n      } catch (error) {\n        console.error('获取数据失败:', error);\n        // 发生错误时也使用模拟数据\n        console.log('发生错误，使用模拟数据');\n        tableData.value = mockData;\n        total.value = mockData.length;\n        refreshDisplayData();\n        ElMessage.error('获取数据失败: ' + error.message);\n      } finally {\n        loading.value = false;\n      }\n    };\n    \n    // 处理显示数据\n    const refreshDisplayData = () => {\n      loading.value = true;\n      \n      // 应用状态筛选\n      let filteredData = [...tableData.value];\n      \n      // 应用状态筛选\n      if (currentView.value === 'pending') {\n        filteredData = filteredData.filter(item => item.loadingStatus === '待处理');\n      } else if (currentView.value === 'processing') {\n        filteredData = filteredData.filter(item => item.loadingStatus === '处理中');\n      } else if (currentView.value === 'completed') {\n        filteredData = filteredData.filter(item => item.loadingStatus === '已完成');\n      } else if (currentView.value === 'cancelled') {\n        filteredData = filteredData.filter(item => item.loadingStatus === '已取消');\n      }\n      \n      // 应用高级筛选\n      if (searchText.value) {\n        const text = searchText.value.toLowerCase();\n        filteredData = filteredData.filter(item => {\n          const value = item[searchType.value];\n          return value && value.toString().toLowerCase().includes(text);\n        });\n      }\n      \n      // 应用分组\n      if (groupField.value) {\n        filteredData = processGroupData(filteredData, groupField.value);\n      }\n      \n      // 应用排序\n      if (sortSettings.value.length > 0) {\n        filteredData = applySort(filteredData);\n      }\n      \n      // 过滤掉空行\n      if (!showEmptyRows.value) {\n        filteredData = filteredData.filter(item => {\n          // 检查是否有至少一个有意义的属性\n          for (const key in item) {\n            if (item[key] !== undefined && \n                item[key] !== null && \n                item[key] !== '' &&\n                key !== 'id') {\n              return true;\n            }\n          }\n          return false;\n        });\n      }\n      \n      // 设置总数\n      total.value = filteredData.length;\n      \n      // 分页处理\n      const startIndex = (currentPage.value - 1) * pageSize.value;\n      const endIndex = startIndex + pageSize.value;\n      displayData.value = filteredData.slice(startIndex, endIndex);\n      \n      loading.value = false;\n    };\n    \n    // 应用高级筛选条件\n    const applyAdvancedFilters = (data, filters, logic = 'and') => {\n      return data.filter(item => {\n        // 对每个条件进行判断\n        const results = filters.map(filter => {\n          const { field, operator, value } = filter;\n          \n          // 如果没有该字段，则跳过\n          if (!Object.prototype.hasOwnProperty.call(item, field)) return true;\n          \n          const itemValue = item[field];\n          \n          // 根据不同的操作符进行判断\n          switch (operator) {\n            case 'equals':\n              return itemValue == value;\n            case 'notEquals':\n              return itemValue != value;\n            case 'contains':\n              return itemValue && itemValue.toString().includes(value);\n            case 'notContains':\n              return !itemValue || !itemValue.toString().includes(value);\n            case 'startsWith':\n              return itemValue && itemValue.toString().startsWith(value);\n            case 'endsWith':\n              return itemValue && itemValue.toString().endsWith(value);\n            case 'greaterThan':\n              return itemValue > value;\n            case 'lessThan':\n              return itemValue < value;\n            case 'greaterThanOrEqual':\n              return itemValue >= value;\n            case 'lessThanOrEqual':\n              return itemValue <= value;\n            case 'empty':\n              return !itemValue || itemValue.toString().trim() === '';\n            case 'notEmpty':\n              return itemValue && itemValue.toString().trim() !== '';\n            default:\n              return true;\n          }\n        });\n        \n        // 根据逻辑运算符合并结果\n        if (logic === 'and') {\n          return results.every(result => result);\n        } else {\n          return results.some(result => result);\n        }\n      });\n    };\n    \n    // 处理分组数据\n    const processGroupData = (data, field) => {\n      const groups = {};\n      const result = [];\n      \n      // 按指定字段分组\n      data.forEach(item => {\n        // 更精确地判断分组值，只有undefined和null才使用\"未分组\"\n        const fieldValue = item[field];\n        const groupValue = fieldValue === undefined || fieldValue === null ? '未分组' : String(fieldValue);\n        \n        if (!groups[groupValue]) {\n          groups[groupValue] = {\n            id: `group-${field}-${groupValue}`,\n            groupName: groupValue,\n            isGroup: true,\n            groupLevel: 1,\n            count: 0,\n            children: []\n          };\n          result.push(groups[groupValue]);\n        }\n        \n        groups[groupValue].children.push(item);\n        groups[groupValue].count++;\n      });\n      \n      return result;\n    };\n    \n    // ===== 辅助函数 =====\n    // 获取状态标签类型\n    const getStatusTagType = (status) => {\n      if (!status) return 'default';\n      if (status === '待处理') return 'warning';\n      if (status === '处理中') return 'primary';\n      if (status === '已完成') return 'success';\n      if (status === '已取消') return 'danger';\n      return 'default';\n    };\n    \n    // 获取预约状态标签类型\n    const getAppointmentStatusType = (status) => {\n      if (!status) return 'default';\n      if (status === '未预约') return 'warning';\n      if (status === '已预约') return 'success';\n      if (status === '已取消') return 'danger';\n      return 'default';\n    };\n    \n    // 获取标签类型\n    const getTagType = (tag) => {\n      if (!tag) return 'default';\n      const tagLower = tag.toLowerCase();\n      if (tagLower.includes('urgent') || tagLower.includes('紧急')) return 'danger';\n      if (tagLower.includes('delay') || tagLower.includes('延迟')) return 'warning';\n      if (tagLower.includes('completed') || tagLower.includes('完成')) return 'success';\n      return 'primary';\n    };\n    \n    // ===== 状态视图相关 =====\n    // 切换查看状态\n    const switchView = (view) => {\n      currentView.value = view;\n      refreshDisplayData();\n    };\n    \n    // 保存当前视图\n    const saveCurrentView = () => {\n      if (!viewForm.value.name) {\n        ElMessage.warning('视图名称不能为空');\n        return;\n      }\n      \n      const newView = {\n        id: `view-${Date.now()}`,\n        name: viewForm.value.name,\n        description: '',\n        conditions: getCurrentFilterConditions(),\n        columns: tableColumns.value\n          .filter(col => col.visible !== false)\n          .map(col => ({ prop: col.prop, visible: true }))\n      };\n      \n      customViews.value.push(newView);\n      saveViewDialogVisible.value = false;\n      \n      // 保存到本地存储\n      localStorage.setItem('fbx_custom_views', JSON.stringify(customViews.value));\n      \n      // 切换到新视图\n      currentView.value = newView.id;\n      \n      // 刷新数据\n      refreshDisplayData();\n      \n      ElMessage.success('视图已保存');\n    };\n    \n    // 获取当前过滤条件\n    const getCurrentFilterConditions = () => {\n      const conditions = {\n        searchType: searchType.value,\n        searchText: searchText.value,\n        warehouse: warehouse.value,\n        dateRange: dateRange.value,\n        createDateType: createDateType.value,\n        filters: activeFilters.value,\n        filterLogic: filterLogic.value,\n        sortSettings: sortSettings.value,\n        groupField: groupField.value\n      };\n      \n      return conditions;\n    };\n    \n    // 删除自定义视图\n    const deleteCustomView = (viewId) => {\n      const index = customViews.value.findIndex(v => v.id === viewId);\n      if (index > -1) {\n        customViews.value.splice(index, 1);\n        \n        // 保存到本地存储\n        localStorage.setItem('fbx_custom_views', JSON.stringify(customViews.value));\n        \n        // 如果当前视图是被删除的视图，切换到全部\n        if (currentView.value === viewId) {\n          currentView.value = 'all';\n          refreshDisplayData();\n        }\n        \n        ElMessage.success('视图已删除');\n      }\n    };\n    \n    // ===== 搜索和筛选相关 =====\n    // 搜索\n    const handleSearch = () => {\n      refreshDisplayData();\n    };\n    \n    // 添加高级筛选\n    const addFilter = () => {\n      if (\n        !newFilter.value.field || \n        !newFilter.value.operator || \n        newFilter.value.value === undefined || \n        newFilter.value.value === null || \n        newFilter.value.value === ''\n      ) {\n        ElMessage.warning('请完整填写筛选条件');\n        return;\n      }\n      \n      activeFilters.value.push({\n        id: `filter-${Date.now()}`,\n        field: newFilter.value.field,\n        operator: newFilter.value.operator,\n        value: newFilter.value.value\n      });\n      \n      // 重置新筛选条件\n      newFilter.value.field = '';\n      newFilter.value.operator = 'equals';\n      newFilter.value.value = '';\n      \n      // 刷新数据\n      refreshDisplayData();\n    };\n    \n    // 移除高级筛选\n    const removeFilter = (filterId) => {\n      const index = activeFilters.value.findIndex(f => f.id === filterId);\n      if (index > -1) {\n        activeFilters.value.splice(index, 1);\n        refreshDisplayData();\n      }\n    };\n    \n    // 清除所有高级筛选\n    const clearAllFilters = () => {\n      activeFilters.value = [];\n      refreshDisplayData();\n    };\n    \n    // ===== 表格相关 =====\n    // 添加排序\n    const addSort = () => {\n      if (!newSort.value.field) {\n        ElMessage.warning('请选择排序字段');\n        return;\n      }\n      \n      // 检查是否已存在相同字段的排序\n      const existingIndex = sortSettings.value.findIndex(s => s.field === newSort.value.field);\n      if (existingIndex > -1) {\n        sortSettings.value[existingIndex].direction = newSort.value.direction;\n      } else {\n        sortSettings.value.push({\n          field: newSort.value.field,\n          direction: newSort.value.direction\n        });\n      }\n      \n      // 重置新排序设置\n      newSort.value.field = '';\n      newSort.value.direction = 'asc';\n      \n      // 刷新数据\n      refreshDisplayData();\n    };\n    \n    // 移除排序\n    const removeSort = (index) => {\n      sortSettings.value.splice(index, 1);\n      refreshDisplayData();\n    };\n    \n    // 清除所有排序\n    const clearAllSorts = () => {\n      sortSettings.value = [];\n      refreshDisplayData();\n    };\n    \n    // 设置分组\n    const setGroupField = (field) => {\n      if (groupField.value === field) {\n        groupField.value = ''; // 取消分组\n      } else {\n        groupField.value = field;\n      }\n      refreshDisplayData();\n    };\n    \n    // 重置所有筛选和排序\n    const resetAll = () => {\n      currentView.value = 'all';\n      searchType.value = 'trainNumber';\n      searchText.value = '';\n      warehouse.value = '';\n      dateRange.value = [];\n      createDateType.value = 'eta';\n      activeFilters.value = [];\n      sortSettings.value = [];\n      groupField.value = '';\n      currentPage.value = 1;\n      \n      refreshDisplayData();\n    };\n    \n    // 导出数据\n    const exportData = () => {\n      // 在实际应用中应该调用导出API\n      ElMessage.info('导出功能尚未实现');\n    };\n    \n    // ===== 分页相关 =====\n    // 处理页码变化\n    const handleSizeChange = (size) => {\n      pageSize.value = size;\n      currentPage.value = 1; // 页大小改变时回到第一页\n      refreshDisplayData();\n    };\n    \n    // 处理页码变化\n    const handleCurrentChange = (page) => {\n      currentPage.value = page;\n      refreshDisplayData();\n    };\n    \n    // ===== 表格操作相关 =====\n    // 查看详情\n    const handleDetail = (id) => {\n      const record = tableData.value.find(item => item.id === id);\n      if (record) {\n        detailInfo.value = record;\n        detailDialogVisible.value = true;\n      }\n    };\n    \n    // 更多操作\n    const handleMoreOperations = (id, event) => {\n      const record = tableData.value.find(item => item.id === id);\n      if (record) {\n        selectedRecord.value = record;\n        \n        // 显示操作菜单\n        nextTick(() => {\n          contextMenuVisible.value = true;\n          if (event) {\n            menuPosition.value = {\n              left: `${event.clientX}px`,\n              top: `${event.clientY}px`\n            };\n          }\n        });\n      }\n    };\n    \n    // ===== 全局事件注册 =====\n    // 注册全局函数以供表格使用\n    const registerGlobalFunctions = () => {\n      window.handleDetail = (id) => {\n        handleDetail(id);\n      };\n      \n      window.handleMoreOperations = (id) => {\n        handleMoreOperations(id);\n      };\n    };\n    \n    // 取消注册全局函数\n    const unregisterGlobalFunctions = () => {\n      window.handleDetail = undefined;\n      window.handleMoreOperations = undefined;\n    };\n    \n    // ===== 生命周期钩子 =====\n    onMounted(async () => {\n      // 从本地存储加载自定义视图\n      const savedViews = localStorage.getItem('fbx_visactor_custom_views');\n      if (savedViews) {\n        try {\n          customViews.value = JSON.parse(savedViews);\n        } catch (e) {\n          console.error('加载自定义视图失败', e);\n          customViews.value = [];\n        }\n      }\n      \n      // 注册全局函数用于表格中的操作按钮\n      window.handleDetail = (id) => {\n        handleDetail(id);\n      };\n      \n      window.handleMoreOperations = (id) => {\n        handleMoreOperations(id);\n      };\n      \n      // 获取数据 - 要在最后调用，确保视图和配置已加载\n      await fetchData();\n      \n      // 添加全局点击事件监听，用于关闭右键菜单\n      document.addEventListener('click', handleClickOutsideContextMenu);\n    });\n    \n    onBeforeUnmount(() => {\n      // 清理全局函数\n      window.handleDetail = undefined;\n      window.handleMoreOperations = undefined;\n      \n      // 移除全局点击事件监听\n      document.removeEventListener('click', handleClickOutsideContextMenu);\n    });\n    \n    // 处理点击菜单外部 - 用于关闭右键菜单\n    const handleClickOutsideContextMenu = () => {\n      contextMenuVisible.value = false;\n    };\n    \n    // 监听视图变化\n    watch(() => currentView.value, () => {\n      // 切换视图时重置页码\n      currentPage.value = 1;\n      \n      // 如果切换到自定义视图，应用视图的设置\n      if (currentView.value !== 'all' && \n          currentView.value !== 'pending' && \n          currentView.value !== 'processing' && \n          currentView.value !== 'completed' && \n          currentView.value !== 'cancelled') {\n          \n        const view = customViews.value.find(v => v.id === currentView.value);\n        if (view && view.conditions) {\n          // 应用视图的筛选条件\n          if (view.conditions.filters) {\n            activeFilters.value = [...view.conditions.filters];\n          }\n          \n          if (view.conditions.filterLogic) {\n            filterLogic.value = view.conditions.filterLogic;\n          }\n          \n          if (view.conditions.sortSettings) {\n            sortSettings.value = [...view.conditions.sortSettings];\n          }\n          \n          if (view.conditions.groupField) {\n            groupField.value = view.conditions.groupField;\n          }\n          \n          // 应用视图的列设置\n          if (view.columns && Array.isArray(view.columns)) {\n            const columnMap = new Map(tableColumns.value.map(col => [col.prop, col]));\n            \n            // 遍历视图中的列配置，应用可见性\n            view.columns.forEach(viewCol => {\n              if (columnMap.has(viewCol.prop)) {\n                const col = columnMap.get(viewCol.prop);\n                col.visible = viewCol.visible;\n              }\n            });\n          }\n        }\n      } else {\n        // 切换到预定义视图时，可能需要重置某些筛选和排序\n        // 这里可以根据需求决定是否重置\n      }\n      \n      refreshDisplayData();\n    });\n    \n    // ===== 界面交互处理 =====\n    // 显示筛选面板\n    const showFilterPanel = () => {\n      filterPanelVisible.value = true;\n    };\n    \n    // 显示高级分组弹窗\n    const showGroupModal = () => {\n      groupSettings.value = {\n        level1: '',\n        level2: '',\n        level3: ''\n      };\n      groupModalVisible.value = true;\n    };\n    \n    // 应用分组设置\n    const applyGroupSettings = () => {\n      const groupFields = [];\n      if (groupSettings.value.level1) groupFields.push(groupSettings.value.level1);\n      if (groupSettings.value.level2) groupFields.push(groupSettings.value.level2);\n      if (groupSettings.value.level3) groupFields.push(groupSettings.value.level3);\n      \n      // 应用分组\n      applyMultiLevelGrouping(groupFields);\n      \n      groupModalVisible.value = false;\n      ElMessage.success('分组已应用');\n    };\n    \n    // 清除分组设置\n    const clearGroupSettings = () => {\n      groupSettings.value = {\n        level1: '',\n        level2: '',\n        level3: ''\n      };\n      applyMultiLevelGrouping([]);\n      ElMessage.success('分组已清除');\n    };\n    \n    // 应用多级分组\n    const applyMultiLevelGrouping = (fields) => {\n      // 将多级分组字段应用到组件\n      multiGroupFields.value = fields;\n      refreshDisplayData();\n    };\n    \n    // 显示高级排序弹窗\n    const showSortModal = () => {\n      tempSortSettings.value = JSON.parse(JSON.stringify(sortSettings.value));\n      // 如果没有排序规则，添加一个空的\n      if (tempSortSettings.value.length === 0) {\n        addTempSortRule();\n      }\n      sortModalVisible.value = true;\n    };\n    \n    // 添加临时排序规则\n    const addTempSortRule = () => {\n      tempSortSettings.value.push({ field: '', order: 'asc' });\n    };\n    \n    // 移除临时排序规则\n    const removeTempSortRule = (index) => {\n      tempSortSettings.value.splice(index, 1);\n    };\n    \n    // 应用排序设置\n    const applySorting = () => {\n      // 过滤掉无效的排序规则（未选择字段）\n      sortSettings.value = tempSortSettings.value.filter(s => s.field);\n      sortModalVisible.value = false;\n      refreshDisplayData();\n    };\n    \n    // 取消排序设置\n    const cancelSorting = () => {\n      sortModalVisible.value = false;\n    };\n    \n    // 显示字段配置弹窗\n    const showColumnSettings = () => {\n      // 深拷贝当前列配置用于编辑\n      tempTableColumns.value = JSON.parse(JSON.stringify(tableColumns.value));\n      columnSettingsVisible.value = true;\n    };\n    \n    // 应用字段配置\n    const applyColumnSettings = () => {\n      tableColumns.value = JSON.parse(JSON.stringify(tempTableColumns.value));\n      columnSettingsVisible.value = false;\n      // 刷新数据 - 列配置变化后可能需要重新应用筛选和排序\n      refreshDisplayData();\n    };\n    \n    // 取消字段配置\n    const cancelColumnSettings = () => {\n      columnSettingsVisible.value = false;\n    };\n    \n    // 重置字段配置\n    const resetColumnSettings = () => {\n      // 重置为默认配置\n      tempTableColumns.value = containerShipmentsColumns.map(col => ({\n        ...col,\n        visible: true,\n        sortable: col.sortable !== false,\n        editable: ['address', 'city', 'state', 'zipCode', 'deliveryArea', 'appointmentStatus', \n          'deliveryAppointmentTime', 'deliveryTime', 'deliveryCompany', 'deliveryDriver', \n          'driverPhone', 'followUpRecord', 'remarks', 'internalRemarks', 'tags'].includes(col.prop)\n      }));\n    };\n    \n    // 处理保存视图\n    const handleSaveView = () => {\n      // 初始化视图表单\n      viewForm.value = {\n        name: '',\n        columns: tableColumns.value\n          .filter(col => col.visible !== false)\n          .map(col => col.prop)\n      };\n      \n      // 显示保存视图对话框\n      saveViewDialogVisible.value = true;\n    };\n    \n    // 保存视图\n    const saveView = () => {\n      if (!viewForm.value.name) {\n        ElMessage.warning('视图名称不能为空');\n        return;\n      }\n      \n      const newView = {\n        id: `view-${Date.now()}`,\n        name: viewForm.value.name,\n        description: '',\n        conditions: getCurrentFilterConditions(),\n        columns: tableColumns.value.map(col => ({\n          prop: col.prop,\n          visible: col.visible !== false\n        }))\n      };\n      \n      customViews.value.push(newView);\n      saveViewDialogVisible.value = false;\n      \n      // 保存到本地存储\n      localStorage.setItem('fbx_visactor_custom_views', JSON.stringify(customViews.value));\n      \n      // 切换到新视图\n      currentView.value = newView.id;\n      \n      // 刷新数据\n      refreshDisplayData();\n      \n      ElMessage.success('视图已保存');\n    };\n    \n    // 删除视图\n    const deleteView = (viewId) => {\n      const index = customViews.value.findIndex(v => v.id === viewId);\n      if (index > -1) {\n        customViews.value.splice(index, 1);\n        \n        // 保存到本地存储\n        localStorage.setItem('fbx_visactor_custom_views', JSON.stringify(customViews.value));\n        \n        // 如果当前视图是被删除的视图，切换到全部\n        if (currentView.value === viewId) {\n          currentView.value = 'all';\n          refreshDisplayData();\n        }\n        \n        ElMessage.success('视图已删除');\n      }\n      \n      // 关闭右键菜单\n      contextMenuVisible.value = false;\n    };\n    \n    // 处理右键菜单\n    const handleContextMenu = (event, view) => {\n      // 阻止默认右键菜单\n      event.preventDefault();\n      \n      // 设置右键菜单位置\n      contextMenuX.value = event.clientX;\n      contextMenuY.value = event.clientY;\n      \n      // 设置当前编辑的视图\n      currentEditingView.value = view;\n      \n      // 显示操作菜单\n      contextMenuVisible.value = true;\n    };\n    \n    // 处理排序变化\n    const handleSortChange = ({ prop, order }) => {\n      // 转换 Element Plus 排序顺序到我们的格式\n      const newOrder = order === 'ascending' ? 'asc' : (order === 'descending' ? 'desc' : null);\n      \n      if (newOrder) {\n        // 替换现有排序\n        sortSettings.value = [{ field: prop, order: newOrder }];\n      } else {\n        // 取消排序\n        sortSettings.value = [];\n      }\n      \n      refreshDisplayData();\n    };\n    \n    // 处理批量操作\n    const handleBatchOperation = (type) => {\n      if (selectedRows.value.length === 0) {\n        ElMessage.warning('请先选择记录');\n        return;\n      }\n      \n      batchOperation.value = type;\n      \n      // 根据操作类型初始化表单\n      if (type === 'followUp') {\n        batchForm.value.followUp = '';\n      } else if (type === 'memo') {\n        batchForm.value.memo = '';\n      } else if (type === 'createPC') {\n        batchForm.value.pcType = 'delivery';\n        batchForm.value.targetWarehouse = '';\n      }\n      \n      // 显示批量操作对话框\n      batchDialogVisible.value = true;\n    };\n    \n    // 处理筛选面板确定\n    const applyFilters = (filters, logic) => {\n      // 更新筛选条件\n      activeFilters.value = filters;\n      filterLogic.value = logic;\n      \n      // 关闭筛选面板\n      filterPanelVisible.value = false;\n      \n      // 刷新数据\n      refreshDisplayData();\n    };\n    \n    // 处理筛选面板取消\n    const cancelFilters = () => {\n      filterPanelVisible.value = false;\n    };\n    \n    // 获取列选项\n    const getOptionsForColumn = (columnProp) => {\n      if (columnProp === 'appointmentStatus') {\n        return [\n          { value: '电话预约', label: '电话预约' },\n          { value: '平台预约', label: '平台预约' },\n          { value: '邮件预约', label: '邮件预约' },\n          { value: '未预约', label: '未预约' }\n        ];\n      }\n      else if (columnProp === 'tags') {\n        return [\n          { value: '加急', label: '加急' },\n          { value: '特殊处理', label: '特殊处理' },\n          { value: '延迟', label: '延迟' },\n          { value: '紧急', label: '紧急' }\n        ];\n      }\n      return [];\n    };\n    \n    // 保存对话框编辑\n    const saveDialogEdit = () => {\n      if (!editingColumn.value || !editingColumn.value.prop) return;\n      \n      // 保存编辑的值\n      if (currentRow.value) {\n        currentRow.value[editingColumn.value.prop] = editingForm.value.value;\n        \n        // 关闭对话框\n        editDialogVisible.value = false;\n        \n        // 刷新表格\n        refreshDisplayData();\n        \n        // 通知用户\n        ElMessage.success(`${editingColumn.value.label} 已更新`);\n      }\n    };\n    \n    // 获取分组列标签\n    const getColumnLabel = (field) => {\n      const column = tableColumns.value.find(col => col.prop === field);\n      return column ? column.label : '分组';\n    };\n    \n    // 处理行选择变更事件\n    const handleSelectionChange = (rows) => {\n      selectedRows.value = rows;\n    };\n    \n    // 处理单元格双击事件\n    const handleCellDbClick = ({ record, column, value, openEditDialog }) => {\n      // 这里保留双击逻辑，以备将来可能需要弹出对话框编辑\n      console.log('单元格双击', record, column, value, openEditDialog);\n      if (openEditDialog) {\n        // 打开编辑对话框的逻辑...\n        editingForm.value.value = value;\n        editingColumn.value = tableColumns.value.find(col => col.prop === column) || {};\n        editDialogVisible.value = true;\n        currentRow.value = record; // 保存当前行\n      }\n    };\n    \n    // 使用测试数据\n    const testWithMockData = () => {\n      // 重置所有筛选条件\n      currentView.value = 'all';\n      searchText.value = '';\n      groupField.value = '';\n      activeFilters.value = [];\n      \n      // 使用模拟数据\n      tableData.value = mockData;\n      total.value = mockData.length;\n      \n      // 直接设置显示数据，跳过筛选\n      displayData.value = mockData;\n      \n      console.log('使用测试数据，共', mockData.length, '条');\n      console.log('测试数据样例:', mockData[0]);\n      \n      ElMessage.success('已加载测试数据，共' + mockData.length + '条');\n    };\n    \n    // 处理清空分组\n    const handleClearGrouping = () => {\n      multiGroupFields.value = [];\n      groupField.value = '';\n      groupSettings.value = {\n        level1: '',\n        level2: '',\n        level3: ''\n      };\n      refreshDisplayData();\n      ElMessage.success('分组已清除');\n    };\n    \n    // 在setup函数开始处添加以下定义\n    const showEmptyRows = ref(true); // 修改为默认显示空行\n\n    // 应用排序\n    const applySort = (data) => {\n      if (!sortSettings.value || sortSettings.value.length === 0) {\n        return data;\n      }\n\n      return [...data].sort((a, b) => {\n        // 遍历每个排序规则\n        for (const sort of sortSettings.value) {\n          if (!sort.field) continue;\n          \n          const aValue = a[sort.field];\n          const bValue = b[sort.field];\n          \n          // 如果是分组节点，跳过排序\n          if (a.isGroup || b.isGroup) {\n            return 0;\n          }\n          \n          // 处理空值\n          if (aValue === undefined || aValue === null || aValue === '') {\n            return sort.order === 'asc' ? 1 : -1;\n          }\n          if (bValue === undefined || bValue === null || bValue === '') {\n            return sort.order === 'asc' ? -1 : 1;\n          }\n          \n          // 比较值\n          let comparison = 0;\n          if (typeof aValue === 'number' && typeof bValue === 'number') {\n            comparison = aValue - bValue;\n          } else {\n            const aStr = String(aValue).toLowerCase();\n            const bStr = String(bValue).toLowerCase();\n            comparison = aStr.localeCompare(bStr);\n          }\n          \n          // 根据排序方向返回结果\n          if (comparison !== 0) {\n            return sort.order === 'asc' ? comparison : -comparison;\n          }\n        }\n        \n        return 0;\n      });\n    };\n\n    // ===== 事件处理 =====\n    // 处理子组件单元格值变化\n    const handleCellValueChange = ({ record, column, value }) => {\n      console.log('单元格值变化:', record, column, value);\n      // 找到原始数据中的对应行\n      const originalRecord = tableData.value.find(item => item.id === record.id);\n      if (originalRecord) {\n        console.log('找到原始记录:', originalRecord);\n        // 更新原始数据的值\n        originalRecord[column] = value;\n        console.log('更新后的原始记录:', originalRecord);\n        \n        // 可以选择性地重新计算或刷新显示数据，但通常Vue的响应式系统会自动处理\n        // refreshDisplayData(); // 如果需要强制刷新，可以调用\n      } else {\n        console.warn('未在原始数据中找到记录:', record.id);\n      }\n    };\n\n    // 返回响应式数据和方法\n    return {\n      // 筛选相关\n      warehouse,\n      createDateType,\n      dateRange,\n      searchType,\n      searchText,\n      \n      // 表格状态\n      loading,\n      tableData,\n      displayData,\n      selectedRows,\n      tableColumns,\n      childColumns,\n      \n      // 分页相关\n      currentPage,\n      pageSize,\n      total,\n      \n      // 视图相关\n      currentView,\n      customViews,\n      statusCounts,\n      saveViewDialogVisible,\n      viewForm,\n      \n      // 分组和排序\n      groupField,\n      sortConfig,\n      groupSettings,\n      groupModalVisible,\n      \n      // 排序相关\n      sortModalVisible,\n      tempSortSettings,\n      sortSettings,\n      \n      // 列配置相关\n      columnSettingsVisible,\n      tempTableColumns,\n      \n      // 筛选相关\n      filterPanelVisible,\n      activeFilters,\n      filterLogic,\n      newFilter,\n      \n      // 编辑相关\n      editDialogVisible,\n      editingForm,\n      editingColumn,\n      \n      // 对话框相关\n      detailDialogVisible,\n      selectedRecord,\n      menuPosition,\n      \n      // 右键菜单相关\n      contextMenuVisible,\n      contextMenuX,\n      contextMenuY,\n      currentEditingView,\n      \n      // DOM引用\n      visactorTable,\n      \n      // 计算属性\n      groupableFields,\n      sortableFields,\n      \n      // 分页方法\n      handleSizeChange,\n      handleCurrentChange,\n      \n      // 事件处理\n      handleSearch,\n      handleDetail,\n      handleMoreOperations,\n      showFilterPanel,\n      showGroupModal,\n      applyGroupSettings,\n      clearGroupSettings,\n      showSortModal,\n      addTempSortRule,\n      removeTempSortRule,\n      applySorting,\n      cancelSorting,\n      showColumnSettings,\n      applyColumnSettings,\n      cancelColumnSettings,\n      resetColumnSettings,\n      handleSaveView,\n      saveView,\n      deleteView,\n      handleContextMenu,\n      handleBatchOperation,\n      handleSortChange,\n      \n      // 数据处理方法\n      refreshDisplayData,\n      applyAdvancedFilters,\n      \n      // 筛选相关方法\n      applyFilters,\n      cancelFilters,\n      \n      // 编辑相关方法\n      getOptionsForColumn,\n      saveDialogEdit,\n      \n      // 表格状态获取函数\n      getAppointmentStatusType,\n      getStatusTagType,\n      getTagType,\n      \n      // 分组相关方法\n      getColumnLabel,\n      handleSelectionChange,\n      handleCellDbClick,\n      \n      // 测试方法\n      testWithMockData,\n      \n      // 新增状态\n      multiGroupFields,\n      \n      // 新增状态\n      hasGroupData,\n      \n      // 新增状态\n      handleClearGrouping,\n      \n      // 新增状态\n      showEmptyRows,\n      \n      // 新增状态\n      handleCellValueChange\n    };\n  }\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.delivery-trains-container {\n  padding: 20px;\n  \n  .filter-bar {\n    background-color: #f5f7fa;\n    padding: 15px;\n    border-radius: 4px;\n    margin-bottom: 15px;\n    \n    .filter-row {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 10px;\n      align-items: center;\n      \n      .filter-item {\n        width: 150px;\n      }\n      \n      .date-range-picker {\n        width: 320px;\n      }\n      \n      .search-input {\n        width: 250px;\n      }\n      \n      .action-buttons {\n        margin-left: auto;\n        display: flex;\n        gap: 8px;\n      }\n    }\n  }\n  \n  .view-management {\n    display: flex;\n    align-items: center;\n    margin-bottom: 15px;\n    flex-wrap: wrap;\n    \n    .status-view-group {\n      margin-right: 15px;\n    }\n  }\n  \n  .table-container {\n    width: 100%;\n    height: 600px; /* 给表格一个固定高度 */\n    margin-bottom: 15px;\n    border: 1px solid #ebeef5;\n    border-radius: 4px;\n  }\n  \n  /* 高级排序相关样式 */\n  .sort-rules-container {\n    .sort-rule-item {\n      display: flex;\n      align-items: center;\n      margin-bottom: 10px;\n    }\n    \n    .add-sort-rule {\n      margin-top: 15px;\n    }\n  }\n  \n  /* 字段配置相关样式 */\n  .columns-container {\n    .tip-text {\n      margin-bottom: 15px;\n      color: #606266;\n      font-size: 14px;\n    }\n    \n    .column-item {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 8px 10px;\n      border-bottom: 1px solid #ebeef5;\n      \n      &:hover {\n        background-color: #f5f7fa;\n      }\n      \n      .drag-handle {\n        cursor: move;\n        color: #909399;\n      }\n    }\n  }\n  \n  /* 右键菜单样式 */\n  .context-menu {\n    position: fixed;\n    background-color: #fff;\n    border: 1px solid #ebeef5;\n    border-radius: 4px;\n    box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n    z-index: 2000;\n    \n    .context-menu-item {\n      padding: 8px 16px;\n      cursor: pointer;\n      font-size: 14px;\n      \n      &:hover {\n        background-color: #f5f7fa;\n        color: #409eff;\n      }\n    }\n  }\n  \n  /* 状态标签样式 */\n  :deep(.status-tag) {\n    display: inline-block;\n    padding: 2px 8px;\n    border-radius: 4px;\n    font-size: 12px;\n    border: 1px solid transparent;\n  }\n  \n  :deep(.status-warning) {\n    background-color: #fdf6ec;\n    color: #e6a23c;\n    border-color: #faecd8;\n  }\n  \n  :deep(.status-primary) {\n    background-color: #ecf5ff;\n    color: #409eff;\n    border-color: #d9ecff;\n  }\n  \n  :deep(.status-success) {\n    background-color: #f0f9eb;\n    color: #67c23a;\n    border-color: #e1f3d8;\n  }\n  \n  :deep(.status-danger) {\n    background-color: #fef0f0;\n    color: #f56c6c;\n    border-color: #fde2e2;\n  }\n  \n  :deep(.status-default) {\n    background-color: #f4f4f5;\n    color: #909399;\n    border-color: #e9e9eb;\n  }\n  \n  /* 拖拽相关样式 */\n  .ghost {\n    opacity: 0.5;\n    background: #c8ebfb;\n  }\n\n  /* 分组设置样式 */\n  .group-settings {\n    padding: 10px 0;\n  }\n\n  .group-level {\n    display: flex;\n    align-items: center;\n    margin-bottom: 15px;\n  }\n\n  .group-level-label {\n    width: 100px;\n    text-align: right;\n    padding-right: 12px;\n    font-size: 14px;\n    color: #606266;\n  }\n\n  .dialog-footer {\n    display: flex;\n    justify-content: flex-end;\n    gap: 10px;\n  }\n}\n</style> ","<!-- 基于VxeTable实现的可分组表格组件 -->\n<!-- eslint-disable -->\n<template>\n  <div class=\"groupable-table-vxe\">\n    <!-- 表格部分 -->\n    <vxe-table\n      ref=\"xTable\"\n      :data=\"sortedData\"\n      :row-config=\"{\n        keyField: rowKey,\n        isHover: true,\n        isCurrent: true\n      }\"\n      :tree-config=\"treeConfig\"\n      :checkbox-config=\"checkboxConfig\"\n      :filter-config=\"{\n        remote: false,\n        showIcon: true,\n        iconNone: 'vxe-icon-funnel',\n        iconMatch: 'vxe-icon-funnel'\n      }\"\n      :edit-config=\"{\n        trigger: 'click',\n        mode: 'cell'\n      }\"\n      :mouse-config=\"{\n        selected: false\n      }\"\n      border\n      stripe\n      resizable\n      show-header-overflow\n      show-overflow\n      :loading=\"loading\"\n      :height=\"height\"\n      @checkbox-change=\"handleCheckboxChange\"\n      @checkbox-all=\"handleCheckboxAll\"\n      @cell-click=\"handleCellClick\"\n      @cell-dblclick=\"handleCellDblclick\"\n      @sort-change=\"handleSortChange\"\n      @filter-change=\"handleFilterChange\"\n      @edit-closed=\"handleEditClosed\">\n      \n      <!-- 选择列 -->\n      <vxe-column v-if=\"showSelection\" type=\"checkbox\" width=\"50\" align=\"center\" fixed=\"left\"></vxe-column>\n      \n      <!-- 分组列 (移到前面) -->\n      <vxe-column \n        v-if=\"showGroupColumn && groupFields && groupFields.length > 0\"\n        width=\"220\"\n        align=\"left\"\n        :field=\"groupFields[0]\"\n        title=\"分组\"\n        tree-node\n      >\n        <template #header>\n          <div class=\"flex items-center\">\n            <span class=\"mr-2\">分组</span>\n            <el-button \n              type=\"primary\" \n              size=\"small\" \n              plain \n              icon=\"el-icon-delete\" \n              @click=\"clearGrouping\"\n              title=\"清空分组\"\n            >清空</el-button>\n          </div>\n        </template>\n        <template #default=\"{ row }\">\n          <template v-if=\"row.isGroup\">\n            <span class=\"group-title\" :style=\"{ 'margin-left': (row.groupLevel * 8) + 'px' }\" :class=\"`group-level-${row.groupLevel}`\">\n              <strong>{{ row.groupField || '分组' }}:</strong> \n              {{ row.groupValue || '未分类' }}\n              <span class=\"group-count\">({{ row._childCount || row.children.length }})</span>\n            </span>\n          </template>\n          <template v-else>\n            <span class=\"leaf-node\">{{ getLeafDisplayValue(row) }}</span>\n          </template>\n        </template>\n      </vxe-column>\n      \n      <!-- 子表格展开列 (移到后面) -->\n      <vxe-column v-if=\"enableSubTable\" type=\"expand\" width=\"60\" align=\"center\">\n        <template #content=\"{ row }\">\n          <div v-if=\"row.subTableData && row.subTableData.length > 0\" class=\"subtable-container\">\n            <h4>子表格数据</h4>\n            <vxe-table\n              :data=\"row.subTableData\"\n              :row-config=\"{ keyField: 'id', isHover: true }\"\n              border\n              stripe\n              size=\"small\"\n            >\n              <vxe-column\n                v-for=\"(column, index) in childColumns\"\n                :key=\"index\"\n                :field=\"column.prop\"\n                :title=\"column.label\"\n                :width=\"column.width\"\n              ></vxe-column>\n            </vxe-table>\n          </div>\n          <div v-else class=\"no-subtable-data\">\n            <span>无子表格数据</span>\n          </div>\n        </template>\n      </vxe-column>\n      \n      <!-- 动态列 -->\n      <template v-for=\"(column, index) in visibleColumns\" :key=\"index\">\n        <vxe-column\n          :field=\"column.prop\"\n          :title=\"column.label\"\n          :width=\"column.width\"\n          :sortable=\"column.sortable\"\n          :fixed=\"column.fixed\"\n          :filters=\"column.filterable ? getColumnFilters(column.prop) : null\"\n          :filter-multiple=\"column.filterable\"\n          :edit-render=\"column.editable ? { name: 'input' } : null\">\n          <template #default=\"{ row }\">\n            <!-- 加载状态列 -->\n            <template v-if=\"column.prop === 'loadingStatus' && !row.isGroup\">\n              <div class=\"status-tag\" :class=\"`status-${getStatusType(row.loadingStatus)}`\">\n                {{ row.loadingStatus || '' }}\n              </div>\n            </template>\n            \n            <!-- 操作列 -->\n            <template v-else-if=\"column.prop === 'operation' && !row.isGroup\">\n              <div class=\"operation-buttons\">\n                <button class=\"operation-btn\" @click=\"handleDetail(row.id)\">详情</button>\n                <button class=\"operation-btn more-btn\" @click=\"handleMoreOperations(row.id)\">\n                  更多<i class=\"el-icon-arrow-down\"></i>\n                </button>\n              </div>\n            </template>\n            \n            <!-- 预约状态列 -->\n            <template v-else-if=\"column.prop === 'appointmentStatus' && !row.isGroup\">\n              <div class=\"status-tag\" :class=\"`status-${getAppointmentStatusType(row.appointmentStatus)}`\">\n                {{ row.appointmentStatus || '未设置' }}\n              </div>\n            </template>\n            \n            <!-- 标签列 -->\n            <template v-else-if=\"column.prop === 'tags' && !row.isGroup\">\n              <template v-if=\"row.tags\">\n                <template v-if=\"typeof row.tags === 'string'\">\n                  <span \n                    v-for=\"tag in getValidTags(row.tags)\" \n                    :key=\"tag\"\n                    class=\"tag-item\"\n                    :class=\"`tag-${getTagType(tag)}`\"\n                  >\n                    {{ tag }}\n                  </span>\n                </template>\n                <template v-else>\n                  <span class=\"tag-item\" :class=\"`tag-${getTagType(row.tags)}`\">{{ row.tags }}</span>\n                </template>\n              </template>\n              <template v-else>\n                <span>未设置</span>\n              </template>\n            </template>\n            \n            <!-- 其他列 -->\n            <template v-else>\n              {{ row[column.prop] }}\n            </template>\n          </template>\n        </vxe-column>\n      </template>\n    </vxe-table>\n    \n    <!-- 分页部分 -->\n    <div v-if=\"showPagination\" class=\"pagination-container\">\n      <vxe-pager\n        :current-page=\"currentPage\"\n        :page-size=\"pageSize\"\n        :total=\"total\"\n        :sizes=\"pageSizes\"\n        :layouts=\"['PrevJump', 'PrevPage', 'JumpNumber', 'NextPage', 'NextJump', 'Sizes', 'Total']\" \n        @page-change=\"handlePageChange\">\n      </vxe-pager>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, ref, computed, nextTick, reactive, watch } from 'vue'\n\nexport default defineComponent({\n  name: 'GroupableTableVxe',\n  props: {\n    // 表格数据\n    data: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    // 列配置\n    columns: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    // 行唯一标识字段\n    rowKey: {\n      type: String,\n      default: 'id'\n    },\n    // 分组字段\n    groupFields: {\n      type: Array,\n      default: () => []\n    },\n    // 是否显示选择列\n    showSelection: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示分组列\n    showGroupColumn: {\n      type: Boolean,\n      default: false\n    },\n    // 分组列标签\n    groupColumnLabel: {\n      type: String,\n      default: '分组'\n    },\n    // 是否默认展开所有\n    defaultExpandAll: {\n      type: Boolean,\n      default: true\n    },\n    // 是否显示分页\n    showPagination: {\n      type: Boolean,\n      default: true\n    },\n    // 当前页码\n    currentPage: {\n      type: Number,\n      default: 1\n    },\n    // 每页大小\n    pageSize: {\n      type: Number,\n      default: 20\n    },\n    // 页码选项\n    pageSizes: {\n      type: Array,\n      default: () => [10, 20, 50, 100]\n    },\n    // 总记录数\n    total: {\n      type: Number,\n      default: 0\n    },\n    // 加载状态\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    // 表格高度\n    height: {\n      type: [String, Number],\n      default: 'auto'\n    },\n    // 是否显示未分类项\n    showUnclassified: {\n      type: Boolean,\n      default: false\n    },\n    // 子表格列配置\n    childColumns: {\n      type: Array,\n      default: () => []\n    },\n    // 是否启用子表格\n    enableSubTable: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\n    'selection-change',\n    'size-change',\n    'current-change',\n    'cell-click',\n    'cell-dblclick',\n    'row-click',\n    'row-dblclick',\n    'clear-grouping',\n    'group-cleared',\n    'filter-change',\n    'cell-value-change'\n  ],\n  setup(props, { emit }) {\n    const xTable = ref(null);\n    const selectedRowKeys = ref([]);\n    \n    // ===== 内部排序状态 =====\n    const internalSortConfig = reactive({\n      property: null,\n      order: null\n    });\n    \n    // ===== 内部筛选状态 =====\n    const internalFilterConfig = reactive({\n      filters: {}\n    });\n    \n    // ===== 筛选选项缓存 =====\n    const columnFilterOptions = reactive({});\n    \n    // ===== 计算属性 =====\n    // 获取分组字段列表\n    const groupFields = computed(() => {\n      return props.groupFields && props.groupFields.length > 0 ? props.groupFields : [];\n    });\n    \n    // 是否启用分组\n    const hasGrouping = computed(() => groupFields.value.length > 0);\n    \n    // 处理树形表格配置\n    const treeConfig = computed(() => {\n      if (!hasGrouping.value) return { enabled: false };\n      return {\n        enabled: true,\n        children: 'children',\n        expandAll: props.defaultExpandAll,\n        indent: 16,\n        line: false,\n        iconOpen: 'vxe-icon-caret-down',\n        iconClose: 'vxe-icon-caret-right',\n        iconRemoveInLeaf: true // 在没有子节点的行不显示展开图标\n      };\n    });\n    \n    // 处理复选框配置\n    const checkboxConfig = computed(() => {\n      if (!props.showSelection) return { enabled: false };\n      return {\n        enabled: true,\n        strict: false,\n        highlight: true,\n        range: true // 启用范围选择\n      };\n    });\n    \n    // 可见列\n    const visibleColumns = computed(() => {\n      return props.columns.filter(col => col.visible !== false);\n    });\n    \n    // 处理后的数据\n    const processedData = computed(() => {\n      // 1. 定义一个函数判断行是否有有效内容（排除 id, rowKey, children）\n      const hasValidRowContent = (item) => {\n        for (const key in item) {\n          if (key !== 'id' && \n              key !== props.rowKey && \n              key !== 'children' && \n              item[key] !== undefined && \n              item[key] !== null && \n              item[key] !== '') {\n            return true;\n          }\n        }\n        return false;\n      };\n      \n      // 2. 初始过滤：如果不需要显示未分类，则过滤掉所有无效行\n      let initialData = props.data;\n      if (!props.showUnclassified) {\n        initialData = props.data.filter(hasValidRowContent);\n      }\n      \n      // 3. 如果没有分组，直接调用 processGroupData 处理（它会恢复 subTableData）\n      if (!hasGrouping.value) {\n        return processGroupData(initialData, []); // 传入空 fields 触发恢复逻辑\n      }\n      \n      // 4. 如果有分组，准备分组数据\n      const dataForGrouping = initialData.filter(hasValidRowContent); // 确保只传递有效行给分组\n      \n      // 过滤掉分组字段为空的行 (如果 showUnclassified 为 false)\n      const finalDataForGrouping = !props.showUnclassified ? \n        dataForGrouping.filter(item => {\n          const hasGroupValue = groupFields.value.every(field => \n            item[field] !== undefined && \n            item[field] !== null && \n            item[field] !== ''\n          );\n          return hasGroupValue;\n        }) : \n        dataForGrouping;\n\n      // 5. 调用分组处理函数，获取最终的分组结构 (已包含 subTableData)\n      return processGroupData(finalDataForGrouping, groupFields.value);\n    });\n\n    // ===== 自定义树排序逻辑 =====\n    const sortTreeData = (treeData, sortConfig) => {\n      if (!sortConfig || !sortConfig.property || !sortConfig.order) {\n        return treeData; // 没有有效排序配置，返回原树\n      }\n\n      const { property, order } = sortConfig;\n      const groupColumnField = groupFields.value.length > 0 ? groupFields.value[0] : null;\n\n      // 比较函数\n      const compareValues = (a, b) => {\n        let comparison = 0;\n        if (a === undefined || a === null || a === '') return order === 'asc' ? 1 : -1;\n        if (b === undefined || b === null || b === '') return order === 'asc' ? -1 : 1;\n        \n        if (typeof a === 'number' && typeof b === 'number') {\n          comparison = a - b;\n        } else {\n          comparison = String(a).localeCompare(String(b));\n        }\n        return order === 'asc' ? comparison : -comparison;\n      };\n\n      // 递归排序函数\n      const recursiveSort = (nodes) => {\n        if (!nodes || nodes.length === 0) return nodes;\n\n        // 1. 如果按分组列排序，只排当前层的分组节点\n        if (property === groupColumnField && nodes.every(n => n.isGroup)) {\n           return nodes.sort((a, b) => compareValues(a.groupValue, b.groupValue));\n        }\n\n        // 2. 对当前层的 children 进行排序 (递归)\n        const sortedNodes = nodes.map(node => {\n          if (node.isGroup && node.children && node.children.length > 0) {\n            // 递归对其子节点排序\n            node.children = recursiveSort(node.children);\n          }\n          return node;\n        });\n        \n        // 3. 对当前层节点进行排序 (主要针对叶子节点或混合节点)\n        return sortedNodes.sort((a, b) => {\n          // 保持分组节点在前 (或在后，取决于偏好)\n          if (a.isGroup && !b.isGroup) return -1;\n          if (!a.isGroup && b.isGroup) return 1;\n          \n          // 如果都是分组节点，且不是按分组列排，保持原始相对顺序\n          if (a.isGroup && b.isGroup && property !== groupColumnField) {\n            return 0; \n          }\n          \n          // 如果都是叶子节点，或按分组列排分组节点\n          const aValue = a.isGroup ? a.groupValue : a[property];\n          const bValue = b.isGroup ? b.groupValue : b[property];\n          \n          return compareValues(aValue, bValue);\n        });\n      };\n\n      return recursiveSort([...treeData]); // 使用副本进行排序\n    };\n\n    // ===== 最终排序后的数据 =====\n    const sortedData = computed(() => {\n      // VXE-Table 会先根据 :filters 自动筛选 processedData，\n      // 然后我们再对筛选后的结果进行自定义排序\n      // 注意：VXE Table 内部可能已经应用了筛选，但我们在这里访问不到那个中间状态\n      //       所以我们直接对 processedData 进行排序。\n      //       VXE Table 在渲染时会应用它自己的筛选和我们提供的排序。\n      return sortTreeData(processedData.value, internalSortConfig);\n    });\n\n    // 优化：计算并缓存筛选选项\n    const updateColumnFilters = (data) => {\n      const newOptions = {};\n      props.columns.forEach(column => {\n        if (column.filterable && column.prop !== 'operation') {\n          const uniqueValues = new Set();\n          const collectValues = (rows) => {\n            if (!rows || !Array.isArray(rows)) return;\n            rows.forEach(row => {\n              if (!row.isGroup && row[column.prop] !== undefined && row[column.prop] !== null) {\n                uniqueValues.add(String(row[column.prop]));\n              }\n              if (row.children && row.children.length) {\n                collectValues(row.children);\n              }\n            });\n          };\n          collectValues(data);\n          newOptions[column.prop] = Array.from(uniqueValues).map(value => ({ label: value, value }));\n        }\n      });\n      // 更新缓存\n      Object.assign(columnFilterOptions, newOptions);\n    };\n\n    // 监听原始数据变化，更新筛选选项缓存\n    watch(() => props.data, (newData) => {\n      updateColumnFilters(newData);\n    }, { immediate: true, deep: true });\n\n    // 获取列筛选条件 (从缓存读取)\n    const getColumnFilters = (field) => {\n      return columnFilterOptions[field] || [];\n    };\n\n    // 清空分组 (需要重置内部排序状态)\n    const clearGrouping = () => {\n      internalSortConfig.property = null;\n      internalSortConfig.order = null;\n      const prevFields = [...groupFields.value];\n      emit('update:groupFields', []);\n      emit('clear-grouping', prevFields);\n      nextTick(() => {\n        emit('group-cleared');\n      });\n    };\n\n    // ===== 核心方法 =====\n    // 重构：处理多级分组数据 (创建分组行，原始行作为 children)\n    const processGroupData = (data, fields) => {\n      if (!fields || fields.length === 0 || !data || data.length === 0) {\n        // 如果没有分组或没有数据，返回原始有效数据\n        // 需要恢复 children 为 subTableData，因为 processedData 不再处理无分组情况\n        return data.map(item => {\n          const originalItem = props.data.find(orig => orig[props.rowKey] === item[props.rowKey]);\n          if (originalItem && originalItem.children) {\n            item.subTableData = originalItem.children;\n          }\n          delete item.children; // 清理可能存在的 children\n          return item;\n        });\n      }\n\n      const getFieldDisplayName = (field) => {\n        const column = props.columns.find(col => col.prop === field);\n        return column ? column.label : field;\n      };\n\n      let groupRowIdCounter = 1; // 用于生成唯一的分组行 ID\n\n      const processLevel = (items, level = 0) => {\n        const currentField = fields[level];\n        const isLastLevel = level === fields.length - 1;\n        const groups = new Map();\n        const unclassifiedItems = [];\n\n        items.forEach(item => {\n          const value = item[currentField];\n          if (value === undefined || value === null || value === '') {\n            unclassifiedItems.push(item);\n          } else {\n            const groupKey = String(value);\n            if (!groups.has(groupKey)) {\n              groups.set(groupKey, []);\n            }\n            groups.get(groupKey).push(item);\n          }\n        });\n\n        const levelResult = [];\n\n        // 处理有明确分组值的项\n        groups.forEach((groupItems, groupValue) => {\n          const groupNode = {\n            id: `group-${level}-${groupRowIdCounter++}`,\n            isGroup: true,\n            groupLevel: level + 1,\n            groupField: getFieldDisplayName(currentField),\n            groupValue: groupValue === 'undefined' || groupValue === 'null' ? '未分类' : groupValue,\n            [currentField]: groupValue, // 保留原始值用于可能的排序\n            _groupKey: groupValue,\n            _expanded: true,\n            children: []\n          };\n\n          if (isLastLevel) {\n            // 最深层分组：children 是原始数据项 (需要恢复 subTableData)\n            groupNode.children = groupItems.map(item => {\n              const originalItem = props.data.find(orig => orig[props.rowKey] === item[props.rowKey]);\n              if (originalItem && originalItem.children) {\n                item.subTableData = originalItem.children;\n              }\n              delete item.children; // 清理可能存在的 children\n              return item;\n            });\n            groupNode._childCount = groupNode.children.length;\n          } else {\n            // 非最深层：递归处理下一层\n            groupNode.children = processLevel(groupItems, level + 1);\n            // 计算子节点总数（包括嵌套的）\n            groupNode._childCount = groupNode.children.reduce((count, child) => {\n              return count + (child.isGroup ? child._childCount : 1);\n            }, 0);\n          }\n\n          // 只有当分组确实包含子节点时才添加\n          if (groupNode._childCount > 0) {\n            levelResult.push(groupNode);\n          }\n        });\n\n        // 处理未分类项\n        if (props.showUnclassified && unclassifiedItems.length > 0) {\n          const unclassifiedNode = {\n            id: `group-${level}-unclassified-${groupRowIdCounter++}`,\n            isGroup: true,\n            groupLevel: level + 1,\n            groupField: getFieldDisplayName(currentField),\n            groupValue: '未分类',\n            _groupKey: '__unclassified__',\n            _expanded: true,\n            children: []\n          };\n\n          if (isLastLevel) {\n            // 最深层：children 是原始未分类数据项 (需要恢复 subTableData)\n            unclassifiedNode.children = unclassifiedItems.map(item => {\n              const originalItem = props.data.find(orig => orig[props.rowKey] === item[props.rowKey]);\n              if (originalItem && originalItem.children) {\n                item.subTableData = originalItem.children;\n              }\n              delete item.children; // 清理可能存在的 children\n              return item;\n            });\n            unclassifiedNode._childCount = unclassifiedNode.children.length;\n          } else {\n            // 非最深层：递归处理下一层\n            unclassifiedNode.children = processLevel(unclassifiedItems, level + 1);\n            unclassifiedNode._childCount = unclassifiedNode.children.reduce((count, child) => {\n              return count + (child.isGroup ? child._childCount : 1);\n            }, 0);\n          }\n\n          if (unclassifiedNode._childCount > 0) {\n            levelResult.push(unclassifiedNode);\n          }\n        }\n\n        return levelResult;\n      };\n\n      return processLevel(data);\n    };\n    \n    // 获取有效的标签（解决v-if与v-for混用问题）\n    const getValidTags = (tagsString) => {\n      if (!tagsString) return [];\n      return tagsString.split(',')\n        .map(tag => tag.trim())\n        .filter(tag => tag);\n    };\n    \n    // 获取叶子节点的显示值\n    const getLeafDisplayValue = (row) => {\n      if (!groupFields.value || groupFields.value.length === 0) return '';\n      \n      // 使用合适的分组字段 - 使用lastField更合适\n      const lastField = groupFields.value[groupFields.value.length - 1]; // 使用最后一个分组字段\n      const value = row[lastField];\n      \n      // 如果未分类且设置为不显示，返回空字符串\n      if ((value === undefined || value === null || value === '') && !props.showUnclassified) {\n        return '';\n      }\n      \n      return value === undefined || value === null || value === '' ? '未分类' : String(value);\n    };\n    \n    // ===== 事件处理 =====\n    // 处理选择变更\n    const handleCheckboxChange = ({ records }) => {\n      selectedRowKeys.value = records.map(record => record[props.rowKey]);\n      emit('selection-change', records);\n    };\n    \n    // 处理全选/取消全选\n    const handleCheckboxAll = ({ records }) => {\n      selectedRowKeys.value = records.map(record => record[props.rowKey]);\n      emit('selection-change', records);\n    };\n    \n    // 处理单元格点击 \n    const handleCellClick = ({ row, column, $event }) => {\n      if (!row || !column) return;\n      \n        emit('cell-click', {\n        record: row,\n        column: column.property,\n        event: $event\n      });\n      \n      emit('row-click', row, $event);\n    };\n    \n    // 处理单元格双击\n    const handleCellDblclick = ({ row, column, $event }) => {\n      if (!row || !column) return;\n      \n        emit('cell-dblclick', {\n        record: row,\n        column: column.property,\n        event: $event\n      });\n      \n      emit('row-dblclick', row, $event);\n    };\n    \n    // 处理内部排序变更\n    const handleSortChange = ({ property, order }) => {\n      internalSortConfig.property = order ? property : null; // 如果 order 为空则清空排序\n      internalSortConfig.order = order;\n      // 注意：不再 emit('sort-change')\n    };\n    \n    // 处理内部筛选变更 (更新内部状态并emit事件)\n    const handleFilterChange = ({ column, property, values }) => {\n      if (values && values.length) {\n        internalFilterConfig.filters[property] = values;\n      } else {\n        delete internalFilterConfig.filters[property];\n      }\n      // 触发VXE Table的内部筛选更新 (通过重新计算 sortedData)\n      // 不需要手动调用 applyFilters，因为VXE会根据 :filters 和选中的值自动处理\n      \n      emit('filter-change', {\n        column,\n        property,\n        values,\n        filters: { ...internalFilterConfig.filters }\n      });\n    };\n    \n    // 处理页码变更\n    const handlePageChange = ({ currentPage, pageSize }) => {\n      emit('current-change', currentPage);\n      emit('size-change', pageSize);\n    };\n    \n    // 详情按钮处理\n    const handleDetail = (id) => {\n      window.handleDetail?.(id);\n    };\n    \n    // 更多操作按钮处理\n    const handleMoreOperations = (id) => {\n      window.handleMoreOperations?.(id);\n    };\n    \n    // 处理单元格编辑完成\n    const handleEditClosed = ({ row, column }) => {\n      if (!row || !column) return;\n      \n      // 从原始 props.data 中获取旧值，确保准确性\n      const originalItem = props.data.find(item => item[props.rowKey] === row[props.rowKey]);\n      const oldValue = originalItem ? originalItem[column.property] : undefined;\n      \n      // 直接从 row 对象获取编辑后的新值\n      const newValue = row[column.property]; \n      \n      // 只有当值实际改变时才更新和通知\n      if (newValue !== oldValue) {\n        console.log(`[GroupableTableVisactor] Edit closed. Field: ${column.property}, Old: ${oldValue}, New: ${newValue}`);\n        \n        // 通知父组件数据已更改，传递从 row 对象获取的新值\n        emit('cell-value-change', {\n          record: row, // 传递整个行记录\n          column: column.property,\n          value: newValue, // 使用从 row 读取的新值\n          oldValue: oldValue\n        });\n\n        // 尝试强制刷新列和数据\n        nextTick(() => {\n          if (xTable.value) {\n            const vxeColumn = xTable.value.getColumnByField(column.property);\n            if (vxeColumn) {\n              xTable.value.refreshColumn(vxeColumn);\n            }\n            // xTable.value.syncData(); \n          }\n        });\n      } else {\n        console.log(`[GroupableTableVisactor] Edit closed. Field: ${column.property}. Value not changed.`);\n      }\n      \n      // 无论值是否改变，都清除选择状态（以防万一）\n      nextTick(() => {\n        if (xTable.value) {\n          xTable.value.clearSelected();\n          xTable.value.clearCurrentRow();\n          xTable.value.clearCurrentColumn();\n        }\n      });\n    };\n    \n    // ===== 表格操作方法 =====\n    // 切换所有行的选择状态\n    const toggleAllSelection = () => {\n      xTable.value?.toggleAllCheckboxRow();\n    };\n    \n    // 清空所有选择\n    const clearSelection = () => {\n      xTable.value?.clearCheckboxRow();\n    };\n    \n    // 选择特定行\n    const toggleRowSelection = (row, selected) => {\n      if (!xTable.value) return;\n      \n      if (selected) {\n        xTable.value.setCheckboxRow(row, true);\n      } else {\n        xTable.value.setCheckboxRow(row, false);\n      }\n    };\n    \n    // 获取状态类型\n    const getStatusType = (status) => {\n      if (!status) return 'default';\n      if (status === '待处理') return 'warning';\n      if (status === '处理中') return 'primary';\n      if (status === '已完成') return 'success';\n      if (status === '已取消') return 'danger';\n      return 'default';\n    };\n    \n    // 获取预约状态类型\n    const getAppointmentStatusType = (status) => {\n      if (!status) return 'default';\n      if (status === '未预约') return 'warning';\n      if (status === '已预约') return 'success';\n      if (status === '已取消') return 'danger';\n      return 'default';\n    };\n    \n    // 获取标签类型\n    const getTagType = (tag) => {\n      if (!tag) return 'default';\n      // 确保tag是字符串类型\n      const tagStr = String(tag);\n      const tagLower = tagStr.toLowerCase();\n      if (tagLower.includes('urgent') || tagLower.includes('紧急')) return 'danger';\n      if (tagLower.includes('delay') || tagLower.includes('延迟')) return 'warning';\n      if (tagLower.includes('completed') || tagLower.includes('完成')) return 'success';\n      return 'primary';\n    };\n    \n    // 判断单元格是否可编辑（防止分组行和特殊列进行编辑）\n    const allowEditingCell = ({ row, column }) => {\n      if (!row || !column) return false;\n      \n      // 不允许编辑分组行\n      if (row.isGroup) return false;\n      \n      // 检查列是否在可编辑列表中\n      const colDef = props.columns.find(col => col.prop === column.property);\n      return colDef && colDef.editable === true;\n    };\n    \n    // 返回组件方法和属性\n    return {\n      xTable,\n      selectedRowKeys,\n      hasGrouping,\n      treeConfig,\n      checkboxConfig,\n      sortedData,\n      visibleColumns,\n      getValidTags,\n      getLeafDisplayValue,\n      toggleAllSelection,\n      clearSelection,\n      toggleRowSelection,\n      handleCheckboxChange,\n      handleCheckboxAll,\n      handleCellClick,\n      handleCellDblclick,\n      handleSortChange,\n      handleFilterChange,\n      handlePageChange,\n      handleDetail,\n      handleMoreOperations,\n      getStatusType,\n      getAppointmentStatusType,\n      getTagType,\n      clearGrouping,\n      getColumnFilters,\n      handleEditClosed,\n      allowEditingCell\n    };\n  }\n});\n</script>\n\n<style lang=\"scss\" scoped>\n.groupable-table-vxe {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  \n  .vxe-table {\n    flex: 1;\n    min-height: 400px;\n    border: 1px solid #ebeef5;\n  }\n  \n  .pagination-container {\n    margin-top: 10px;\n      display: flex;\n    justify-content: flex-end;\n  }\n  \n  // 分组列头部样式\n  .group-column-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    \n    .clear-group-btn {\n      padding: 2px;\n      border: none;\n      background: transparent;\n      cursor: pointer;\n      font-size: 12px;\n      color: #909399;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      \n      &:hover {\n        color: #F56C6C;\n      }\n    }\n  }\n  \n  // 分组样式\n  .group-name {\n    display: flex;\n    align-items: center;\n    font-weight: bold;\n    padding: 4px 0;\n  }\n  \n  .group-title {\n    margin-right: 8px;\n  }\n  \n  .group-count {\n    color: #909399;\n    font-size: 12px;\n    font-weight: normal;\n  }\n  \n  // 分组级别样式\n  .group-level-1 .group-title {\n    color: #409EFF;\n    font-size: 14px;\n  }\n  \n  .group-level-2 .group-title {\n    color: #67C23A;\n    font-size: 13px;\n  }\n  \n  .group-level-3 .group-title {\n    color: #E6A23C;\n    font-size: 13px;\n  }\n  \n  // 叶子节点样式\n  .leaf-node {\n    color: #606266;\n    font-size: 13px;\n  }\n  \n  // 状态标签样式\n  .status-tag {\n    display: inline-block;\n    padding: 2px 8px;\n    border-radius: 4px;\n    font-size: 12px;\n    border: 1px solid transparent;\n  }\n  \n  .status-warning {\n    background-color: #fdf6ec;\n    color: #e6a23c;\n    border-color: #faecd8;\n  }\n  \n  .status-primary {\n    background-color: #ecf5ff;\n    color: #409eff;\n    border-color: #d9ecff;\n  }\n  \n  .status-success {\n    background-color: #f0f9eb;\n    color: #67c23a;\n    border-color: #e1f3d8;\n  }\n  \n  .status-danger {\n    background-color: #fef0f0;\n    color: #f56c6c;\n    border-color: #fde2e2;\n  }\n  \n  .status-default {\n    background-color: #f4f4f5;\n    color: #909399;\n    border-color: #e9e9eb;\n  }\n  \n  // 标签样式\n  .tag-item {\n    display: inline-block;\n    padding: 1px 5px;\n    border-radius: 3px;\n    font-size: 12px;\n    margin-right: 4px;\n    margin-bottom: 2px;\n  }\n  \n  .tag-primary {\n    background-color: #ecf5ff;\n    color: #409eff;\n  }\n  \n  .tag-success {\n    background-color: #f0f9eb;\n    color: #67c23a;\n  }\n  \n  .tag-warning {\n    background-color: #fdf6ec;\n    color: #e6a23c;\n  }\n  \n  .tag-danger {\n    background-color: #fef0f0;\n    color: #f56c6c;\n  }\n  \n  .tag-default {\n    background-color: #f4f4f5;\n    color: #909399;\n  }\n  \n  // 操作按钮样式\n  .operation-buttons {\n    display: flex;\n    gap: 4px;\n  }\n  \n  .operation-btn {\n    padding: 2px 6px;\n    font-size: 12px;\n    border-radius: 3px;\n    border: 1px solid #dcdfe6;\n    background-color: #ffffff;\n    cursor: pointer;\n    transition: all 0.3s;\n    \n    &:hover {\n      background-color: #f5f7fa;\n      border-color: #c6e2ff;\n      color: #409eff;\n    }\n  }\n  \n  .more-btn {\n    display: flex;\n    align-items: center;\n    \n    i {\n      margin-left: 3px;\n      font-size: 10px;\n    }\n  }\n}\n\n.group-level-1 {\n  color: #409EFF;\n  font-weight: bold;\n}\n\n.group-level-2 {\n  color: #67C23A;\n  font-weight: bold;\n}\n\n.group-level-3 {\n  color: #E6A23C;\n  font-weight: bold;\n}\n\n.group-count {\n  font-size: 12px;\n  color: #909399;\n  margin-left: 4px;\n}\n\n.leaf-node {\n  color: #606266;\n}\n</style> ","import { render } from \"./GroupableTableVisactor.vue?vue&type=template&id=5c81ef96&scoped=true\"\nimport script from \"./GroupableTableVisactor.vue?vue&type=script&lang=js\"\nexport * from \"./GroupableTableVisactor.vue?vue&type=script&lang=js\"\n\nimport \"./GroupableTableVisactor.vue?vue&type=style&index=0&id=5c81ef96&lang=scss&scoped=true\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-5c81ef96\"]])\n\nexport default __exports__","import { render } from \"./newFBXVisactor.vue?vue&type=template&id=28eb082c&scoped=true\"\nimport script from \"./newFBXVisactor.vue?vue&type=script&lang=js\"\nexport * from \"./newFBXVisactor.vue?vue&type=script&lang=js\"\n\nimport \"./newFBXVisactor.vue?vue&type=style&index=0&id=28eb082c&lang=scss&scoped=true\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-28eb082c\"]])\n\nexport default __exports__"],"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_createVNode","_component_el_select","modelValue","_ctx","warehouse","_cache","$event","placeholder","size","default","_withCtx","_component_el_option","label","value","_","createDateType","_hoisted_4","_component_el_date_picker","dateRange","type","format","searchType","_component_el_input","searchText","_hoisted_5","_component_el_button","onClick","handleSearch","_createTextVNode","handleBatchOperation","_hoisted_6","_component_el_radio_group","currentView","_component_el_radio_button","_toDisplayString","statusCounts","all","pending","processing","completed","cancelled","_Fragment","_renderList","customViews","view","_createBlock","key","id","onContextmenu","_withModifiers","handleContextMenu","name","handleSaveView","showGroupModal","showSortModal","showFilterPanel","showColumnSettings","_hoisted_7","_component_groupable_table_visactor","ref","data","displayData","columns","tableColumns","filter","col","visible","multiGroupFields","length","groupField","hasGroupData","getColumnLabel","currentPage","pageSize","total","loading","showUnclassified","childColumns","enableSubTable","onSelectionChange","handleSelectionChange","onSizeChange","handleSizeChange","onCurrentChange","handleCurrentChange","onCellDblclick","handleCellDbClick","onSortChange","handleSortChange","onClearGrouping","handleClearGrouping","onCellValueChange","handleCellValueChange","_component_filter_panel","filterPanelVisible","activeFilters","filterLogic","onApplyFilters","applyFilters","onCancel","cancelFilters","_component_el_dialog","title","saveViewDialogVisible","width","footer","saveView","_component_el_form","model","viewForm","_component_el_form_item","required","groupModalVisible","_hoisted_12","clearGroupSettings","applyGroupSettings","_hoisted_8","_hoisted_9","groupSettings","level1","style","clearable","groupableFields","field","prop","_hoisted_10","level2","_hoisted_11","level3","sortModalVisible","cancelSorting","applySorting","_hoisted_13","tempSortSettings","sortRule","index","sortableFields","order","icon","circle","removeTempSortRule","_hoisted_14","addTempSortRule","columnSettingsVisible","resetColumnSettings","cancelColumnSettings","applyColumnSettings","_hoisted_15","_component_draggable","tempTableColumns","handle","animation","item","element","_hoisted_16","_component_el_checkbox","contextMenuVisible","_normalizeStyle","left","contextMenuX","top","contextMenuY","deleteView","currentEditingView","_createCommentVNode","editDialogVisible","saveDialogEdit","editingForm","editingColumn","includes","getOptionsForColumn","option","_component_vxe_table","sortedData","rowKey","treeConfig","checkboxConfig","border","stripe","resizable","height","onCheckboxChange","handleCheckboxChange","onCheckboxAll","handleCheckboxAll","onCellClick","handleCellClick","handleCellDblclick","onFilterChange","handleFilterChange","onEditClosed","handleEditClosed","showSelection","_component_vxe_column","align","fixed","showGroupColumn","groupFields","header","plain","clearGrouping","row","isGroup","_normalizeClass","groupLevel","groupValue","_childCount","children","getLeafDisplayValue","content","subTableData","keyField","isHover","column","visibleColumns","sortable","filters","filterable","getColumnFilters","editable","tags","getValidTags","tag","getTagType","getAppointmentStatusType","appointmentStatus","handleDetail","handleMoreOperations","getStatusType","loadingStatus","showPagination","_component_vxe_pager","sizes","pageSizes","layouts","onPageChange","handlePageChange","defineComponent","props","Array","String","Boolean","groupColumnLabel","defaultExpandAll","Number","emits","setup","emit","xTable","selectedRowKeys","internalSortConfig","reactive","property","internalFilterConfig","columnFilterOptions","computed","hasGrouping","enabled","expandAll","indent","line","iconOpen","iconClose","iconRemoveInLeaf","strict","highlight","range","processedData","hasValidRowContent","undefined","initialData","processGroupData","dataForGrouping","finalDataForGrouping","hasGroupValue","every","sortTreeData","treeData","sortConfig","groupColumnField","compareValues","a","b","comparison","localeCompare","recursiveSort","nodes","n","sort","sortedNodes","map","node","aValue","bValue","updateColumnFilters","newOptions","forEach","uniqueValues","Set","collectValues","rows","isArray","add","from","Object","assign","watch","newData","immediate","deep","prevFields","nextTick","fields","originalItem","find","orig","getFieldDisplayName","groupRowIdCounter","processLevel","items","level","currentField","isLastLevel","groups","Map","unclassifiedItems","push","groupKey","has","set","get","levelResult","groupItems","groupNode","_groupKey","_expanded","reduce","count","child","unclassifiedNode","tagsString","split","trim","lastField","records","record","event","values","window","oldValue","newValue","console","log","vxeColumn","getColumnByField","refreshColumn","clearSelected","clearCurrentRow","clearCurrentColumn","toggleAllSelection","toggleAllCheckboxRow","clearSelection","clearCheckboxRow","toggleRowSelection","selected","setCheckboxRow","status","tagStr","tagLower","toLowerCase","allowEditingCell","colDef","__exports__","mockData","i","trainNumber","containerNo","soNumber","shipmentNumber","trackingNumber","address","city","state","zipCode","deliveryArea","deliveryAppointmentTime","padStart","deliveryTime","eta","remarks","components","FilterPanel","GroupableTableVisactor","draggable","visactorTable","tableData","selectedRows","sortSettings","batchDialogVisible","memo","batchOperation","batchForm","followUp","pcType","targetWarehouse","currentRow","newFilter","operator","detailInfo","direction","detailDialogVisible","selectedRecord","menuPosition","containerShipmentsColumns","containerItemsColumns","v","fetchData","async","Promise","resolve","setTimeout","containerShipmentsData","slice","counts","refreshDisplayData","error","ElMessage","message","filteredData","text","toString","applySort","showEmptyRows","startIndex","endIndex","applyAdvancedFilters","logic","results","prototype","hasOwnProperty","call","itemValue","startsWith","endsWith","result","some","fieldValue","groupName","getStatusTagType","getCurrentFilterConditions","conditions","page","clientX","clientY","onMounted","savedViews","localStorage","getItem","JSON","parse","e","document","addEventListener","handleClickOutsideContextMenu","onBeforeUnmount","removeEventListener","columnMap","viewCol","applyMultiLevelGrouping","success","stringify","splice","s","warning","newView","Date","now","description","setItem","viewId","findIndex","preventDefault","newOrder","columnProp","openEditDialog","testWithMockData","aStr","bStr","originalRecord","warn","render"],"sourceRoot":""}