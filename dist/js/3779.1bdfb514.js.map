{"version":3,"file":"js/3779.1bdfb514.js","mappings":"2pBA6DA,MAAMA,GAASC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,IAAI,IAClBC,GAAUC,EAAAA,EAAAA,IAAS,IACnBC,GAAYH,EAAAA,EAAAA,KAAI,GAMhBI,EAASA,KACbP,EAAOQ,MAAM,EAITC,GAAeC,EAAAA,EAAAA,KAAS,IACvBR,EAAYS,MAGVP,EAAQQ,QAAOC,GACpBA,EAAKC,YAAYC,cAAcC,SAASd,EAAYS,MAAMI,iBAHnDX,IAQLa,EAAoBC,UACxBZ,EAAUK,OAAQ,EAClBQ,QAAQC,IAAI,8BACZ,UAEQ,IAAIC,SAAQC,GAAWC,WAAWD,EAAS,OAGjD,MAAME,EAAW,CACf,CAAEC,GAAI,EAAGX,YAAa,eAAgBY,mBAAoB,oBAC1D,CAAED,GAAI,EAAGX,YAAa,eAAgBY,mBAAoB,oBAC1D,CAAED,GAAI,EAAGX,YAAa,gBACtB,CAAEW,GAAI,EAAGX,YAAa,eAAgBY,mBAAoB,oBAC1D,CAAED,GAAI,EAAGX,YAAa,eAAgBY,mBAAoB,oBAE1D,CAAED,GAAI,EAAGX,YAAa,eAAgBY,mBAAoB,qBAG5DtB,EAAQuB,OAAS,EACjBvB,EAAQwB,QAAQJ,GAChBL,QAAQC,IAAI,qBAAsBhB,EACpC,CAAE,MAAOyB,GACPV,QAAQU,MAAM,8BAA+BA,GAE7CC,EAAAA,GAAUD,MAAM,WAClB,CAAE,QACAvB,EAAUK,OAAQ,CACpB,IAKFoB,EAAAA,EAAAA,KAAU,KACRd,GAAmB,IAIrB,MAAMe,EAAWA,KAEfb,QAAQC,IAAI,+BAAgClB,EAAYS,MAAM,EAI1DsB,EAAUA,KACd/B,EAAYS,MAAQ,GACpBQ,QAAQC,IAAI,iBAAiB,EAGzBc,EAAeC,IACnBhB,QAAQC,IAAI,kBAAmBe,GAC/BnC,EAAO4B,KAAK,CAAEQ,KAAM,kBAAmBC,OAAQ,CAAEC,QAASH,EAAMV,GAAIX,YAAaqB,EAAMrB,cAAgB,EAInGyB,EAAcA,KAElBvC,EAAO4B,KAAK,CAAEQ,KAAM,mBAAoB,E,gqCCvI1C,MAAMI,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,G","sources":["webpack://vue-logistics-system/./src/views/SMS/PhoneApp/Stocking.vue","webpack://vue-logistics-system/./src/views/SMS/PhoneApp/Stocking.vue?f728"],"sourcesContent":["/* eslint-disable vue/multi-word-component-names */\r\n<template>\r\n  <!-- 包裹层，用于居中显示手机模型 -->\r\n  <div class=\"stocking-view-wrapper\">\r\n    <div class=\"phone-mockup\">\r\n      <div class=\"phone-screen\">\r\n        <!-- 原 Stocking.vue 的内容放在这里 -->\r\n        <div class=\"stocking-container-el\">\r\n          <el-page-header @back=\"goBack\" content=\"备货\">\r\n          </el-page-header>\r\n\r\n          <div class=\"search-bar-el\">\r\n            <div style=\"display: flex; gap: 10px; align-items: center;\">\r\n              <el-input\r\n                v-model=\"searchQuery\"\r\n                placeholder=\"搜索车次号\"\r\n                clearable\r\n                @keyup.enter=\"onSearch\"\r\n                @clear=\"onClear\"\r\n                style=\"flex-grow: 1;\"\r\n              >\r\n                <template #append>\r\n                  <el-button @click=\"onSearch\">搜索</el-button>\r\n                </template>\r\n              </el-input>\r\n              <el-button @click=\"goToHistory\" type=\"info\" plain>备货历史</el-button>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"train-list-el\">\r\n            <el-card \r\n              shadow=\"never\" \r\n              v-for=\"item in filteredList\" \r\n              :key=\"item.id\" \r\n              class=\"train-card-el\" \r\n              @click=\"selectTrain(item)\"\r\n            >\r\n              <div class=\"card-content-el\">\r\n                <div class=\"train-number-el\">车次号: {{ item.trainNumber }}</div>\r\n                <div class=\"arrival-time-el\">计划到达时间: {{ item.plannedArrivalTime || 'N/A' }}</div>\r\n              </div>\r\n            </el-card>\r\n            <p v-if=\"!filteredList.length && !isLoading\" class=\"no-data-el\">没有找到匹配的车次</p>\r\n             <p v-if=\"isLoading\" class=\"loading-el\">加载中...</p> \r\n          </div>\r\n\r\n        </div>\r\n        <!-- 原内容结束 -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, computed, onMounted } from 'vue'; // 引入 computed 和 onMounted\r\nimport { useRouter } from 'vue-router';\r\n// 移除 Vant 引入\r\n// import { NavBar as VanNavBar, Search as VanSearch, List as VanList, Cell as VanCell, Toast } from 'vant';\r\n// 引入 Element Plus 组件 和 ElMessage\r\nimport { ElPageHeader, ElInput, ElCard, ElButton, ElMessage } from 'element-plus';\r\n\r\nconst router = useRouter();\r\nconst searchQuery = ref('');\r\nconst allList = reactive([]); // 存储所有车次数据\r\nconst isLoading = ref(false); // 加载状态\r\n// 移除 Vant List 相关状态\r\n// const loading = ref(false);\r\n// const finished = ref(false);\r\n// const currentPage = ref(0);\r\n\r\nconst goBack = () => {\r\n  router.back();\r\n};\r\n\r\n// 计算属性，根据搜索词过滤列表\r\nconst filteredList = computed(() => {\r\n  if (!searchQuery.value) {\r\n    return allList;\r\n  }\r\n  return allList.filter(item => \r\n    item.trainNumber.toLowerCase().includes(searchQuery.value.toLowerCase())\r\n  );\r\n});\r\n\r\n// 模拟获取所有车次列表数据 (一次性加载)\r\nconst fetchAllTrainList = async () => {\r\n  isLoading.value = true;\r\n  console.log('Fetching all train list...');\r\n  try {\r\n    // 模拟 API 请求延迟\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n\r\n    // 模拟数据 - 实际应从 API 获取\r\n    const mockData = [\r\n      { id: 1, trainNumber: 'T20240726001', plannedArrivalTime: '2024-07-26 10:00' },\r\n      { id: 2, trainNumber: 'T20240726002', plannedArrivalTime: '2024-07-26 11:30' },\r\n      { id: 3, trainNumber: 'T20240727001' },\r\n      { id: 4, trainNumber: 'G20240727002', plannedArrivalTime: '2024-07-27 09:00' },\r\n      { id: 5, trainNumber: 'K20240728001', plannedArrivalTime: '2024-07-28 15:00' },\r\n       // Add more mock data if needed\r\n      { id: 6, trainNumber: 'Z20240729001', plannedArrivalTime: '2024-07-29 18:00' },\r\n    ];\r\n\r\n    allList.length = 0; // 清空旧数据\r\n    allList.push(...mockData);\r\n    console.log('Train list loaded:', allList);\r\n  } catch (error) {\r\n    console.error('Failed to fetch train list:', error);\r\n    // 替换 Toast.fail\r\n    ElMessage.error('加载车次列表失败');\r\n  } finally {\r\n    isLoading.value = false;\r\n  }\r\n};\r\n\r\n// 移除 onLoad 方法，改为在 onMounted 中调用 fetchAllTrainList\r\n// const onLoad = async () => { ... };\r\nonMounted(() => {\r\n  fetchAllTrainList();\r\n});\r\n\r\n// onSearch 只需确保计算属性重新计算，无需手动加载\r\nconst onSearch = () => {\r\n  // 搜索逻辑由计算属性 filteredList 处理\r\n  console.log('Search triggered with query:', searchQuery.value);\r\n};\r\n\r\n// onClear 清空搜索词，计算属性会自动更新\r\nconst onClear = () => {\r\n  searchQuery.value = '';\r\n  console.log('Search cleared');\r\n};\r\n\r\nconst selectTrain = (train) => {\r\n  console.log('Selected Train:', train);\r\n  router.push({ name: 'StockingConfirm', params: { trainId: train.id, trainNumber: train.trainNumber } });\r\n};\r\n\r\n// 新增：跳转到备货历史页面的方法\r\nconst goToHistory = () => {\r\n  // 假设历史页面的路由名称是 'StockingHistory'\r\n  router.push({ name: 'StockingHistory' });\r\n};\r\n\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n/* 新增：外层包裹样式 */\r\n.stocking-view-wrapper {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 20px;\r\n  background-color: #f0f2f5;\r\n  min-height: calc(100vh - 104px);\r\n}\r\n\r\n/* 手机外壳样式 */\r\n.phone-mockup {\r\n  width: 390px;\r\n  height: 844px;\r\n  border: 12px solid black;\r\n  border-radius: 50px;\r\n  background-color: #f9f9f9;\r\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\r\n  position: relative;\r\n  padding: 15px;\r\n  box-sizing: border-box;\r\n\r\n  &::before {\r\n    content: '';\r\n    position: absolute;\r\n    top: 0;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    width: 150px;\r\n    height: 25px;\r\n    background-color: black;\r\n    border-bottom-left-radius: 15px;\r\n    border-bottom-right-radius: 15px;\r\n    z-index: 2;\r\n  }\r\n}\r\n\r\n.phone-screen {\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: #ffffff;\r\n  border-radius: 38px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n/* 原 Stocking.vue 的样式，现在作用于手机屏幕内部 */\r\n.stocking-container-el {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%; /* 填满手机屏幕 */\r\n  /* background-color: #f0f2f5; */ /* 手机屏幕背景是白色，不需要这个了 */\r\n  border-radius: 38px; // 适应手机屏幕圆角\r\n  overflow: hidden; // 防止内部内容溢出圆角\r\n}\r\n\r\n.el-page-header {\r\n  background-color: #fff;\r\n  padding: 10px 20px;\r\n  /* box-shadow: 0 1px 4px rgba(0, 21, 41, 0.08); */ /* 内部不需要阴影 */\r\n   flex-shrink: 0; // 防止被压缩\r\n   border-bottom: 1px solid #eee; // 简单的分割线\r\n}\r\n\r\n.search-bar-el {\r\n  padding: 10px;\r\n  background-color: #fff;\r\n   flex-shrink: 0;\r\n}\r\n\r\n.train-list-el {\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n  padding: 10px; /* 统一内边距 */\r\n}\r\n\r\n.train-card-el {\r\n  margin-bottom: 8px; // 减少间距\r\n  cursor: pointer;\r\n  transition: box-shadow 0.2s ease-in-out;\r\n\r\n  &:hover {\r\n     box-shadow: var(--el-box-shadow-lighter);\r\n  }\r\n}\r\n\r\n:deep(.el-card__body) {\r\n  padding: 0; \r\n}\r\n\r\n.card-content-el {\r\n   padding: 12px 15px; // 调整卡片内边距\r\n}\r\n\r\n.train-number-el {\r\n  font-weight: bold;\r\n  margin-bottom: 4px; // 减少间距\r\n  font-size: 15px; // 调整字体大小\r\n}\r\n\r\n.arrival-time-el {\r\n  font-size: 12px; // 调整字体大小\r\n  color: #606266;\r\n}\r\n\r\n.no-data-el, .loading-el {\r\n  text-align: center;\r\n  color: #909399;\r\n  margin-top: 15px; // 调整间距\r\n  font-size: 14px;\r\n}\r\n\r\n/* 手机外壳的响应式样式 */\r\n@media (max-height: 900px) {\r\n  .phone-mockup {\r\n    transform: scale(0.9);\r\n  }\r\n}\r\n@media (max-width: 450px) {\r\n  .stocking-view-wrapper {\r\n      padding: 10px 0;\r\n  }\r\n   .phone-mockup {\r\n    width: 95%;\r\n    height: auto;\r\n    min-height: 600px;\r\n    max-height: 85vh;\r\n    padding: 10px;\r\n    border-width: 10px;\r\n    border-radius: 40px;\r\n     &::before {\r\n       width: 120px;\r\n       height: 20px;\r\n       border-bottom-left-radius: 12px;\r\n       border-bottom-right-radius: 12px;\r\n    }\r\n  }\r\n   .phone-screen {\r\n      border-radius: 30px;\r\n   }\r\n   .stocking-container-el {\r\n       border-radius: 30px; // 保持一致\r\n   }\r\n}\r\n\r\n</style> ","import script from \"./Stocking.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Stocking.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Stocking.vue?vue&type=style&index=0&id=718e5aa4&scoped=true&lang=scss\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-718e5aa4\"]])\n\nexport default __exports__"],"names":["router","useRouter","searchQuery","ref","allList","reactive","isLoading","goBack","back","filteredList","computed","value","filter","item","trainNumber","toLowerCase","includes","fetchAllTrainList","async","console","log","Promise","resolve","setTimeout","mockData","id","plannedArrivalTime","length","push","error","ElMessage","onMounted","onSearch","onClear","selectTrain","train","name","params","trainId","goToHistory","__exports__"],"sourceRoot":""}