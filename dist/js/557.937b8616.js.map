{"version":3,"file":"js/557.937b8616.js","mappings":"8mBAgLA,MAAMA,GAAgBC,EAAAA,EAAAA,IAAI,IACpBC,GAAyBD,EAAAA,EAAAA,IAAI,IAC7BE,EAAsB,CAAC,EAGvBC,EAAsB,CACxB,CAAEC,MAAO,SAAUC,MAAO,MAC1B,CAAED,MAAO,WAAYC,MAAO,OAG1BC,EAAmB,CACrB,CAAEF,MAAO,MAAOC,MAAO,MAAOE,IAAK,WACnC,CAAEH,MAAO,MAAOC,MAAO,MAAOE,IAAK,WACnC,CAAEH,MAAO,KAAMC,MAAO,KAAME,IAAK,WACjC,CAAEH,MAAO,KAAMC,MAAO,KAAME,IAAK,QACjC,CAAEH,MAAO,KAAMC,MAAO,KAAME,IAAK,WAG/BC,EAAmBA,CAACC,EAAa,GAAIC,EAAgB,KAEzD,MAAMC,EAAY,GAClB,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAeE,IAAK,CACvC,MAAMC,EAAa,YAAYC,OAAOC,aAAa,GAAKH,KAElDI,EAAeJ,EAAI,IAAM,EAAI,SAAW,WAC9CD,EAAUM,KAAK,CACbC,GAAIL,EACJM,KAAM,MAAML,OAAOC,aAAa,GAAKH,KACrCQ,KAAMJ,IAERd,EAAoBW,GAAcQ,YAA4B,EAAhBC,KAAKC,SAAe,GAAGC,QAAQ,GAC/E,CACAzB,EAAcK,MAAQO,EAGtB,MAAMc,EAAW,CAAC,UAAW,UAAW,UAAW,UAAW,WACxDC,EAAW,CAAC,SAAU,UAAW,WACjCC,EAAa,CAAC,MAAO,MAAO,KAAM,KAAM,MACxCC,EAAS,GACTC,EAAM,IAAIC,KAEhB,IAAK,IAAIlB,EAAI,EAAGA,EAAIH,EAAYG,IAAK,CACnC,MAAMmB,EAAWpB,EAAUC,EAAID,EAAUqB,QACnCC,EAAcR,EAASb,EAAIa,EAASO,QACpCE,EAAYP,EAAWf,EAAIe,EAAWK,QACtCG,EAAqB,GAAGF,KAAeC,KAA+B,WAAlBH,EAASX,KAAoB,KAAO,SAASR,EAAI,IAAM,EAAI,MAAQ,UACvHwB,EAASV,EAASd,EAAIc,EAASM,QAE/BK,EAAa,IAAIP,KAAKD,EAAIS,UAAYhB,KAAKiB,MAAsB,GAAhBjB,KAAKC,SAAgB,GAAK,GAAK,GAAK,MAC3F,IAAIiB,EAAWC,EACfD,EAAY,IAAIV,KAAKO,EAAWC,UAAYhB,KAAKiB,MAAsB,EAAhBjB,KAAKC,SAAe,GAAK,GAAK,GAAK,MAC1FkB,EAAU,IAAIX,KAAKU,EAAUE,cAAgB,EAAGF,EAAUG,WAAYH,EAAUI,WAEjE,YAAXR,GACAK,EAAU,IAAIX,KAAKD,EAAIS,UAAiD,GAArChB,KAAKiB,MAAsB,GAAhBjB,KAAKC,SAAgB,GAAU,GAAK,GAAK,KAClFiB,EAAYC,IAASD,EAAY,IAAIV,KAAKW,EAAQH,UAAY,WACjD,YAAXF,GACNI,EAAY,IAAIV,KAAKD,EAAIS,UAAiD,GAArChB,KAAKiB,MAAsB,GAAhBjB,KAAKC,SAAgB,GAAU,GAAK,GAAK,KACzFkB,EAAU,IAAIX,KAAKU,EAAUE,cAAgB,EAAGF,EAAUG,WAAYH,EAAUI,aAEhFJ,EAAY,IAAIV,KAAKD,EAAIS,UAA6C,GAAjChB,KAAKiB,MAAsB,GAAhBjB,KAAKC,UAAsB,GAAK,GAAK,KACrFkB,EAAU,IAAIX,KAAKU,EAAUE,cAAgB,EAAGF,EAAUG,WAAYH,EAAUI,YAIrF,IAAIC,EAAU,GACd,MAAMC,EAAcxB,KAAKiB,MAAsB,EAAhBjB,KAAKC,UAAgB,EAC9CwB,EAAiB,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAC1JC,EAAW,SACjB,IAAIC,EAAY,IAAOrC,EAAIF,EAAiB,GAA6B,KAAvBY,KAAKC,SAAW,IAElE,MAAM2B,EAAqB,IAAIC,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAaM,IAAK,CAClC,IAAIC,EAAgBN,EAAezB,KAAKiB,MAAMjB,KAAKC,SAAWwB,EAAef,SAE7E,MAAMkB,EAAmBI,IAAID,GACxBA,EAAgBN,EAAezB,KAAKiB,MAAMjB,KAAKC,SAAWwB,EAAef,SAE9EkB,EAAmBK,IAAIF,GAEvBR,EAAQ5B,KAAK,CACTC,GAAI,UAAUN,EAAI,KAAKwC,EAAI,IAC3BJ,SAAUA,EACVK,cAAeA,EAGfG,MAAOnC,YAAY4B,EAAoC,KAAvB3B,KAAKC,SAAW,KAAYC,QAAQ,KAG5E,CAEAI,EAAOX,KAAK,CACVC,GAAI,MAAMN,EAAI,IACdC,WAAYkB,EAASb,GACrBuC,aAAc1B,EAASZ,KACvBH,aAAce,EAASX,KACvBe,mBAAoBA,EACpBD,UAAWA,EACXM,UAAWA,EAAUkB,cAAcC,MAAM,KAAK,GAC9ClB,QAASA,EAAQiB,cAAcC,MAAM,KAAK,GAC1CC,YAAavB,EAAWwB,iBACxBzB,OAAQA,EACRS,QAASA,GAEb,CACA5C,EAAuBG,MAAQwB,CAAM,EAIjCkC,GAAY9D,EAAAA,EAAAA,IAAI,SAChB+D,GAAqB/D,EAAAA,EAAAA,IAAI,MAGzBgE,GAAmBC,EAAAA,EAAAA,IAAS,CAC9BpD,WAAY,KACZsB,mBAAoB,GACpBC,OAAQ,SACRpB,aAAc,GACdkB,UAAW,KAETgC,GAAiBlE,EAAAA,EAAAA,IAAI,IACrBmE,GAAsBnE,EAAAA,EAAAA,IAAI,IAG1BoE,GAAuBpE,EAAAA,EAAAA,KAAI,GAC3BqE,GAAmBJ,EAAAA,EAAAA,IAAS,CAC9BK,kBAAmB,GACnBC,oBAAqB,KAMnBC,EAAmBA,KACrBC,QAAQC,IAAI,qCAAsCV,GAClD,IAAIW,EAAS1E,EAAuBG,MAChC4D,EAAiBnD,aACjB8D,EAASA,EAAOC,QAAOC,GAAKA,EAAEhE,aAAemD,EAAiBnD,cAE9DmD,EAAiB7B,qBACjBwC,EAASA,EAAOC,QAAOC,GAAKA,EAAE1C,mBAAmB2C,cAAcC,SAASf,EAAiB7B,mBAAmB2C,kBAE5Gd,EAAiB5B,SAEbuC,EAD4B,YAA5BX,EAAiB5B,OACRuC,EAAOC,QAAOC,GAAkB,YAAbA,EAAEzC,QAAqC,UAAbyC,EAAEzC,SAE/CuC,EAAOC,QAAOC,GAAKA,EAAEzC,SAAW4B,EAAiB5B,UAI9D4B,EAAiBhD,eACjB2D,EAASA,EAAOC,QAAOC,GAAKA,EAAE7D,eAAiBgD,EAAiBhD,gBAEhEgD,EAAiB9B,YACjByC,EAASA,EAAOC,QAAOC,GAAKA,EAAE3C,YAAc8B,EAAiB9B,aAEjEgC,EAAe9D,MAAQuE,EAEvBR,EAAoB/D,MAAQ,GACxB2D,EAAmB3D,OACnB2D,EAAmB3D,MAAM4E,gBAC7B,EAGEC,EAAwBA,KAC1BjB,EAAiBnD,WAAa,KAC9BmD,EAAiB7B,mBAAqB,GACtC6B,EAAiB5B,OAAS,SAC1B4B,EAAiBhD,aAAe,GAChCgD,EAAiB9B,UAAY,GAC7BsC,GAAkB,EAGhBU,EAAmCC,IACvChB,EAAoB/D,MAAQ+E,CAAS,EAIjCC,EAAwBA,KAC1B,GAAIjB,EAAoB/D,MAAM4B,OAAS,EAEvC,YADIqD,EAAAA,GAAUC,QAAQ,iBAItBb,QAAQC,IAAI,6BAA8BP,EAAoB/D,OAC9D,MAAMmF,EAAkBpB,EAAoB/D,MACtCoF,EAAc,IAAI,IAAIrC,IAAIoC,EAAgBE,KAAIZ,GAAKA,EAAEhE,eAE3DwD,EAAiBC,kBAAoBkB,EAAYC,KAAIvE,IAAM,CACtDA,GAAIA,EACJC,KAAMpB,EAAcK,MAAMsF,MAAKC,GAAKA,EAAEzE,KAAOA,KAAKC,MAAQD,EAC1D0E,OAAQ1F,EAAoBgB,IAAO,MACpC2E,MAAK,CAACC,EAAGC,IAAMD,EAAE3E,KAAK6E,cAAcD,EAAE5E,QAG1C,MAAM8E,EAAgB,IAAIC,IAC1BX,EAAgBY,SAAQC,IACpBA,EAAMvD,SAASsD,SAAQE,IACnB,MAAMC,EAAM,GAAGD,EAAOrD,YAAYqD,EAAOhD,gBACpC4C,EAAc3C,IAAIgD,IACnBL,EAAcM,IAAID,EAAK,CAAEtD,SAAUqD,EAAOrD,SAAUK,cAAegD,EAAOhD,eAC9E,GACF,IAIN,MAAMmD,EAAY,GAClBP,EAAcE,SAAQM,IAClB,MAAMC,EAAM,CACR1D,SAAUyD,EAAUzD,SACpBK,cAAeoD,EAAUpD,cACzBsD,eAAgB,CAAC,EACjBC,YAAaC,IACbC,iBAAkB,MAEtB,IAAIC,GAAgB,EAChBC,EAAiB,EAErBzB,EAAgBY,SAAQC,IACpB,MAAMC,EAASD,EAAMvD,SAAS6C,MAAKuB,GAAKA,EAAEjE,WAAayD,EAAUzD,UAAYiE,EAAE5D,gBAAkBoD,EAAUpD,qBACrF6D,IAAlBb,GAAQ7C,QACRkD,EAAIC,eAAeP,EAAMvF,YAAcwF,EAAO7C,MAC9CuD,GAAgB,EAChBC,IACIX,EAAO7C,MAAQkD,EAAIE,cACnBF,EAAIE,YAAcP,EAAO7C,MACzBkD,EAAII,iBAAmBV,EAAMvF,YAErC,IAIAkG,GAAiBC,GAAkB,IAE/BN,EAAIE,cAAgBC,MAAUH,EAAIE,YAAc,MACpDJ,EAAUvF,KAAKyF,GACnB,IAGJrC,EAAiBE,oBAAsBiC,EAAUX,MAAK,CAACC,EAAGC,IAElDD,EAAE9C,WAAa+C,EAAE/C,SAAiB8C,EAAE9C,SAASgD,cAAcD,EAAE/C,UAC1D8C,EAAEzC,cAAc2C,cAAcD,EAAE1C,iBAE3Ce,EAAqBhE,OAAQ,EAC7BqE,QAAQC,IAAI,qBAAsBL,EAAiB,EAGjD8C,EAAaA,KACf/C,EAAqBhE,OAAQ,CAAK,EAShCgH,EAAaA,CAACtB,EAAGC,EAAGlF,KACtB,MAAMwG,EAASvB,EAAEa,eAAe9F,GAC1ByG,EAASvB,EAAEY,eAAe9F,GAEhC,YAAeqG,IAAXG,QAAmCH,IAAXI,EAA6B,OAC1CJ,IAAXG,EAA6B,OAClBH,IAAXI,GAA8B,EAC3BD,EAASC,CAAM,EAIpBC,EAAgBA,CAACb,EAAK7F,IACjB6F,EAAII,mBAAqBjG,QAAiDqG,IAAnCR,EAAIC,eAAe9F,GAI/D2G,EAAoBpF,IACxB,OAAQA,GACN,IAAK,SAAU,MAAO,UACtB,IAAK,UAAW,MAAO,UACvB,IAAK,UACL,IAAK,QAAS,MAAO,OACrB,IAAK,WAAY,MAAO,SACxB,QAAS,MAAO,OAClB,EAGIqF,EAAgBrF,IACpB,OAAQA,GACN,IAAK,SAAU,MAAO,MACtB,IAAK,UAAW,MAAO,MACvB,IAAK,UAAW,MAAO,MACvB,IAAK,QAAS,MAAO,MACrB,IAAK,WAAY,MAAO,MACxB,QAAS,OAAOA,EAClB,EAIIsF,EAAsBtG,GACjBjB,EAAoBuF,MAAKiC,GAAOA,EAAIvH,QAAUgB,KAAOf,OAASe,EAGnEwG,EAAuBxG,GAClBd,EAAiBoF,MAAKiC,GAAOA,EAAIvH,QAAUgB,KAAOb,KAAO,O,OAIpEsH,EAAAA,EAAAA,KAAU,KACRrH,IACAgE,GAAkB,I,omNC9dpB,MAAMsD,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,G","sources":["webpack://vue-logistics-system/./src/views/Admin/QuoteManagement/QuoteComparisonHistory.vue","webpack://vue-logistics-system/./src/views/Admin/QuoteManagement/QuoteComparisonHistory.vue?9b33"],"sourcesContent":["<template>\n  <div class=\"quote-compare-container\">\n    <el-card>\n       <template #header>\n        <div class=\"card-header\">\n          <span>供应商报价对比</span> \n        </div>\n      </template>\n\n      <el-tabs v-model=\"activeTab\" class=\"quote-tabs\">\n          <el-tab-pane label=\"固定报价对比\" name=\"fixed\">\n              <!-- 1. 固定报价筛选与列表 -->\n              <div v-show=\"!showComparisonResult\">\n                  <el-form :inline=\"true\" :model=\"fixedQuoteFilter\" class=\"filter-form\">\n                     <el-form-item label=\"供应商\">\n                        <el-select v-model=\"fixedQuoteFilter.supplierId\" placeholder=\"选择供应商\" clearable filterable style=\"width: 250px;\">\n                           <el-option\n                             v-for=\"supplier in mockSuppliers\"\n                             :key=\"supplier.id\"\n                             :label=\"supplier.name\"\n                             :value=\"supplier.id\"\n                           />\n                        </el-select>\n                     </el-form-item>\n                     <el-form-item label=\"供应商类型\">\n                        <el-select v-model=\"fixedQuoteFilter.supplierType\" placeholder=\"选择供应商类型\" clearable style=\"width: 150px;\">\n                            <el-option label=\"提柜\" value=\"pickup\" />\n                            <el-option label=\"派送\" value=\"delivery\" />\n                        </el-select>\n                     </el-form-item>\n                     <el-form-item label=\"报价类型\">\n                        <el-select v-model=\"fixedQuoteFilter.quoteType\" placeholder=\"选择报价类型\" clearable style=\"width: 150px;\">\n                            <el-option label=\"FBA\" value=\"FBA\" />\n                            <el-option label=\"FBX\" value=\"FBX\" />\n                            <el-option label=\"直送\" value=\"直送\" />\n                            <el-option label=\"拆柜\" value=\"拆柜\" />\n                            <el-option label=\"提柜\" value=\"pickup\" />\n                        </el-select>\n                     </el-form-item>\n                    <el-form-item label=\"服务描述\">\n                      <el-input v-model=\"fixedQuoteFilter.serviceDescription\" placeholder=\"输入服务/线路关键字\" clearable style=\"width: 250px;\"/>\n                    </el-form-item>\n                    <el-form-item label=\"状态\">\n                       <el-select v-model=\"fixedQuoteFilter.status\" placeholder=\"选择状态\" clearable style=\"width: 150px;\">\n                           <el-option label=\"生效中\" value=\"active\" />\n                           <el-option label=\"待生效\" value=\"pending\" />\n                           <el-option label=\"已过期/结束\" value=\"expired\" />\n                       </el-select>\n            </el-form-item>\n                    <el-form-item>\n                      <el-button type=\"primary\" @click=\"fetchFixedQuotes\">查询</el-button>\n                      <el-button @click=\"resetFixedQuoteFilter\">重置</el-button>\n            </el-form-item>\n      </el-form>\n\n                   <div style=\"margin-bottom: 10px; display: flex; justify-content: flex-end;\">\n                     <el-button type=\"primary\" :disabled=\"selectedFixedQuotes.length < 2\" @click=\"handleCompareSelected\">\n                         对比选中报价 ({{ selectedFixedQuotes.length }})\n                     </el-button>\n                   </div>\n\n                  <el-table \n                      :data=\"fixedQuoteList\" \n                      style=\"width: 100%\" \n                      border\n                      size=\"small\"\n                      @selection-change=\"handleFixedQuoteSelectionChange\"\n                      ref=\"fixedQuoteTableRef\"\n                  >\n                    <el-table-column type=\"selection\" width=\"55\" />\n                    <el-table-column prop=\"supplierName\" label=\"供应商\" width=\"200\" show-overflow-tooltip />\n                    <el-table-column prop=\"supplierType\" label=\"供应商类型\" width=\"100\">\n                        <template #default=\"scope\">\n                            <el-tag size=\"small\" :type=\"scope.row.supplierType === 'delivery' ? 'success' : 'warning'\">\n                                {{ formatSupplierType(scope.row.supplierType) }}\n                            </el-tag>\n                        </template>\n                    </el-table-column>\n                    <el-table-column prop=\"quoteType\" label=\"报价类型\" width=\"100\">\n                        <template #default=\"scope\">\n                            <el-tag size=\"small\" :type=\"getQuoteTypeTagType(scope.row.quoteType)\">\n                                {{ scope.row.quoteType }}\n                            </el-tag>\n                        </template>\n                    </el-table-column>\n                    <el-table-column prop=\"serviceDescription\" label=\"服务/线路描述\" min-width=\"200\" show-overflow-tooltip/>\n                     <el-table-column prop=\"validFrom\" label=\"生效开始日期\" width=\"120\" />\n                     <el-table-column prop=\"validTo\" label=\"生效结束日期\" width=\"120\" />\n                     <el-table-column prop=\"status\" label=\"状态\" width=\"100\">\n                <template #default=\"scope\">\n                           <el-tag size=\"small\" :type=\"getStatusTagType(scope.row.status)\">\n                             {{ formatStatus(scope.row.status) }}\n                    </el-tag>\n                </template>\n             </el-table-column>\n                     <el-table-column prop=\"detailsCount\" label=\"仓库数\" width=\"80\">\n                         <template #default=\"scope\">{{ scope.row.details?.length || 0 }}</template>\n                     </el-table-column>\n                    <!-- Add other relevant columns if needed -->\n          </el-table>\n                   <!-- TODO: Add pagination if needed -->\n              </div>\n\n              <!-- 2. 对比结果显示 -->\n              <div v-show=\"showComparisonResult\">\n                  <div style=\"margin-bottom: 15px;\">\n                       <el-button type=\"primary\" link @click=\"backToList\"><el-icon><ArrowLeft /></el-icon> 返回列表</el-button>\n                       <span style=\"margin-left: 15px; font-weight: bold;\">固定报价对比结果</span>\n                   </div>\n\n                   <!-- 显示供应商及其评分 -->\n                  <div class=\"compared-suppliers-info\" style=\"margin-bottom: 20px; padding: 15px; background-color: #f4f4f5; border-radius: 4px;\">\n                      <h4 style=\"margin-top: 0; margin-bottom: 10px;\">参与对比的供应商：</h4>\n                      <el-row :gutter=\"20\">\n                          <el-col :span=\"6\" v-for=\"supplier in comparisonResult.comparedSuppliers\" :key=\"supplier.id\">\n                             <span>{{ supplier.name }}</span> \n                             <el-rate \n                                v-model=\"supplier.rating\" \n                                disabled \n                                show-score \n                                text-color=\"#ff9900\" \n                                score-template=\"{value} 分\"\n                                size=\"small\"\n                                style=\"margin-left: 10px;\"\n                             />\n                          </el-col>\n                      </el-row>\n          </div>\n          \n                   <h4 style=\"margin-bottom: 10px;\">仓库报价对比明细：</h4>\n                   <el-table :data=\"comparisonResult.comparisonTableData\" border stripe style=\"width: 100%\" size=\"small\">\n                      <el-table-column prop=\"platform\" label=\"平台名称\" width=\"100\" fixed=\"left\"/>\n                      <el-table-column prop=\"warehouseCode\" label=\"仓库代码\" width=\"120\" fixed=\"left\"/>\n                      \n                      <!-- Dynamic Supplier Columns -->\n                       <el-table-column \n                         v-for=\"supplier in comparisonResult.comparedSuppliers\" \n                         :key=\"supplier.id\" \n                         :label=\"supplier.name + ' (USD)'\" \n                         :prop=\"'supplierPrices.' + supplier.id\" \n                         align=\"right\" \n                         width=\"150\"\n                         sortable\n                         :sort-method=\"(a, b) => customSort(a, b, supplier.id)\"\n                         >\n                     <template #default=\"scope\">\n                             <span :style=\"{ color: isLowestPrice(scope.row, supplier.id) ? 'red' : 'inherit', fontWeight: isLowestPrice(scope.row, supplier.id) ? 'bold' : 'normal' }\">\n                               {{ scope.row.supplierPrices[supplier.id] !== undefined ? scope.row.supplierPrices[supplier.id].toFixed(2) : '-' }}\n                             </span>\n                     </template>\n                 </el-table-column>\n            </el-table>\n                   <div v-if=\"comparisonResult.comparisonTableData.length === 0\" style=\"text-align: center; padding: 20px; color: #909399;\">\n                       选中的报价中没有共同包含的仓库明细可供对比。\n      </div>\n      </div>\n\n          </el-tab-pane>\n\n          <el-tab-pane label=\"询价对比\" name=\"inquiry\" disabled>\n               <el-empty description=\"询价对比功能待开发\" />\n          </el-tab-pane>\n          <el-tab-pane label=\"竞价对比\" name=\"bidding\" disabled>\n               <el-empty description=\"竞价对比功能待开发\" />\n          </el-tab-pane>\n      </el-tabs>\n    </el-card>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport { ArrowLeft } from '@element-plus/icons-vue'; // Import icon\n\n// --- 模拟数据 ---\nconst mockSuppliers = ref([]);\nconst mockFixedQuoteDatabase = ref([]); \nconst mockSupplierRatings = {}; // { supplierId: rating }\n\n// 供应商类型和报价类型相关常量\nconst supplierTypeOptions = [\n    { value: 'pickup', label: '提柜' },\n    { value: 'delivery', label: '派送' }\n];\n\nconst quoteTypeOptions = [\n    { value: 'FBA', label: 'FBA', tag: 'success' },\n    { value: 'FBX', label: 'FBX', tag: 'primary' },\n    { value: '直送', label: '直送', tag: 'warning' },\n    { value: '拆柜', label: '拆柜', tag: 'info' },\n    { value: '提柜', label: '提柜', tag: 'danger' }\n];\n\nconst generateMockData = (quoteCount = 50, supplierCount = 5) => {\n  // Suppliers\n  const suppliers = [];\n  for (let i = 1; i <= supplierCount; i++) {\n    const supplierId = `supplier_${String.fromCharCode(64 + i)}`;\n    // 随机分配供应商类型\n    const supplierType = i % 2 === 0 ? 'pickup' : 'delivery'; \n    suppliers.push({ \n      id: supplierId, \n      name: `供应商${String.fromCharCode(64 + i)}`,\n      type: supplierType\n    });\n    mockSupplierRatings[supplierId] = parseFloat((Math.random() * 2 + 3).toFixed(1)); // 3.0 - 5.0 rating\n  }\n  mockSuppliers.value = suppliers;\n\n  // Fixed Quotes\n  const services = ['LAX-FBA', 'LGB-FBA', 'EWR-FBA', 'SAV-FBA', 'DAL-FBA'];\n  const statuses = ['active', 'pending', 'expired'];\n  const quoteTypes = ['FBA', 'FBX', '直送', '拆柜', '提柜']; // 添加所有报价类型\n  const quotes = [];\n  const now = new Date();\n\n  for (let i = 0; i < quoteCount; i++) {\n    const supplier = suppliers[i % suppliers.length];\n    const serviceBase = services[i % services.length];\n    const quoteType = quoteTypes[i % quoteTypes.length]; // 循环分配报价类型\n    const serviceDescription = `${serviceBase} ${quoteType} ${supplier.type === 'pickup' ? '提柜' : '派送'} (${i % 3 === 0 ? '含燃油' : '不含燃油'})`;\n    const status = statuses[i % statuses.length];\n    \n    const submitTime = new Date(now.getTime() - Math.floor(Math.random() * 90 * 24 * 60 * 60 * 1000)); // Past 90 days\n    let validFrom, validTo;\n    validFrom = new Date(submitTime.getTime() + Math.floor(Math.random() * 7 * 24 * 60 * 60 * 1000));\n    validTo = new Date(validFrom.getFullYear() + 1, validFrom.getMonth(), validFrom.getDate()); // 1 year validity\n\n    if (status === 'expired') {\n        validTo = new Date(now.getTime() - Math.floor(Math.random() * 30 + 1) * 24 * 60 * 60 * 1000); // Expired in last 30 days\n         if (validFrom > validTo) validFrom = new Date(validTo.getTime() - 365 * 24 * 60 * 60 * 1000);\n    } else if (status === 'pending') {\n         validFrom = new Date(now.getTime() + Math.floor(Math.random() * 14 + 1) * 24 * 60 * 60 * 1000); // Starts in next 14 days\n         validTo = new Date(validFrom.getFullYear() + 1, validFrom.getMonth(), validFrom.getDate());\n    } else { // active\n         validFrom = new Date(now.getTime() - Math.floor(Math.random() * 60) * 24 * 60 * 60 * 1000); // Started in last 60 days\n         validTo = new Date(validFrom.getFullYear() + 1, validFrom.getMonth(), validFrom.getDate());\n    }\n\n    // Generate details (FBA warehouse details)\n    let details = [];\n    const detailCount = Math.floor(Math.random() * 8) + 5; // 5-12 warehouses\n    const warehouseCodes = ['ONT9', 'HOU2', 'XUS8', 'FTW1', 'FTW2', 'RIC1', 'RIC2', 'RIC3', 'BFI1', 'BFI3', 'XUSD', 'BF14', 'BF15', 'PHX3', 'BFI7', 'SEA6', 'SEA8', 'MKE1'];\n    const platform = 'Amazon';\n    let basePrice = 500 + (i % supplierCount) * 50 + (Math.random() - 0.5) * 200; // Base price varies per supplier\n\n    const usedWarehouseCodes = new Set();\n    for (let j = 0; j < detailCount; j++) {\n        let warehouseCode = warehouseCodes[Math.floor(Math.random() * warehouseCodes.length)];\n        // Ensure unique warehouses per quote for simplicity in mock data\n        while(usedWarehouseCodes.has(warehouseCode)) {\n             warehouseCode = warehouseCodes[Math.floor(Math.random() * warehouseCodes.length)];\n        }\n        usedWarehouseCodes.add(warehouseCode);\n\n        details.push({\n            id: `detail_${i + 1}_${j + 1}`,\n            platform: platform,\n            warehouseCode: warehouseCode,\n            // Remove unnecessary fields for comparison view\n            // country: 'US', state: 'XX', city: 'SomeCity', address: '123 Main St', zipcode: '12345', \n            price: parseFloat((basePrice + (Math.random() - 0.4) * 150).toFixed(2)), // Add variance per warehouse\n            // palletRule: '96inch'\n        });\n    }\n\n    quotes.push({\n      id: `fq_${i + 1}`,\n      supplierId: supplier.id,\n      supplierName: supplier.name,\n      supplierType: supplier.type,\n      serviceDescription: serviceDescription,\n      quoteType: quoteType,\n      validFrom: validFrom.toISOString().split('T')[0],\n      validTo: validTo.toISOString().split('T')[0],\n      submittedAt: submitTime.toLocaleString(),\n      status: status,\n      details: details,\n    });\n  }\n  mockFixedQuoteDatabase.value = quotes;\n};\n\n// --- Component State ---\nconst activeTab = ref('fixed');\nconst fixedQuoteTableRef = ref(null);\n\n// Fixed Quote List State\nconst fixedQuoteFilter = reactive({\n    supplierId: null,\n    serviceDescription: '',\n    status: 'active', // Default to active\n    supplierType: '', // 新增：供应商类型（提柜，派送）\n    quoteType: '', // 新增：报价类型（FBA，FBX，直送，拆柜，提柜）\n});\nconst fixedQuoteList = ref([]);\nconst selectedFixedQuotes = ref([]);\n\n// Comparison Result State\nconst showComparisonResult = ref(false);\nconst comparisonResult = reactive({\n    comparedSuppliers: [], // [{ id, name, rating }] \n    comparisonTableData: [], // [{ platform, warehouseCode, supplierPrices: { supId: price }, lowestPrice: XXX, lowestSupplierId: XXX }] \n});\n\n// --- Methods ---\n\n// Fetch/Filter Fixed Quotes (Simulated)\nconst fetchFixedQuotes = () => {\n    console.log('Fetching fixed quotes with filter:', fixedQuoteFilter);\n    let result = mockFixedQuoteDatabase.value;\n    if (fixedQuoteFilter.supplierId) {\n        result = result.filter(q => q.supplierId === fixedQuoteFilter.supplierId);\n    }\n    if (fixedQuoteFilter.serviceDescription) {\n        result = result.filter(q => q.serviceDescription.toLowerCase().includes(fixedQuoteFilter.serviceDescription.toLowerCase()));\n    }\n    if (fixedQuoteFilter.status) {\n        if (fixedQuoteFilter.status === 'expired') {\n            result = result.filter(q => q.status === 'expired' || q.status === 'ended'); // Assuming ended is similar\n        } else {\n            result = result.filter(q => q.status === fixedQuoteFilter.status);\n        }\n    }\n    // 添加新的筛选条件\n    if (fixedQuoteFilter.supplierType) {\n        result = result.filter(q => q.supplierType === fixedQuoteFilter.supplierType);\n    }\n    if (fixedQuoteFilter.quoteType) {\n        result = result.filter(q => q.quoteType === fixedQuoteFilter.quoteType);\n    }\n    fixedQuoteList.value = result;\n    // Clear selection when refetching\n    selectedFixedQuotes.value = [];\n    if (fixedQuoteTableRef.value) {\n        fixedQuoteTableRef.value.clearSelection();\n    }\n};\n\nconst resetFixedQuoteFilter = () => {\n    fixedQuoteFilter.supplierId = null;\n    fixedQuoteFilter.serviceDescription = '';\n    fixedQuoteFilter.status = 'active';\n    fixedQuoteFilter.supplierType = ''; // 重置供应商类型\n    fixedQuoteFilter.quoteType = ''; // 重置报价类型\n    fetchFixedQuotes();\n};\n\nconst handleFixedQuoteSelectionChange = (selection) => {\n  selectedFixedQuotes.value = selection;\n};\n\n// Comparison Logic\nconst handleCompareSelected = () => {\n    if (selectedFixedQuotes.value.length < 2) {\n        ElMessage.warning('请至少选择两个报价进行对比');\n    return;\n  }\n\n    console.log('Comparing selected quotes:', selectedFixedQuotes.value);\n    const quotesToCompare = selectedFixedQuotes.value;\n    const supplierIds = [...new Set(quotesToCompare.map(q => q.supplierId))];\n    \n    comparisonResult.comparedSuppliers = supplierIds.map(id => ({\n         id: id,\n         name: mockSuppliers.value.find(s => s.id === id)?.name || id,\n         rating: mockSupplierRatings[id] || 0\n    })).sort((a, b) => a.name.localeCompare(b.name)); // Sort suppliers by name for consistent column order\n\n    // Find all unique warehouses across selected quotes\n    const allWarehouses = new Map(); // Key: platform-warehouseCode, Value: { platform, warehouseCode }\n    quotesToCompare.forEach(quote => {\n        quote.details?.forEach(detail => {\n            const key = `${detail.platform}-${detail.warehouseCode}`;\n            if (!allWarehouses.has(key)) {\n                allWarehouses.set(key, { platform: detail.platform, warehouseCode: detail.warehouseCode });\n            }\n        });\n    });\n\n    // Build comparison table data\n    const tableData = [];\n    allWarehouses.forEach(warehouse => {\n        const row = {\n            platform: warehouse.platform,\n            warehouseCode: warehouse.warehouseCode,\n            supplierPrices: {}, // { supplierId: price }\n            lowestPrice: Infinity,\n            lowestSupplierId: null,\n        };\n        let hasPriceInRow = false;\n        let suppliersInRow = 0;\n\n        quotesToCompare.forEach(quote => {\n            const detail = quote.details?.find(d => d.platform === warehouse.platform && d.warehouseCode === warehouse.warehouseCode);\n            if (detail?.price !== undefined) {\n                row.supplierPrices[quote.supplierId] = detail.price;\n                hasPriceInRow = true;\n                suppliersInRow++;\n                if (detail.price < row.lowestPrice) {\n                    row.lowestPrice = detail.price;\n                    row.lowestSupplierId = quote.supplierId;\n                }\n            }\n        });\n\n        // Only include rows where at least two suppliers have a price for this warehouse\n        if (hasPriceInRow && suppliersInRow >= 2) { \n             // If lowestPrice is still Infinity, means no prices were found (shouldn't happen if hasPriceInRow is true, but safety check)\n            if (row.lowestPrice === Infinity) row.lowestPrice = null;\n            tableData.push(row);\n        }\n    });\n\n    comparisonResult.comparisonTableData = tableData.sort((a, b) => {\n        // Sort by platform then warehouse code\n        if (a.platform !== b.platform) return a.platform.localeCompare(b.platform);\n        return a.warehouseCode.localeCompare(b.warehouseCode);\n    });\n    showComparisonResult.value = true;\n    console.log('Comparison Result:', comparisonResult);\n};\n\nconst backToList = () => {\n    showComparisonResult.value = false;\n    // Optionally clear selection or reset completely\n    // selectedFixedQuotes.value = [];\n    // if (fixedQuoteTableRef.value) {\n    //     fixedQuoteTableRef.value.clearSelection();\n    // }\n};\n\n// Helper for dynamic column sorting\nconst customSort = (a, b, supplierId) => {\n    const priceA = a.supplierPrices[supplierId];\n    const priceB = b.supplierPrices[supplierId];\n    // Handle cases where price might be missing\n    if (priceA === undefined && priceB === undefined) return 0;\n    if (priceA === undefined) return 1; // Put undefined values at the end\n    if (priceB === undefined) return -1;\n    return priceA - priceB;\n};\n\n// Helper for highlighting lowest price\nconst isLowestPrice = (row, supplierId) => {\n    return row.lowestSupplierId === supplierId && row.supplierPrices[supplierId] !== undefined;\n};\n\n// Formatting helpers (can be reused or adapted)\nconst getStatusTagType = (status) => {\n  switch (status) {\n    case 'active': return 'success';\n    case 'pending': return 'warning';\n    case 'expired':\n    case 'ended': return 'info';\n    case 'rejected': return 'danger';\n    default: return 'info';\n  }\n};\n\nconst formatStatus = (status) => {\n  switch (status) {\n    case 'active': return '生效中';\n    case 'pending': return '待生效';\n    case 'expired': return '已过期';\n    case 'ended': return '已结束';\n    case 'rejected': return '已拒绝'; // Added for completeness\n    default: return status;\n  }\n};\n\n// 添加新的格式化帮助函数\nconst formatSupplierType = (type) => {\n    return supplierTypeOptions.find(opt => opt.value === type)?.label || type;\n};\n\nconst getQuoteTypeTagType = (type) => {\n    return quoteTypeOptions.find(opt => opt.value === type)?.tag || 'info';\n};\n\n// --- Lifecycle ---\nonMounted(() => {\n  generateMockData();\n  fetchFixedQuotes(); // Load initial list\n});\n\n</script>\n\n<style scoped>\n.quote-compare-container {\n  padding: 20px;\n}\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.filter-form .el-form-item {\n  margin-bottom: 10px;\n  margin-right: 15px;\n}\n.quote-tabs .el-tabs__header {\n    margin-bottom: 20px;\n}\n.compared-suppliers-info .el-col {\n    display: flex;\n    align-items: center;\n    margin-bottom: 5px;\n}\n/* Add specific styles if needed */\n</style> ","import script from \"./QuoteComparisonHistory.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./QuoteComparisonHistory.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./QuoteComparisonHistory.vue?vue&type=style&index=0&id=76acb12e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-76acb12e\"]])\n\nexport default __exports__"],"names":["mockSuppliers","ref","mockFixedQuoteDatabase","mockSupplierRatings","supplierTypeOptions","value","label","quoteTypeOptions","tag","generateMockData","quoteCount","supplierCount","suppliers","i","supplierId","String","fromCharCode","supplierType","push","id","name","type","parseFloat","Math","random","toFixed","services","statuses","quoteTypes","quotes","now","Date","supplier","length","serviceBase","quoteType","serviceDescription","status","submitTime","getTime","floor","validFrom","validTo","getFullYear","getMonth","getDate","details","detailCount","warehouseCodes","platform","basePrice","usedWarehouseCodes","Set","j","warehouseCode","has","add","price","supplierName","toISOString","split","submittedAt","toLocaleString","activeTab","fixedQuoteTableRef","fixedQuoteFilter","reactive","fixedQuoteList","selectedFixedQuotes","showComparisonResult","comparisonResult","comparedSuppliers","comparisonTableData","fetchFixedQuotes","console","log","result","filter","q","toLowerCase","includes","clearSelection","resetFixedQuoteFilter","handleFixedQuoteSelectionChange","selection","handleCompareSelected","ElMessage","warning","quotesToCompare","supplierIds","map","find","s","rating","sort","a","b","localeCompare","allWarehouses","Map","forEach","quote","detail","key","set","tableData","warehouse","row","supplierPrices","lowestPrice","Infinity","lowestSupplierId","hasPriceInRow","suppliersInRow","d","undefined","backToList","customSort","priceA","priceB","isLowestPrice","getStatusTagType","formatStatus","formatSupplierType","opt","getQuoteTypeTagType","onMounted","__exports__"],"sourceRoot":""}