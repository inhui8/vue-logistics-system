{"version":3,"file":"js/42.ee840f58.js","mappings":"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","sources":["webpack://vue-logistics-system/./src/views/Admin/GpsTracking/MapMonitor.vue","webpack://vue-logistics-system/./src/views/Admin/GpsTracking/MapMonitor.vue?49cc"],"sourcesContent":["<template>\n  <div class=\"map-monitor-container\">\n    <el-row :gutter=\"20\">\n      <!-- 地图区域 -->\n      <el-col :span=\"18\">\n        <el-card shadow=\"never\" class=\"map-card\">\n          <template #header>\n            <div class=\"card-header\">\n              <span>车辆实时位置监控 (模拟 SVG)</span>\n              <el-button @click=\"toggleRefresh\" :type=\"isRefreshing ? 'danger' : 'primary'\" size=\"small\">\n                {{ isRefreshing ? '停止刷新' : '自动刷新 (10s)' }}\n              </el-button>\n            </div>\n          </template>\n          <div class=\"svg-map-wrapper\">\n            <svg :viewBox=\"`0 0 ${svgWidth} ${svgHeight}`\" preserveAspectRatio=\"xMidYMid meet\" class=\"svg-map\">\n              <image \n                 href=\"/images/map.jpeg\" \n                 x=\"0\" \n                 y=\"0\" \n                 :width=\"svgWidth\" \n                 :height=\"svgHeight\"\n                 preserveAspectRatio=\"xMidYMid slice\" \n              />\n\n              <g v-for=\"vehicle in filteredVehicleLocations\" :key=\"vehicle.id\">\n                 <template v-if=\"transformCoords(vehicle.lat, vehicle.lng)\">\n                     <g :transform=\"`translate(${transformCoords(vehicle.lat, vehicle.lng).x}, ${transformCoords(vehicle.lat, vehicle.lng).y})`\">\n                        \n                        <circle v-if=\"vehicle.id === selectedVehicleId\"\n                                cx=\"0\" \n                                cy=\"0\"\n                                r=\"15\" \n                                :fill=\"getStatusColor(vehicle.status, true)\"\n                                opacity=\"0.5\">\n                           <animate attributeName=\"r\" values=\"12;18;12\" dur=\"1.5s\" repeatCount=\"indefinite\" />\n                           <animate attributeName=\"opacity\" values=\"0.5;0;0.5\" dur=\"1.5s\" repeatCount=\"indefinite\" />\n                        </circle>\n                        \n                        <path \n                           d=\"M 0 -9 L 6 0 L 0 9 L -6 0 Z\"\n                           :fill=\"getStatusColor(vehicle.status)\" \n                           stroke=\"#ffffff\" \n                           stroke-width=\"1\"\n                           transform=\"scale(1.2)\"\n                           @click=\"focusOnMap(vehicle)\"\n                           style=\"cursor: pointer;\"\n                        >\n                            <title>{{ vehicle.plateNumber }} ({{ formatStatus(vehicle.status) }})</title>\n                        </path>\n\n                        <text \n                           x=\"0\" \n                           y=\"-14\"\n                           text-anchor=\"middle\"\n                           font-size=\"9\"\n                           fill=\"#000000\"\n                           stroke=\"#ffffff\"\n                           stroke-width=\"0.3\"\n                           paint-order=\"stroke\"\n                           style=\"pointer-events: none;\"\n                        >\n                           {{ vehicle.plateNumber }}\n                        </text>\n\n                        <text \n                           x=\"0\" \n                           y=\"-4\"\n                           text-anchor=\"middle\"\n                           font-size=\"7\"\n                           fill=\"#333333\"\n                           stroke=\"#ffffff\"\n                           stroke-width=\"0.2\"\n                           paint-order=\"stroke\"\n                           style=\"pointer-events: none;\"\n                        >\n                           {{ vehicle.city || '' }}{{ (vehicle.city && vehicle.state) ? ', ' : '' }}{{ vehicle.state || '' }}\n                        </text>\n                     </g>\n                 </template>\n              </g>\n            </svg>\n          </div>\n        </el-card>\n      </el-col>\n\n      <!-- 车辆列表与筛选区域 -->\n      <el-col :span=\"6\">\n        <el-card shadow=\"never\" class=\"vehicle-list-card\">\n          <template #header>\n            <span>车辆列表 & 筛选</span>\n          </template>\n           <el-form :model=\"filterForm\" label-position=\"top\" size=\"small\">\n             <el-form-item label=\"供应商\">\n               <el-select v-model=\"filterForm.supplierId\" placeholder=\"所有供应商\" clearable filterable style=\"width: 100%;\">\n                  <el-option\n                     v-for=\"supplier in mockSuppliers\" \n                     :key=\"supplier.id\"\n                     :label=\"supplier.name\"\n                     :value=\"supplier.id\"\n                   />\n               </el-select>\n             </el-form-item>\n              <el-form-item label=\"服务类型\">\n                <el-select v-model=\"filterForm.serviceType\" placeholder=\"所有服务类型\" clearable style=\"width: 100%;\">\n                   <el-option\n                      v-for=\"item in serviceTypeOptions\"\n                      :key=\"item.value\"\n                      :label=\"item.label\"\n                      :value=\"item.value\"\n                    />\n                </el-select>\n              </el-form-item>\n               <el-form-item label=\"车辆状态\">\n                 <el-select v-model=\"filterForm.vehicleStatus\" placeholder=\"所有状态\" clearable style=\"width: 100%;\">\n                    <el-option\n                       v-for=\"item in vehicleStatusOptions\"\n                       :key=\"item.value\"\n                       :label=\"item.label\"\n                       :value=\"item.value\"\n                     />\n                 </el-select>\n               </el-form-item>\n           </el-form>\n           <el-divider />\n          <div class=\"vehicle-scroll-list\">\n             <div v-if=\"filteredVehicleLocations.length === 0\" class=\"no-data\">\n               无匹配车辆\n             </div>\n            <div v-for=\"vehicle in filteredVehicleLocations\" :key=\"vehicle.id\" class=\"vehicle-item\" :class=\"{ 'is-selected': vehicle.id === selectedVehicleId }\">\n              <div class=\"vehicle-info\">\n                <span class=\"plate-number\">{{ vehicle.plateNumber }}</span>\n                 <el-tag :type=\"getStatusTagType(vehicle.status)\" size=\"small\">{{ formatStatus(vehicle.status) }}</el-tag>\n              </div>\n               <div class=\"supplier-name\">{{ vehicle.supplierName }}</div>\n               <div class=\"location-info\" style=\"font-size: 12px; color: #606266;\">\n                 位置: {{ vehicle.city || 'N/A' }}, {{ vehicle.state || 'N/A' }}\n               </div>\n               <div class=\"details\">\n                 速度: {{ vehicle.speed }} km/h | 方向: {{ vehicle.direction }}°\n               </div>\n                <div class=\"coords\" style=\"font-size: 11px; color: #909399;\">\n                  坐标: {{ vehicle.lat }}, {{ vehicle.lng }}\n                </div>\n               <div class=\"task\" v-if=\"vehicle.taskOrderNo\">\n                 任务: {{ vehicle.taskOrderNo }}\n               </div>\n               <div class=\"time\">\n                 更新: {{ vehicle.lastUpdateTime }}\n               </div>\n               <div class=\"actions\">\n                  <el-button text type=\"primary\" size=\"small\" @click=\"focusOnMap(vehicle)\">模拟定位</el-button>\n                  <el-button text type=\"info\" size=\"small\" @click=\"viewHistory(vehicle)\">历史轨迹</el-button>\n               </div>\n            </div>\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, computed, onMounted, onUnmounted } from 'vue';\nimport { ElMessage } from 'element-plus';\n\n// --- SVG Map Dimensions and Coordinate Transformation ---\nconst svgWidth = ref(800);\nconst svgHeight = ref(600);\nconst padding = 50; // Padding inside SVG viewport\n\n// Define the approximate Lat/Lng boundaries of your mock data\n// Adjusted to roughly match the Eastvale, CA area from the screenshot\nconst latMin = 33.94; \nconst latMax = 33.99;\nconst lngMin = -117.60;\nconst lngMax = -117.53;\n\nconst transformCoords = (lat, lng) => {\n  if (lat === undefined || lng === undefined || lat === null || lng === null) {\n      return null; \n  }\n  const clampedLat = Math.max(latMin, Math.min(latMax, lat));\n  const clampedLng = Math.max(lngMin, Math.min(lngMax, lng));\n  const xRatio = (clampedLng - lngMin) / (lngMax - lngMin);\n  const x = padding + xRatio * (svgWidth.value - 2 * padding);\n  const yRatio = (clampedLat - latMin) / (latMax - latMin);\n  const y = padding + (1 - yRatio) * (svgHeight.value - 2 * padding);\n  return { x: Math.round(x), y: Math.round(y) };\n};\n\n// --- Mock Data (Keep existing mock data generation) ---\nconst mockSuppliers = ref([\n  { id: 'supplier_1', name: '测试供应商A - 专做提框服务' },\n  { id: 'supplier_2', name: '测试供应商B - FBA派送专家' },\n  { id: 'supplier_3', name: '测试供应商C - 全能型选手' },\n]);\n\nconst mockBaseVehicles = ref([\n  { id: 'vehicle_1', plateNumber: 'CA12345', supplierId: 'supplier_1', supplierName: '测试供应商A - 专做提框服务', serviceType: 'port_to_warehouse', city: 'Eastvale', state: 'CA' },\n  { id: 'vehicle_2', plateNumber: 'NY98765', supplierId: 'supplier_2', supplierName: '测试供应商B - FBA派送专家', serviceType: 'warehouse_to_destination', city: 'Corona', state: 'CA' },\n  { id: 'vehicle_3', plateNumber: 'TX54321', supplierId: 'supplier_3', supplierName: '测试供应商C - 全能型选手', serviceType: 'general_purpose', city: 'Chino', state: 'CA' },\n   { id: 'vehicle_4', plateNumber: 'FL11223', supplierId: 'supplier_1', supplierName: '测试供应商A - 专做提框服务', serviceType: 'port_to_warehouse', city: 'Eastvale', state: 'CA' },\n   { id: 'vehicle_5', plateNumber: 'AZ55667', supplierId: 'supplier_2', supplierName: '测试供应商B - FBA派送专家', serviceType: 'warehouse_to_destination', city: 'Ontario', state: 'CA' },\n]);\n\nconst vehicleLocations = ref([]);\nconst refreshInterval = ref(null);\nconst isRefreshing = ref(true);\nconst selectedVehicleId = ref(null); // Track the selected vehicle for highlighting\n\nconst generateMockLocationData = () => {\n  const statuses = ['idle', 'loaded', 'stopped', 'moving'];\n  const taskPrefixes = ['PO', 'DO', 'SO'];\n  const nowStr = new Date().toLocaleTimeString('sv-SE');\n\n  vehicleLocations.value = mockBaseVehicles.value.map(baseVehicle => {\n    const existingLocation = vehicleLocations.value.find(loc => loc.id === baseVehicle.id);\n    // Generate initial coords within the new bounds\n    let lat = existingLocation?.lat ?? (latMin + Math.random() * (latMax - latMin)); \n    let lng = existingLocation?.lng ?? (lngMin + Math.random() * (lngMax - lngMin));\n    let speed = 0;\n    let status = statuses[Math.floor(Math.random() * statuses.length)];\n    let direction = Math.floor(Math.random() * 360);\n    let taskOrderNo = null;\n\n    if (existingLocation && status !== 'stopped' && status !== 'idle') {\n       const latChange = (Math.random() - 0.5) * 0.001; // Smaller steps for smaller area\n       const lngChange = (Math.random() - 0.5) * 0.001;\n       lat = Math.max(latMin, Math.min(latMax, existingLocation.lat + latChange));\n       lng = Math.max(lngMin, Math.min(lngMax, existingLocation.lng + lngChange));\n       speed = Math.floor(Math.random() * 80) + 10; \n       direction = (existingLocation.direction + Math.floor((Math.random() - 0.5) * 20) + 360) % 360;\n       status = 'moving';\n    } else if (status === 'stopped' || status === 'idle') {\n        speed = 0;\n         // If stopped/idle, keep previous position if available\n         lat = existingLocation?.lat ?? lat;\n         lng = existingLocation?.lng ?? lng;\n    } else {\n        speed = Math.floor(Math.random() * 80) + 10;\n    }\n\n    if (status === 'loaded' || status === 'moving' || (existingLocation && existingLocation.taskOrderNo)) {\n       taskOrderNo = existingLocation?.taskOrderNo || `${taskPrefixes[Math.floor(Math.random() * taskPrefixes.length)]}${String(Math.random()).slice(2, 8)}`;\n    }\n    if (status === 'idle') taskOrderNo = null; \n\n    return {\n      ...baseVehicle,\n      lat: parseFloat(lat.toFixed(6)),\n      lng: parseFloat(lng.toFixed(6)),\n      speed: speed,\n      direction: direction,\n      status: status,\n      taskOrderNo: taskOrderNo,\n      lastUpdateTime: nowStr,\n    };\n  });\n};\n\n// --- Option Data (Keep existing) ---\nconst serviceTypeOptions = [\n  { value: 'port_to_warehouse', label: '码头到仓库' },\n  { value: 'warehouse_to_destination', label: '仓库到目的地' },\n  { value: 'general_purpose', label: '通用型' },\n];\n\nconst vehicleStatusOptions = [\n  { value: 'idle', label: '空驶' },\n  { value: 'loaded', label: '载货' },\n  { value: 'stopped', label: '停留' },\n  { value: 'moving', label: '行驶中' },\n];\n\n// --- Filtering (Keep existing) ---\nconst filterForm = reactive({\n  supplierId: '',\n  serviceType: '',\n  vehicleStatus: ''\n});\n\nconst filteredVehicleLocations = computed(() => {\n  return vehicleLocations.value.filter(loc => {\n    const supplierMatch = filterForm.supplierId ? loc.supplierId === filterForm.supplierId : true;\n    const serviceTypeMatch = filterForm.serviceType ? loc.serviceType === filterForm.serviceType : true;\n    const statusMatch = filterForm.vehicleStatus ? loc.status === filterForm.vehicleStatus : true;\n    return supplierMatch && serviceTypeMatch && statusMatch;\n  });\n});\n\n// --- Methods ---\n// Formatters\nconst formatStatus = (status) => vehicleStatusOptions.find(opt => opt.value === status)?.label || status;\n\nconst getStatusTagType = (status) => {\n  switch (status) {\n    case 'moving':\n    case 'loaded': return 'success';\n    case 'stopped': return 'warning';\n    case 'idle': return 'info';\n    default: return 'info';\n  }\n};\n\n// Added function to get marker color based on status\nconst getStatusColor = (status, isPulse = false) => {\n  switch (status) {\n    case 'moving': return isPulse ? '#67c23a' : '#4CAF50'; // Green\n    case 'loaded': return isPulse ? '#67c23a' : '#4CAF50'; // Green\n    case 'stopped': return isPulse ? '#e6a23c' : '#FF9800'; // Orange\n    case 'idle': return isPulse ? '#909399' : '#9E9E9E';   // Grey\n    default: return isPulse ? '#909399' : '#9E9E9E';      // Grey\n  }\n};\n\n// Updated focusOnMap to simply set the selected ID\nconst focusOnMap = (vehicle) => {\n  console.log('Simulating focus on vehicle:', vehicle.plateNumber);\n  selectedVehicleId.value = vehicle.id;\n  // No actual map movement, just highlight\n};\n\n// Keep existing viewHistory\nconst viewHistory = (vehicle) => {\n  console.log('查看历史轨迹 for:', vehicle.plateNumber);\n  ElMessage.info(`跳转或弹窗显示 ${vehicle.plateNumber} 的历史轨迹查询 (待实现)`);\n};\n\n// Keep existing refresh logic\nconst startRefresh = () => {\n  if (refreshInterval.value) clearInterval(refreshInterval.value);\n  generateMockLocationData(); \n  refreshInterval.value = setInterval(generateMockLocationData, 10000);\n  isRefreshing.value = true;\n};\n\nconst stopRefresh = () => {\n  if (refreshInterval.value) clearInterval(refreshInterval.value);\n  refreshInterval.value = null;\n  isRefreshing.value = false;\n};\n\nconst toggleRefresh = () => {\n  if (isRefreshing.value) {\n    stopRefresh();\n  } else {\n    startRefresh();\n  }\n};\n\n// --- Lifecycle Hooks ---\nonMounted(() => {\n  startRefresh();\n});\n\nonUnmounted(() => {\n  stopRefresh();\n});\n\n</script>\n\n<style scoped>\n.map-monitor-container {\n  padding: 20px;\n  height: calc(100vh - 104px);\n}\n\n.el-row, .el-col, .el-card {\n  height: 100%;\n}\n\n.map-card .el-card__body {\n  height: calc(100% - 57px);\n  padding: 0;\n  display: flex; /* Use flex to contain SVG wrapper */\n}\n\n.svg-map-wrapper {\n    flex-grow: 1; /* Allow wrapper to grow */\n    height: 100%;\n    overflow: hidden; /* Hide potential overflow if needed */\n    background-color: #f5f7fa; /* Match SVG background initially */\n    display: flex; /* Center SVG if smaller */\n    align-items: center;\n    justify-content: center;\n}\n\n.svg-map {\n    width: 100%; /* Make SVG fill wrapper */\n    height: 100%;\n}\n\n.vehicle-list-card .el-card__body {\n   height: calc(100% - 57px);\n   display: flex;\n   flex-direction: column;\n}\n\n.filter-form .el-form-item {\n  margin-bottom: 10px;\n}\n\n.vehicle-scroll-list {\n  flex-grow: 1;\n  overflow-y: auto;\n  margin-top: 10px;\n  padding-right: 5px;\n}\n\n.vehicle-item {\n  border: 1px solid #ebeef5;\n  border-radius: 4px;\n  padding: 10px;\n  margin-bottom: 10px;\n  font-size: 13px;\n  background-color: #fff;\n  transition: background-color 0.3s;\n}\n\n.vehicle-item.is-selected {\n    background-color: #ecf5ff; \n    border-left: 3px solid #409eff;\n}\n\n.vehicle-info {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 5px;\n}\n\n.plate-number {\n  font-weight: bold;\n}\n\n.supplier-name {\n  color: #606266;\n  margin-bottom: 3px;\n}\n\n.location-info,\n.details,\n.task,\n.time,\n.coords {\n  color: #909399;\n  margin-bottom: 3px;\n}\n\n.time {\n    font-size: 12px;\n}\n\n.actions {\n  margin-top: 5px;\n  text-align: right;\n}\n\n.no-data {\n  text-align: center;\n  color: #909399;\n  padding-top: 20px;\n}\n\n/* Optional: Style for the text if needed */\n.svg-map text {\n    font-weight: 500; /* Make text slightly bolder */\n}\n</style> ","import script from \"./MapMonitor.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./MapMonitor.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./MapMonitor.vue?vue&type=style&index=0&id=0d14a899&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-0d14a899\"]])\n\nexport default __exports__"],"names":["padding","latMin","latMax","lngMin","lngMax","svgWidth","ref","svgHeight","transformCoords","lat","lng","undefined","clampedLat","Math","max","min","clampedLng","xRatio","x","value","yRatio","y","round","mockSuppliers","id","name","mockBaseVehicles","plateNumber","supplierId","supplierName","serviceType","city","state","vehicleLocations","refreshInterval","isRefreshing","selectedVehicleId","generateMockLocationData","statuses","taskPrefixes","nowStr","Date","toLocaleTimeString","map","baseVehicle","existingLocation","find","loc","random","speed","status","floor","length","direction","taskOrderNo","latChange","lngChange","String","slice","parseFloat","toFixed","lastUpdateTime","serviceTypeOptions","label","vehicleStatusOptions","filterForm","reactive","vehicleStatus","filteredVehicleLocations","computed","filter","supplierMatch","serviceTypeMatch","statusMatch","formatStatus","opt","getStatusTagType","getStatusColor","isPulse","focusOnMap","vehicle","console","log","viewHistory","ElMessage","info","startRefresh","clearInterval","setInterval","stopRefresh","toggleRefresh","onMounted","onUnmounted","__exports__"],"sourceRoot":""}