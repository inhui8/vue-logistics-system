{"version":3,"file":"js/4194.e66cbea2.js","mappings":"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","sources":["webpack://vue-logistics-system/./src/views/MessageCenter/EmailManagement/EmailTemplate.vue","webpack://vue-logistics-system/./src/views/MessageCenter/EmailManagement/EmailTemplate.vue?0589"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <el-card shadow=\"never\">\r\n      <!-- 操作区域 -->\r\n      <div class=\"flex justify-between mb-4\">\r\n        <el-button type=\"primary\" icon=\"el-icon-plus\" @click=\"handleAdd\">新增模板</el-button>\r\n        <div>\r\n          <!-- 可以在这里添加按名称/编码搜索 -->\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 表格区域 -->\r\n      <el-table v-loading=\"loading\" :data=\"templateList\">\r\n        <el-table-column label=\"模板编码\" align=\"center\" prop=\"code\" />\r\n        <el-table-column label=\"模板名称\" align=\"center\" prop=\"name\" width=\"180\"/>\r\n        <el-table-column label=\"邮件主题\" align=\"center\" prop=\"subject\" show-overflow-tooltip />\r\n        <el-table-column label=\"发送邮箱\" align=\"center\" prop=\"accountMail\" width=\"180\"/>\r\n        <el-table-column label=\"状态\" align=\"center\" prop=\"status\" width=\"80\">\r\n          <template #default=\"scope\">\r\n            <el-tag :type=\"scope.row.status === 0 ? 'success' : 'danger'\">\r\n              {{ scope.row.status === 0 ? '启用' : '禁用' }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"创建时间\" align=\"center\" prop=\"createTime\" width=\"180\">\r\n           <template #default=\"scope\">\r\n             <span>{{ scope.row.createTime ? new Date(scope.row.createTime).toLocaleString() : '' }}</span>\r\n           </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\" align=\"center\" width=\"200\" class-name=\"small-padding fixed-width\">\r\n          <template #default=\"scope\">\r\n            <el-button link type=\"primary\" icon=\"el-icon-edit\" @click=\"handleUpdate(scope.row)\">修改</el-button>\r\n            <el-button link type=\"primary\" icon=\"el-icon-delete\" @click=\"handleDelete(scope.row)\">删除</el-button>\r\n            <el-button link type=\"primary\" icon=\"el-icon-s-promotion\" @click=\"openTestSendDialog(scope.row)\">测试发送</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <!-- 分页 -->\r\n      <el-pagination\r\n        v-show=\"total > 0\"\r\n        v-model:current-page=\"queryParams.pageNo\"\r\n        v-model:page-size=\"queryParams.pageSize\"\r\n        :total=\"total\"\r\n        :page-sizes=\"[10, 20, 30, 50]\"\r\n        layout=\"total, sizes, prev, pager, next, jumper\"\r\n        @size-change=\"getList\"\r\n        @current-change=\"getList\"\r\n        class=\"mt-4 justify-end\"\r\n      />\r\n    </el-card>\r\n\r\n    <!-- 添加或修改邮件模板对话框 -->\r\n    <el-dialog :title=\"dialogTitle\" v-model=\"dialogVisible\" width=\"700px\" append-to-body>\r\n      <el-form ref=\"formRef\" :model=\"form\" :rules=\"rules\" label-width=\"100px\">\r\n        <el-row :gutter=\"20\">\r\n          <el-col :span=\"12\">\r\n            <el-form-item label=\"模板编码\" prop=\"code\">\r\n              <el-input v-model=\"form.code\" placeholder=\"请输入模板编码\" />\r\n            </el-form-item>\r\n          </el-col>\r\n          <el-col :span=\"12\">\r\n             <el-form-item label=\"模板名称\" prop=\"name\">\r\n               <el-input v-model=\"form.name\" placeholder=\"请输入模板名称\" />\r\n            </el-form-item>\r\n          </el-col>\r\n        </el-row>\r\n         <el-row :gutter=\"20\">\r\n          <el-col :span=\"12\">\r\n             <el-form-item label=\"邮件主题\" prop=\"subject\">\r\n              <el-input v-model=\"form.subject\" placeholder=\"请输入邮件主题\" />\r\n            </el-form-item>\r\n          </el-col>\r\n           <el-col :span=\"12\">\r\n             <el-form-item label=\"发送账号\" prop=\"accountId\">\r\n                <el-select v-model=\"form.accountId\" placeholder=\"请选择发送账号\" style=\"width:100%\">\r\n                   <!-- 假设 accountOptions 是从账号管理获取的 {label: 'email', value: id} 列表 -->\r\n                  <el-option\r\n                    v-for=\"item in accountOptions\"\r\n                    :key=\"item.value\"\r\n                    :label=\"item.label\"\r\n                    :value=\"item.value\" />\r\n                </el-select>\r\n              </el-form-item>\r\n           </el-col>\r\n         </el-row>\r\n         <el-form-item label=\"模板内容\" prop=\"content\">\r\n           <el-input\r\n             v-model=\"form.content\"\r\n             type=\"textarea\"\r\n             :rows=\"6\"\r\n             placeholder=\"请输入模板内容，使用 {变量名} 作为占位符\"\r\n           />\r\n         </el-form-item>\r\n          <el-row :gutter=\"20\">\r\n          <el-col :span=\"12\">\r\n             <el-form-item label=\"状态\" prop=\"status\">\r\n                <el-radio-group v-model=\"form.status\">\r\n                  <el-radio :label=\"0\">启用</el-radio>\r\n                  <el-radio :label=\"1\">禁用</el-radio>\r\n                </el-radio-group>\r\n             </el-form-item>\r\n          </el-col>\r\n        </el-row>\r\n         <el-form-item label=\"备注\" prop=\"remark\">\r\n           <el-input v-model=\"form.remark\" type=\"textarea\" :rows=\"2\" placeholder=\"请输入备注\" />\r\n         </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <div class=\"dialog-footer\">\r\n          <el-button type=\"primary\" @click=\"submitForm\">确 定</el-button>\r\n          <el-button @click=\"cancel\">取 消</el-button>\r\n        </div>\r\n      </template>\r\n    </el-dialog>\r\n\r\n     <!-- 测试发送对话框 -->\r\n    <el-dialog title=\"测试发送邮件\" v-model=\"testDialogVisible\" width=\"600px\" append-to-body>\r\n      <el-form ref=\"testFormRef\" :model=\"testForm\" :rules=\"testRules\" label-width=\"100px\">\r\n        <el-form-item label=\"模板编码\">\r\n          <el-input :value=\"currentTemplate?.code\" disabled />\r\n        </el-form-item>\r\n        <el-form-item label=\"收件邮箱\" prop=\"mail\">\r\n          <el-input v-model=\"testForm.mail\" placeholder=\"请输入收件邮箱\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"模板参数\" prop=\"params\">\r\n          <el-input\r\n            v-model=\"testForm.params\"\r\n            type=\"textarea\"\r\n            :rows=\"4\"\r\n            placeholder='请输入模板参数，JSON 格式，例如：{\"name\": \"张三\", \"orderNo\": \"12345\"}'\r\n          />\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <div class=\"dialog-footer\">\r\n          <el-button type=\"primary\" @click=\"handleTestSend\">发 送</el-button>\r\n          <el-button @click=\"testDialogVisible = false\">取 消</el-button>\r\n        </div>\r\n      </template>\r\n    </el-dialog>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, onMounted } from 'vue';\r\nimport { ElMessage, ElMessageBox } from 'element-plus';\r\n\r\n// --- 数据定义 ---\r\nconst loading = ref(true);\r\nconst templateList = ref([]);\r\nconst total = ref(0);\r\nconst dialogVisible = ref(false);\r\nconst dialogTitle = ref('');\r\nconst formRef = ref(null);\r\nconst testDialogVisible = ref(false);\r\nconst testFormRef = ref(null);\r\nconst currentTemplate = ref(null); // Store the template being tested\r\nconst accountOptions = ref([]); // Store available email accounts for select dropdown\r\n\r\nconst queryParams = reactive({\r\n  pageNo: 1,\r\n  pageSize: 10,\r\n  // name: '',\r\n  // code: ''\r\n});\r\n\r\nconst form = ref({\r\n  id: undefined,\r\n  code: '',\r\n  name: '',\r\n  accountId: undefined,\r\n  subject: '',\r\n  content: '',\r\n  status: 0, // 0:启用, 1:禁用\r\n  remark: ''\r\n});\r\n\r\nconst rules = reactive({\r\n  code: [{ required: true, message: '模板编码不能为空', trigger: 'blur' }],\r\n  name: [{ required: true, message: '模板名称不能为空', trigger: 'blur' }],\r\n  accountId: [{ required: true, message: '发送账号不能为空', trigger: 'change' }],\r\n  subject: [{ required: true, message: '邮件主题不能为空', trigger: 'blur' }],\r\n  content: [{ required: true, message: '模板内容不能为空', trigger: 'blur' }],\r\n  status: [{ required: true, message: '状态不能为空', trigger: 'blur' }]\r\n});\r\n\r\nconst testForm = ref({\r\n  mail: '',\r\n  templateId: undefined,\r\n  params: '' // JSON string for parameters\r\n});\r\n\r\nconst testRules = reactive({\r\n  mail: [\r\n      { required: true, message: '收件邮箱不能为空', trigger: 'blur' },\r\n      { type: 'email', message: '请输入正确的邮箱地址', trigger: ['blur', 'change'] }\r\n    ],\r\n  params: [\r\n    {\r\n      validator: (rule, value, callback) => {\r\n        if (!value) {\r\n           callback(); // Allow empty params\r\n           return;\r\n        }\r\n        try {\r\n          JSON.parse(value);\r\n          callback();\r\n        } catch (e) {\r\n          callback(new Error('请输入有效的 JSON 格式'));\r\n        }\r\n      },\r\n      trigger: 'blur'\r\n    }\r\n  ]\r\n});\r\n\r\n// --- 方法定义 ---\r\n\r\n// 获取账号选项 (模拟)\r\nconst getAccountOptions = () => {\r\n  // In real app, fetch from emailAccountApi.getList()\r\n  accountOptions.value = [\r\n    { value: 1, label: 'sender1@example.com' },\r\n    { value: 2, label: 'sender2@example.com' },\r\n    { value: 3, label: 'no-ssl@example.com' },\r\n    { value: 4, label: 'another@domain.net' },\r\n  ];\r\n};\r\n\r\n// 获取模板列表 (模拟)\r\nconst getList = () => {\r\n  loading.value = true;\r\n  console.log('Fetching template list with params:', queryParams);\r\n  // --- 模拟 API 调用 ---\r\n  setTimeout(() => {\r\n    const mockData = [\r\n      { id: 101, code: 'ORDER_CONFIRM', name: '订单确认邮件', accountId: 1, accountMail: 'sender1@example.com', subject: '您的订单 {orderNo} 已确认', content: '尊敬的 {customerName}，您的订单 {orderNo} 已确认，感谢您的购买！', status: 0, createTime: new Date(Date.now() - 86400000), remark: '给客户发送订单确认信息' },\r\n      { id: 102, code: 'PASSWORD_RESET', name: '密码重置邮件', accountId: 2, accountMail: 'sender2@example.com', subject: '密码重置请求', content: '请点击以下链接重置您的密码：{resetLink}', status: 0, createTime: new Date(Date.now() - 172800000), remark: '用户请求重置密码' },\r\n      { id: 103, code: 'PROMOTION_NEWS', name: '推广活动', accountId: 1, accountMail: 'sender1@example.com', subject: '最新优惠活动！', content: '亲爱的用户，我们有新的优惠活动，详情请见：{promoLink}', status: 1, createTime: new Date(Date.now() - 259200000), remark: '节日推广' },\r\n    ];\r\n    const start = (queryParams.pageNo - 1) * queryParams.pageSize;\r\n    const end = start + queryParams.pageSize;\r\n    templateList.value = mockData.slice(start, end);\r\n    total.value = mockData.length;\r\n    loading.value = false;\r\n  }, 500);\r\n  // --- 模拟结束 ---\r\n  // Actual API call:\r\n  // emailTemplateApi.getPage(queryParams).then(res => { ... });\r\n};\r\n\r\n// 重置表单\r\nconst resetForm = () => {\r\n  form.value = {\r\n    id: undefined,\r\n    code: '',\r\n    name: '',\r\n    accountId: undefined,\r\n    subject: '',\r\n    content: '',\r\n    status: 0,\r\n    remark: ''\r\n  };\r\n  formRef.value?.resetFields();\r\n};\r\n\r\n// 打开新增弹窗\r\nconst handleAdd = () => {\r\n  resetForm();\r\n  getAccountOptions(); // Ensure options are loaded\r\n  dialogTitle.value = '新增邮件模板';\r\n  dialogVisible.value = true;\r\n};\r\n\r\n// 打开修改弹窗\r\nconst handleUpdate = (row) => {\r\n  resetForm();\r\n  getAccountOptions(); // Ensure options are loaded\r\n  form.value = { ...row };\r\n  dialogTitle.value = '修改邮件模板';\r\n  dialogVisible.value = true;\r\n};\r\n\r\n// 取消弹窗\r\nconst cancel = () => {\r\n  dialogVisible.value = false;\r\n  resetForm();\r\n};\r\n\r\n// 提交表单 (模拟)\r\nconst submitForm = () => {\r\n  formRef.value?.validate(async (valid) => {\r\n    if (valid) {\r\n      // --- 模拟 API 调用 ---\r\n      console.log('Submitting template form:', form.value);\r\n      const isUpdate = !!form.value.id;\r\n      ElMessage.success(isUpdate ? '修改成功' : '新增成功');\r\n      dialogVisible.value = false;\r\n      getList();\r\n      // --- 模拟结束 ---\r\n      // Actual API call:\r\n      // if (isUpdate) { emailTemplateApi.update(form.value).then(...); }\r\n      // else { emailTemplateApi.create(form.value).then(...); }\r\n    } else {\r\n      console.log('Template form validation failed');\r\n    }\r\n  });\r\n};\r\n\r\n// 删除模板 (模拟)\r\nconst handleDelete = (row) => {\r\n  ElMessageBox.confirm(\r\n    `确定要删除模板 \"${row.name}\" (编码: ${row.code}) 吗？`,\r\n    '提示',\r\n    { type: 'warning' }\r\n  ).then(() => {\r\n    // --- 模拟 API 调用 ---\r\n    console.log('Deleting template:', row.id);\r\n    ElMessage.success('删除成功');\r\n    getList();\r\n    // --- 模拟结束 ---\r\n    // Actual API call: emailTemplateApi.delete(row.id).then(...);\r\n  }).catch(() => {});\r\n};\r\n\r\n// 打开测试发送弹窗\r\nconst openTestSendDialog = (row) => {\r\n  currentTemplate.value = row;\r\n  testForm.value = {\r\n    mail: '',\r\n    templateId: row.id,\r\n    params: ''\r\n  };\r\n  testFormRef.value?.resetFields();\r\n  testDialogVisible.value = true;\r\n};\r\n\r\n// 处理测试发送 (模拟)\r\nconst handleTestSend = () => {\r\n  testFormRef.value?.validate(async (valid) => {\r\n    if (valid) {\r\n      // --- 模拟 API 调用 ---\r\n      let paramsObject = {};\r\n      try {\r\n        paramsObject = testForm.value.params ? JSON.parse(testForm.value.params) : {};\r\n      } catch (e) { /* Already validated, but double check */ }\r\n\r\n      const payload = {\r\n        mail: testForm.value.mail,\r\n        templateId: testForm.value.templateId,\r\n        templateParams: paramsObject\r\n      }\r\n      console.log('Sending test email with payload:', payload);\r\n      ElMessage.info(`正在向 ${testForm.value.mail} 发送测试邮件...`);\r\n      setTimeout(() => {\r\n        ElMessage.success(`测试邮件已发送（模拟）`);\r\n      }, 1000);\r\n      testDialogVisible.value = false;\r\n       // --- 模拟结束 ---\r\n      // Actual API call:\r\n      // emailTemplateApi.sendTest(payload).then(...);\r\n    }\r\n  });\r\n};\r\n\r\n// --- 生命周期钩子 ---\r\nonMounted(() => {\r\n  getList();\r\n  getAccountOptions(); // Load account options initially as well\r\n});\r\n\r\n</script>\r\n\r\n<style scoped>\r\n/* Reusing styles from EmailAccount.vue */\r\n.app-container {\r\n  padding: 20px;\r\n}\r\n.flex {\r\n  display: flex;\r\n}\r\n.justify-between {\r\n  justify-content: space-between;\r\n}\r\n.justify-end {\r\n  justify-content: flex-end;\r\n}\r\n.mb-4 {\r\n  margin-bottom: 16px;\r\n}\r\n.mt-4 {\r\n  margin-top: 16px;\r\n}\r\n.el-table .cell .el-button {\r\n  margin-left: 5px;\r\n}\r\n.el-table .cell .el-button + .el-button {\r\n  margin-left: 5px;\r\n}\r\n</style> ","import script from \"./EmailTemplate.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./EmailTemplate.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./EmailTemplate.vue?vue&type=style&index=0&id=671014d1&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-671014d1\"]])\n\nexport default __exports__"],"names":["loading","ref","templateList","total","dialogVisible","dialogTitle","formRef","testDialogVisible","testFormRef","currentTemplate","accountOptions","queryParams","reactive","pageNo","pageSize","form","id","undefined","code","name","accountId","subject","content","status","remark","rules","required","message","trigger","testForm","mail","templateId","params","testRules","type","validator","rule","value","callback","JSON","parse","e","Error","getAccountOptions","label","getList","console","log","setTimeout","mockData","accountMail","createTime","Date","now","start","end","slice","length","resetForm","resetFields","handleAdd","handleUpdate","row","cancel","submitForm","validate","async","valid","isUpdate","ElMessage","success","handleDelete","ElMessageBox","confirm","then","catch","openTestSendDialog","handleTestSend","paramsObject","payload","templateParams","info","onMounted","__exports__"],"sourceRoot":""}