{"version":3,"file":"js/7001.ee45132b.js","mappings":"u7BAgYA,MAAMA,GAASC,EAAAA,EAAAA,MAGTC,GAAcC,EAAAA,EAAAA,IAAI,OAClBC,GAAcD,EAAAA,EAAAA,IAAI,IAClBE,GAAwBF,EAAAA,EAAAA,KAAI,GAC5BG,GAA0BH,EAAAA,EAAAA,KAAI,GAC9BI,GAAqBJ,EAAAA,EAAAA,KAAI,GACzBK,GAAeL,EAAAA,EAAAA,IAAI,GACnBM,GAAeN,EAAAA,EAAAA,IAAI,GACnBO,GAAWP,EAAAA,EAAAA,IAAI,CACnBQ,KAAM,GACNC,QAAS,KAILC,GAAqBV,EAAAA,EAAAA,KAAI,GACzBW,GAAgBX,EAAAA,EAAAA,IAAI,IACpBY,GAAcZ,EAAAA,EAAAA,IAAI,OAGlBa,GAAoBb,EAAAA,EAAAA,KAAI,GACxBc,GAAgBd,EAAAA,EAAAA,IAAI,CACxBe,OAAQ,GACRC,OAAQ,GACRC,OAAQ,KAEJC,GAAalB,EAAAA,EAAAA,IAAI,IAGjBmB,GAAmBnB,EAAAA,EAAAA,KAAI,GACvBoB,GAAepB,EAAAA,EAAAA,IAAI,CACvB,CAAEqB,MAAO,GAAIC,UAAW,SAIpBC,GAAwBvB,EAAAA,EAAAA,KAAI,GAC5BwB,IAAqBxB,EAAAA,EAAAA,IAAI,IACzByB,IAAqBzB,EAAAA,EAAAA,KAAI,GAGzB0B,IAAQ1B,EAAAA,EAAAA,IAAI,CAChB,CAAE2B,GAAI,EAAGnB,KAAM,MACf,CAAEmB,GAAI,EAAGnB,KAAM,MACf,CAAEmB,GAAI,EAAGnB,KAAM,QACf,CAAEmB,GAAI,EAAGnB,KAAM,WAIXoB,IAAU5B,EAAAA,EAAAA,KAAI,GAGd6B,IAAc7B,EAAAA,EAAAA,IAAI,IAClB8B,IAAUC,EAAAA,EAAAA,IAAS,CACvBC,OAAQ,GACRC,KAAM,UACNC,SAAU,GACVC,SAAU,KACVC,eAAgB,KAIZC,IAAgBrC,EAAAA,EAAAA,IAAI,CACvB,CACC2B,GAAI,iBACJW,QAAS,WACTL,KAAM,UACND,OAAQ,UACRE,SAAU,SACVK,QAAS,kBACTC,QAAS,KACTL,SAAU,QACVM,UAAW,IAAIC,KAAKA,KAAKC,MAAQ,MACjCC,UAAW,IAAIF,KAAKA,KAAKC,MAAQ,MACjCE,YAAa,KACbC,MAAO,IAAIJ,KAAKA,KAAKC,MAAQ,OAC7BI,SAAU,UACVC,YAAa,GAEf,CACErB,GAAI,iBACJW,QAAS,SACTL,KAAM,UACND,OAAQ,aACRE,SAAU,SACVK,QAAS,GACTC,QAAS,KACTL,SAAU,QACVM,UAAW,IAAIC,KAAKA,KAAKC,MAAQ,QACjCC,UAAW,IAAIF,KAAKA,KAAKC,MAAQ,OACjCE,YAAa,KACbC,MAAO,IAAIJ,KAAKA,KAAKC,MAAQ,QAC7BI,SAAU,UACVC,YAAa,KAKXC,IAAalB,EAAAA,EAAAA,IAAS,CAC1BmB,QAAS,EACTC,SAAU,GACVC,MAAO,IAIHC,IAAerD,EAAAA,EAAAA,IAAI,IAGnBsD,IAAetD,EAAAA,EAAAA,IAAI,CACvB,CAAEuD,KAAM,KAAMC,MAAO,MAAOC,MAAO,IAAKC,SAAS,GACjD,CAAEH,KAAM,UAAWC,MAAO,KAAMG,SAAU,IAAKD,SAAS,GACxD,CAAEH,KAAM,OAAQC,MAAO,KAAMC,MAAO,IAAKC,SAAS,GAClD,CAAEH,KAAM,SAAUC,MAAO,KAAMC,MAAO,IAAKC,SAAS,GACpD,CAAEH,KAAM,WAAYC,MAAO,MAAOC,MAAO,GAAIC,SAAS,GACtD,CAAEH,KAAM,UAAWC,MAAO,OAAQC,MAAO,IAAKC,SAAS,GACvD,CAAEH,KAAM,UAAWC,MAAO,MAAOC,MAAO,IAAKC,SAAS,GACtD,CAAEH,KAAM,WAAYC,MAAO,QAASC,MAAO,IAAKC,SAAS,GACzD,CAAEH,KAAM,YAAaC,MAAO,OAAQC,MAAO,IAAKC,SAAS,GACzD,CAAEH,KAAM,YAAaC,MAAO,OAAQC,MAAO,IAAKC,SAAS,GACzD,CAAEH,KAAM,cAAeC,MAAO,OAAQC,MAAO,IAAKC,SAAS,GAC3D,CAAEH,KAAM,QAASC,MAAO,SAAUC,MAAO,IAAKC,SAAS,GACvD,CAAEH,KAAM,WAAYC,MAAO,KAAMC,MAAO,IAAKC,SAAS,GACtD,CAAEH,KAAM,cAAeC,MAAO,KAAMC,MAAO,GAAIC,SAAS,KAIpDE,IAAkB5D,EAAAA,EAAAA,IAAI,CAC1B,CAAEuD,KAAM,SAAUC,MAAO,MACzB,CAAED,KAAM,WAAYC,MAAO,OAC3B,CAAED,KAAM,UAAWC,MAAO,OAC1B,CAAED,KAAM,WAAYC,MAAO,OAC3B,CAAED,KAAM,OAAQC,MAAO,QAInBK,IAAiB7D,EAAAA,EAAAA,IAAI,CACzB,CAAEuD,KAAM,YAAaC,MAAO,QAC5B,CAAED,KAAM,YAAaC,MAAO,QAC5B,CAAED,KAAM,WAAYC,MAAO,OAC3B,CAAED,KAAM,SAAUC,MAAO,QAIrBM,GAAuBzC,IAC3B,MAAM0C,EAAcH,GAAgBI,MAAMC,MAAKC,GAAKA,EAAEX,OAASlC,IAC/D,OAAO0C,EAAcA,EAAYP,MAAQnC,CAAK,EAI1C8C,GAAkBC,IACtB,IAAKA,EAAM,MAAO,IAClB,MAAMC,EAAI,IAAI3B,KAAK0B,GACnB,MAAO,GAAGC,EAAEC,iBAAiBC,OAAOF,EAAEG,WAAa,GAAGC,SAAS,EAAG,QAAQF,OAAOF,EAAEK,WAAWD,SAAS,EAAG,QAAQF,OAAOF,EAAEM,YAAYF,SAAS,EAAG,QAAQF,OAAOF,EAAEO,cAAcH,SAAS,EAAG,MAAM,EAGhMI,GAAiB7C,IACrB,MAAM8C,EAAY,CAChB,QAAW,MACX,WAAc,MACd,qBAAwB,MACxB,SAAY,MACZ,OAAU,OAEZ,OAAOA,EAAU9C,IAAWA,CAAM,EAG9B+C,GAAiB/C,IACrB,MAAMgD,EAAU,CACd,QAAW,UACX,WAAc,UACd,qBAAwB,OACxB,SAAY,UACZ,OAAU,QAEZ,OAAOA,EAAQhD,IAAW,MAAM,EAG5BiD,GAAehD,IACnB,MAAM+C,EAAU,CACd,UAAa,SACb,QAAW,OACX,QAAW,SACX,YAAe,SACf,MAAS,QAEX,OAAOA,EAAQ/C,IAASA,CAAI,EAGxBiD,GAAmBhD,IACvB,MAAMiD,EAAc,CAClB,OAAU,KACV,KAAQ,IACR,OAAU,IACV,IAAO,KAET,OAAOA,EAAYjD,IAAaA,CAAQ,EAGpCkD,GAAmBlD,IACvB,MAAM8C,EAAU,CACd,OAAU,SACV,KAAQ,UACR,OAAU,OACV,IAAO,WAET,OAAOA,EAAQ9C,IAAa,MAAM,EAI9BmD,GAAcC,GACX,CAAC,UAAW,cAAcC,SAASD,EAAUtD,QAIhDwD,GAAeA,KACnBvC,GAAWC,QAAU,EACrBuC,IAAiB,EAGbC,GAAeA,KAEnB5D,GAAQE,OAAS,GACjBF,GAAQI,SAAW,GACnBJ,GAAQK,SAAW,KACnBL,GAAQM,eAAiB,GACzBP,GAAYmC,MAAQ,GACpBwB,IAAc,EAGVG,GAAyBC,IAC7BvC,GAAaW,MAAQ4B,CAAS,EAG1BC,GAAiBA,KAGrBxC,GAAaW,MAAQ,EAAE,EAInB8B,GAAoBC,IACxB9C,GAAWE,SAAW4C,EACtBN,IAAiB,EAGbO,GAAuBC,IAC3BhD,GAAWC,QAAU+C,EACrBR,IAAiB,EAIbS,GAAkBA,KAEtBrG,EAAOsG,KAAK,6BAA6B,EAGrCC,GAAiBzE,IACrB9B,EAAOsG,KAAK,8BAA8BxE,IAAK,EAG3C0E,GAAa9D,IAEjB1C,EAAOsG,KAAK,iBAAiB5D,IAAU,EAGnC+D,GAAoBhB,IACxBiB,EAAAA,EAAaC,QAAQ,aAAalB,EAAUhD,YAAa,OAAQ,CAC/DmE,kBAAmB,KACnBC,iBAAkB,KAClBzE,KAAM,SACL0E,MAAK,KAEN,MAAMC,EAAQvE,GAAc2B,MAAM6C,WAAUC,GAAQA,EAAKnF,KAAO2D,EAAU3D,MAC3D,IAAXiF,IACFvE,GAAc2B,MAAM4C,GAAO5E,OAAS,aACpCK,GAAc2B,MAAM4C,GAAOhE,UAAY,IAAIF,MAE7CqE,EAAAA,GAAUC,QAAQ,gBAElBnH,EAAOsG,KAAK,uBAAuBb,EAAU3D,aAAa,IACzDsF,OAAM,QAAS,EAGdC,GAAeA,KACnB,GAAkC,IAA9B7D,GAAaW,MAAMmD,OAErB,YADAJ,EAAAA,GAAUK,QAAQ,UAIpB,MAAMC,EAAgBhE,GAAaW,MAChCsD,QAAOC,GAAOlC,GAAWkC,KACzBC,KAAID,GAAOA,EAAI5F,KAEW,IAAzB0F,EAAcF,OAKlBZ,EAAAA,EAAaC,QAAQ,UAAUa,EAAcF,cAAe,OAAQ,CAClEV,kBAAmB,KACnBC,iBAAkB,KAClBzE,KAAM,SACL0E,MAAK,KAENU,EAAcI,SAAQ9F,IACpB,MAAMiF,EAAQvE,GAAc2B,MAAM6C,WAAUC,GAAQA,EAAKnF,KAAOA,KACjD,IAAXiF,IACFvE,GAAc2B,MAAM4C,GAAO5E,OAAS,aACpCK,GAAc2B,MAAM4C,GAAOhE,UAAY,IAAIF,KAC7C,IAEFqE,EAAAA,GAAUC,QAAQ,SAASK,EAAcF,cACzCtB,KAEAJ,IAAiB,IAChBwB,OAAM,SArBPF,EAAAA,GAAUK,QAAQ,gBAqBF,EAId3B,GAAkBiC,UACtB9F,GAAQoC,OAAQ,EAChB,IAEE,MAAM2D,EAAS,CACb1B,KAAMhD,GAAWC,QACjBC,SAAUF,GAAWE,SACrByE,OAAQ/F,GAAYmC,MACpB/B,KAAMH,GAAQG,KACdD,OAAQF,GAAQE,OAChBE,SAAUJ,GAAQI,SAClB2F,WAAY/F,GAAQK,SACpB2F,eAAgBhG,GAAQM,eAAiBN,GAAQM,eAAe,GAAK,KACrE2F,aAAcjG,GAAQM,eAAiBN,GAAQM,eAAe,GAAK,MAErE4F,QAAQC,IAAI,4CAA6CN,GAMzDO,YAAW,KAET,IAAIC,EAAe,IAAI9F,GAAc2B,OAGpC,GAAI2D,EAAOC,OAAQ,CACf,MAAMQ,EAAcT,EAAOC,OAAOS,cAClCF,EAAeA,EAAab,QAAOgB,GAC/BA,EAAG3G,GAAG0G,cAAc9C,SAAS6C,IAC7BE,EAAGhG,QAAQ+F,cAAc9C,SAAS6C,IACjCE,EAAG/F,SAAW+F,EAAG/F,QAAQ8F,cAAc9C,SAAS6C,IAEzD,CAQA,GAPIT,EAAO3F,SACPmG,EAAeA,EAAab,QAAOgB,GAAMA,EAAGtG,SAAW2F,EAAO3F,UAE7D2F,EAAOzF,WACPiG,EAAeA,EAAab,QAAOgB,GAAMA,EAAGpG,WAAayF,EAAOzF,YAGjEyF,EAAOE,WAAY,CACnB,MAAMU,EAAe7G,GAAMsC,MAAMC,MAAKuE,GAAKA,EAAE7G,KAAOgG,EAAOE,cAAarH,KACpE+H,IACCJ,EAAeA,EAAab,QAAOgB,GAAMA,EAAGnG,WAAaoG,IAElE,CAMC,MAAME,GAASd,EAAO1B,KAAO,GAAK0B,EAAOxE,SACnCuF,EAAMD,EAAQd,EAAOxE,SACrBwF,EAAgBR,EAAaS,MAAMH,EAAOC,GAEhDrG,GAAc2B,MAAQ2E,EACtB1F,GAAWG,MAAQ+E,EAAahB,OAChCvF,GAAQoC,OAAQ,CAAK,GACtB,IACL,CAAE,MAAO6E,GACPb,QAAQa,MAAM,uCAAwCA,GACtD9B,EAAAA,GAAU8B,MAAM,cAChBjH,GAAQoC,OAAQ,CAClB,IAIF8E,EAAAA,EAAAA,KAAU,KAGRrD,IAAiB,IAcnB,MAAMsD,GAAiBA,KACrB7I,EAAsB8D,OAAQ,CAAI,EAG9BgF,GAAWA,KACf,IAAKzI,EAASyD,MAAMxD,KAElB,YADAuG,EAAAA,GAAUK,QAAQ,WAIpB,MAAM6B,EAAU,CACdtH,GAAIe,KAAKC,MAAMuG,WACf1I,KAAMD,EAASyD,MAAMxD,KACrBC,QAASF,EAASyD,MAAMvD,QACxBqB,QAASnB,EAAcqD,MACvBlD,cAAeA,EAAckD,MAC7B5C,aAAcA,EAAa4C,OAG7B/D,EAAY+D,MAAMmC,KAAK8C,GACvB/I,EAAsB8D,OAAQ,EAC9B+C,EAAAA,GAAUC,QAAQ,SAAS,EAGvBmC,GAAmBA,KAClBpJ,EAAYiE,QACjB7D,EAAwB6D,OAAQ,EAAI,EAGhCoF,GAAmBA,KAClBrJ,EAAYiE,OAEjBuC,EAAAA,EAAaC,QAAQ,WAAY,KAAM,CACrCvE,KAAM,YACL0E,MAAK,KACN,MAAMC,EAAQ3G,EAAY+D,MAAM6C,WAAUwC,GAAKA,EAAE1H,KAAO5B,EAAYiE,SACrD,IAAX4C,IACF3G,EAAY+D,MAAMsF,OAAO1C,EAAO,GAChC7G,EAAYiE,MAAQ,MACpB+C,EAAAA,GAAUC,QAAQ,UACpB,GACA,EAIEuC,GAAkBA,KACtB7I,EAAmBsD,OAAQ,CAAI,EAG3BwF,GAAeA,EAAG1H,UAAS2H,YAC/B9I,EAAcqD,MAAQlC,EACtBlB,EAAYoD,MAAQyF,EACpBhE,IAAiB,EAGbiE,GAAgBA,KACpBhJ,EAAmBsD,OAAQ,CAAK,EAI5B2F,GAAiBA,KACrB9I,EAAkBmD,OAAQ,CAAI,EAG1B4F,GAAqBA,KACzB,MAAM,OAAE7I,EAAM,OAAEC,EAAM,OAAEC,GAAWH,EAAckD,MAC3C6F,EAAc,CAAC9I,EAAQC,EAAQC,GAAQqG,OAAOwC,SACpD5I,EAAW8C,MAAQ6F,EAAY,IAAM,GACrCpE,KACA5E,EAAkBmD,OAAQ,CAAK,EAG3B+F,GAAqBA,KACzBjJ,EAAckD,MAAQ,CACpBjD,OAAQ,GACRC,OAAQ,GACRC,OAAQ,IAEVC,EAAW8C,MAAQ,GACnByB,IAAiB,EAIbuE,GAAgBA,KACpB7I,EAAiB6C,OAAQ,CAAI,EAGzBiG,GAAeA,KACnB7I,EAAa4C,MAAMmC,KAAK,CAAE9E,MAAO,GAAIC,UAAW,OAAQ,EAGpD4I,GAAmBtD,IACvBxF,EAAa4C,MAAMsF,OAAO1C,EAAO,EAAE,EAG/BuD,GAAoBA,KACxB1E,KACAtE,EAAiB6C,OAAQ,CAAK,EAG1BoG,GAAoBA,KACxBhJ,EAAa4C,MAAQ,CAAC,CAAE3C,MAAO,GAAIC,UAAW,QAC9CmE,IAAiB,EAIb4E,GAAqBA,KACzB9I,EAAsByC,OAAQ,CAAI,EAG9BsG,GAA0BC,IAC9B/I,GAAmBwC,MAAMyD,SAAQ+C,IAC/BA,EAAI9G,QAAU6G,CAAG,GACjB,EAGEE,GAAgBA,OAIhBC,GAAsBA,KAC1BpH,GAAaU,MAAQxC,GAAmBwC,MAAMwD,KAAIgD,IAAO,IACpDA,EACH9G,QAAS8G,EAAI9G,YAEfnC,EAAsByC,OAAQ,EAC9B+C,EAAAA,GAAUC,QAAQ,UAAU,EAGxB2D,GAAsBA,KAC1BC,KACAnJ,GAAmBuC,OAAQ,CAAI,EAI3B4G,GAAqBA,KACzBpJ,GAAmBwC,MAAQV,GAAaU,MAAMwD,KAAIgD,IAAO,IACpDA,EACH9G,SAAS,KACR,EAICmH,GAAqBC,IACzBA,EAAMC,iBACN3K,EAAmB4D,OAAQ,EAC3B3D,EAAa2D,MAAQ8G,EAAME,QAC3B1K,EAAa0D,MAAQ8G,EAAMG,OAAO,EAI9BC,GAAiBA,KACrB,IAAKnL,EAAYiE,MAAO,OAExB,MAAMmH,EAAOlL,EAAY+D,MAAMC,MAAKoF,GAAKA,EAAE1H,KAAO5B,EAAYiE,QAC9D,GAAImH,EAAM,CACR,MAAMlC,EAAU,CACdtH,GAAIe,KAAKC,MAAMuG,WACf1I,KAAM,GAAG2K,EAAK3K,YACdC,QAAS,IAAI0K,EAAK1K,SAClBqB,QAAS,IAAIqJ,EAAKrJ,SAClBhB,cAAe,IAAKqK,EAAKrK,eACzBM,aAAc,IAAI+J,EAAK/J,eAGzBnB,EAAY+D,MAAMmC,KAAK8C,GACvB7I,EAAmB4D,OAAQ,EAC3B+C,EAAAA,GAAUC,QAAQ,SACpB,G,m/cCt7BF,MAAMoE,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,G","sources":["webpack://vue-logistics-system/./src/views/WorkOrder/CommandWorkOrderList.vue","webpack://vue-logistics-system/./src/views/WorkOrder/CommandWorkOrderList.vue?31cd"],"sourcesContent":["<template>\r\n  <div class=\"work-order-list-container\">\r\n    <div class=\"page-header\">\r\n      <h2 class=\"page-title\">指令工单</h2>\r\n      <div class=\"page-actions\">\r\n        <el-button type=\"primary\" @click=\"createWorkOrder\">创建新工单</el-button>\r\n        <!-- 这里创建的工单类型应默认为 'command' -->\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 搜索和筛选区域 -->\r\n    <el-card shadow=\"never\" class=\"filter-card\">\r\n      <div class=\"search-bar\">\r\n        <el-input\r\n          v-model=\"searchQuery\"\r\n          placeholder=\"搜索指令工单 (工单号、主题、订单号...)\"\r\n          class=\"search-input\"\r\n          @keyup.enter=\"handleSearch\">\r\n          <template #append>\r\n            <el-button :icon=\"Search\" @click=\"handleSearch\"></el-button>\r\n          </template>\r\n        </el-input>\r\n      </div>\r\n\r\n      <div class=\"filter-section\">\r\n        <el-form :inline=\"true\" :model=\"filters\" size=\"small\">\r\n          <el-form-item label=\"状态\">\r\n            <el-select v-model=\"filters.status\" placeholder=\"按状态筛选\" clearable>\r\n              <el-option label=\"待处理\" value=\"pending\"></el-option>\r\n              <el-option label=\"处理中\" value=\"processing\"></el-option>\r\n              <el-option label=\"待确认\" value=\"pending_confirmation\"></el-option>\r\n              <el-option label=\"已解决\" value=\"resolved\"></el-option>\r\n              <el-option label=\"已关闭\" value=\"closed\"></el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <!-- 类型筛选已移除，固定为 'command' -->\r\n          <el-form-item label=\"优先级\">\r\n            <el-select v-model=\"filters.priority\" placeholder=\"按优先级筛选\" clearable>\r\n              <el-option label=\"紧急\" value=\"urgent\"></el-option>\r\n              <el-option label=\"高\" value=\"high\"></el-option>\r\n              <el-option label=\"中\" value=\"medium\"></el-option>\r\n              <el-option label=\"低\" value=\"low\"></el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <el-form-item label=\"处理人\">\r\n            <el-select v-model=\"filters.assignee\" placeholder=\"按处理人筛选\" clearable filterable>\r\n              <el-option v-for=\"user in users\" :key=\"user.id\" :label=\"user.name\" :value=\"user.id\"></el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <el-form-item label=\"创建时间\">\r\n            <el-date-picker\r\n              v-model=\"filters.createdAtRange\"\r\n              type=\"daterange\"\r\n              start-placeholder=\"开始日期\"\r\n              end-placeholder=\"结束日期\"\r\n              range-separator=\"至\"\r\n              value-format=\"YYYY-MM-DD\">\r\n            </el-date-picker>\r\n          </el-form-item>\r\n          <el-form-item>\r\n            <el-button type=\"primary\" @click=\"handleSearch\">查询</el-button>\r\n            <el-button @click=\"resetFilters\">重置</el-button>\r\n          </el-form-item>\r\n        </el-form>\r\n      </div>\r\n    </el-card>\r\n\r\n    <!-- 视图选择选项卡 -->\r\n    <div class=\"view-management\">\r\n      <el-radio-group v-model=\"currentView\" size=\"small\" class=\"status-view-group\">\r\n        <el-radio-button value=\"all\">全部</el-radio-button>\r\n        <el-radio-button value=\"pending\">待处理</el-radio-button>\r\n        <el-radio-button value=\"processing\">处理中</el-radio-button>\r\n        <el-radio-button value=\"pending_confirmation\">待确认</el-radio-button>\r\n        <el-radio-button value=\"resolved\">已解决</el-radio-button>\r\n        <el-radio-button value=\"closed\">已关闭</el-radio-button>\r\n        <!-- 动态添加自定义视图 -->\r\n        <el-radio-button \r\n          v-for=\"view in customViews\" \r\n          :key=\"view.id\" \r\n          :label=\"view.id\"\r\n          @contextmenu.prevent=\"handleContextMenu($event)\"\r\n        >\r\n          {{view.name}}\r\n        </el-radio-button>\r\n      </el-radio-group>\r\n      \r\n      <el-button type=\"text\" size=\"small\" @click=\"handleSaveView\">新增视图</el-button>\r\n      <el-button type=\"text\" size=\"small\" @click=\"showGroupModal\">高级分组</el-button>\r\n      <el-button type=\"text\" size=\"small\" @click=\"showSortModal\">高级排序</el-button>\r\n      <el-button type=\"text\" size=\"small\" @click=\"showFilterPanel\">筛选</el-button>\r\n      <el-button type=\"text\" size=\"small\" @click=\"showColumnSettings\">字段配置</el-button>\r\n    </div>\r\n\r\n    <!-- 工单列表 -->\r\n    <el-card shadow=\"never\" class=\"list-card\">\r\n      <div class=\"table-operations\" v-if=\"selectedRows.length > 0\">\r\n        <span class=\"selected-count\">已选择 {{ selectedRows.length }} 项</span>\r\n        <el-button size=\"small\" @click=\"batchProcess\">批量处理</el-button>\r\n        <el-button size=\"small\" @click=\"clearSelection\">清除选择</el-button>\r\n      </div>\r\n\r\n      <groupable-table\r\n        ref=\"mainTable\"\r\n        :data=\"workOrderList\"\r\n        row-key=\"id\"\r\n        :group-fields=\"groupField ? [groupField] : []\"\r\n        :show-selection=\"true\"\r\n        :show-group-column=\"!!groupField\"\r\n        :group-column-label=\"groupField ? getGroupColumnLabel(groupField) : '分组'\"\r\n        :default-expand-all=\"false\"\r\n        :show-pagination=\"true\"\r\n        :current-page=\"pagination.current\"\r\n        :page-size=\"pagination.pageSize\"\r\n        :page-sizes=\"[10, 20, 50, 100]\"\r\n        :total=\"pagination.total\"\r\n        v-loading=\"loading\"\r\n        @selection-change=\"handleSelectionChange\"\r\n        @size-change=\"handleSizeChange\"\r\n        @current-change=\"handleCurrentChange\"\r\n        @cell-click=\"handleCellClick\"\r\n        @cell-dblclick=\"handleCellDbClick\"\r\n        style=\"width: 100%\"\r\n      >\r\n        <!-- 原有的表格列保持不变 -->\r\n        <el-table-column type=\"selection\" width=\"55\"></el-table-column>\r\n        <el-table-column label=\"工单号\" prop=\"id\" width=\"150\">\r\n          <template #default=\"scope\">\r\n            <el-link type=\"primary\" @click=\"viewWorkOrder(scope.row.id)\">{{ scope.row.id }}</el-link>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"主题\" prop=\"subject\" min-width=\"200\">\r\n          <template #default=\"scope\">\r\n            <div class=\"subject-cell\">\r\n              <span class=\"subject-text\">{{ scope.row.subject }}</span>\r\n              <el-tag v-if=\"scope.row.priority === 'urgent'\" type=\"danger\" size=\"small\" effect=\"dark\">紧急</el-tag>\r\n            </div>\r\n          </template>\r\n        </el-table-column>\r\n        <!-- 类型列可以保留，但值固定为 '指令工单' -->\r\n         <el-table-column label=\"类型\" prop=\"type\" width=\"120\">\r\n           <template #default=\"scope\">\r\n             {{ getTypeText(scope.row.type) }} <!-- 确保 getTypeText 正确处理 'command' -->\r\n           </template>\r\n         </el-table-column>\r\n        <el-table-column label=\"状态\" prop=\"status\" width=\"100\">\r\n          <template #default=\"scope\">\r\n            <el-tag :type=\"getStatusType(scope.row.status)\" size=\"small\">\r\n              {{ getStatusText(scope.row.status) }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"优先级\" prop=\"priority\" width=\"80\">\r\n          <template #default=\"scope\">\r\n            <el-tag :type=\"getPriorityType(scope.row.priority)\" size=\"small\">\r\n              {{ getPriorityText(scope.row.priority) }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"关联订单\" prop=\"orderNo\" width=\"150\">\r\n           <template #default=\"scope\">\r\n             <el-link v-if=\"scope.row.orderNo\" type=\"info\" @click=\"viewOrder(scope.row.orderNo)\">\r\n               {{ scope.row.orderNo }}\r\n             </el-link>\r\n             <span v-else>-</span>\r\n           </template>\r\n         </el-table-column>\r\n        <el-table-column label=\"创建人\" prop=\"creator\" width=\"100\"></el-table-column>\r\n        <el-table-column label=\"当前处理人\" prop=\"assignee\" width=\"100\">\r\n           <template #default=\"scope\">\r\n             {{ scope.row.assignee || '未指派' }}\r\n           </template>\r\n         </el-table-column>\r\n        <el-table-column label=\"创建时间\" prop=\"createdAt\" width=\"180\">\r\n           <template #default=\"scope\">\r\n             {{ formatDateTime(scope.row.createdAt) }}\r\n           </template>\r\n         </el-table-column>\r\n        <el-table-column label=\"更新时间\" prop=\"updatedAt\" width=\"180\">\r\n           <template #default=\"scope\">\r\n             {{ formatDateTime(scope.row.updatedAt) }}\r\n           </template>\r\n         </el-table-column>\r\n        <el-table-column label=\"完成时间\" prop=\"completedAt\" width=\"180\">\r\n          <template #default=\"scope\">\r\n            {{ scope.row.completedAt ? formatDateTime(scope.row.completedAt) : '-' }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"最晚完成时间\" prop=\"dueAt\" width=\"180\">\r\n          <template #default=\"scope\">\r\n            {{ formatDateTime(scope.row.dueAt) }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"库位\" prop=\"location\" width=\"120\"></el-table-column>\r\n        <el-table-column label=\"板数\" prop=\"palletCount\" width=\"80\"></el-table-column>\r\n        <el-table-column label=\"操作\" width=\"150\" fixed=\"right\">\r\n           <template #default=\"scope\">\r\n             <el-button link type=\"primary\" @click=\"viewWorkOrder(scope.row.id)\">查看</el-button>\r\n             <el-button link type=\"primary\" v-if=\"canProcess(scope.row)\" @click=\"processWorkOrder(scope.row)\">处理</el-button>\r\n           </template>\r\n         </el-table-column>\r\n      </groupable-table>\r\n    </el-card>\r\n\r\n    <!-- 筛选面板 -->\r\n    <filter-panel\r\n      v-model:visible=\"filterPanelVisible\"\r\n      :columns=\"tableColumns\"\r\n      :existing-filters=\"activeFilters\"\r\n      :existing-logic=\"filterLogic\"\r\n      @apply-filters=\"applyFilters\"\r\n      @cancel=\"cancelFilters\"\r\n    />\r\n\r\n    <!-- 保存视图对话框 -->\r\n    <el-dialog\r\n      title=\"保存视图\"\r\n      v-model=\"saveViewDialogVisible\"\r\n      width=\"500px\"\r\n    >\r\n      <el-form :model=\"viewForm\" label-width=\"100px\">\r\n        <el-form-item label=\"视图名称\" required>\r\n          <el-input v-model=\"viewForm.name\" placeholder=\"请输入视图名称\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"显示字段\">\r\n          <el-checkbox-group v-model=\"viewForm.columns\">\r\n            <el-checkbox \r\n              v-for=\"col in tableColumns\" \r\n              :key=\"col.prop\" \r\n              :label=\"col.prop\"\r\n            >\r\n              {{col.label}}\r\n            </el-checkbox>\r\n          </el-checkbox-group>\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <el-button @click=\"saveViewDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"saveView\">确定</el-button>\r\n      </template>\r\n    </el-dialog>\r\n\r\n    <!-- 分组设置弹窗 -->\r\n    <el-dialog\r\n      title=\"分组设置\"\r\n      v-model=\"groupModalVisible\"\r\n      width=\"500px\"\r\n    >\r\n      <div class=\"group-settings\">\r\n        <div class=\"group-level\">\r\n          <span class=\"group-level-label\">一级分组：</span>\r\n          <el-select v-model=\"groupSettings.level1\" placeholder=\"选择字段\" style=\"width: 280px;\" clearable>\r\n            <el-option v-for=\"field in groupableFields\" :key=\"field.prop\" :label=\"field.label\" :value=\"field.prop\"></el-option>\r\n          </el-select>\r\n        </div>\r\n        <div class=\"group-level\">\r\n          <span class=\"group-level-label\">二级分组：</span>\r\n          <el-select v-model=\"groupSettings.level2\" placeholder=\"选择字段\" style=\"width: 280px;\" clearable>\r\n            <el-option v-for=\"field in groupableFields\" :key=\"field.prop\" :label=\"field.label\" :value=\"field.prop\"></el-option>\r\n          </el-select>\r\n        </div>\r\n        <div class=\"group-level\">\r\n          <span class=\"group-level-label\">三级分组：</span>\r\n          <el-select v-model=\"groupSettings.level3\" placeholder=\"选择字段\" style=\"width: 280px;\" clearable>\r\n            <el-option v-for=\"field in groupableFields\" :key=\"field.prop\" :label=\"field.label\" :value=\"field.prop\"></el-option>\r\n          </el-select>\r\n        </div>\r\n      </div>\r\n      <template #footer>\r\n        <span class=\"dialog-footer\">\r\n          <el-button @click=\"groupModalVisible = false\">取消</el-button>\r\n          <el-button type=\"danger\" @click=\"clearGroupSettings\">清除分组</el-button>\r\n          <el-button type=\"primary\" @click=\"applyGroupSettings\">应用</el-button>\r\n        </span>\r\n      </template>\r\n    </el-dialog>\r\n\r\n    <!-- 排序设置弹窗 -->\r\n    <el-dialog\r\n      title=\"排序设置\"\r\n      v-model=\"sortModalVisible\"\r\n      width=\"500px\"\r\n    >\r\n      <div class=\"sort-settings\">\r\n        <div v-for=\"(sort, index) in sortSettings\" :key=\"index\" class=\"sort-item\">\r\n          <el-select v-model=\"sort.field\" placeholder=\"选择字段\" style=\"width: 200px;\" clearable>\r\n            <el-option \r\n              v-for=\"field in sortableFields\" \r\n              :key=\"field.prop\" \r\n              :label=\"field.label\" \r\n              :value=\"field.prop\"\r\n            ></el-option>\r\n          </el-select>\r\n          <el-select v-model=\"sort.direction\" placeholder=\"排序方向\" style=\"width: 120px;\">\r\n            <el-option label=\"升序\" value=\"asc\"></el-option>\r\n            <el-option label=\"降序\" value=\"desc\"></el-option>\r\n          </el-select>\r\n          <el-button \r\n            type=\"danger\" \r\n            size=\"small\"\r\n            @click=\"removeSortField(index)\"\r\n          >删除</el-button>\r\n        </div>\r\n        <div class=\"sort-actions\">\r\n          <el-button type=\"primary\" plain @click=\"addSortField\">添加排序字段</el-button>\r\n        </div>\r\n      </div>\r\n      <template #footer>\r\n        <span class=\"dialog-footer\">\r\n          <el-button @click=\"sortModalVisible = false\">取消</el-button>\r\n          <el-button type=\"danger\" @click=\"clearSortSettings\">清除排序</el-button>\r\n          <el-button type=\"primary\" @click=\"applySortSettings\">应用</el-button>\r\n        </span>\r\n      </template>\r\n    </el-dialog>\r\n\r\n    <!-- 字段配置对话框 -->\r\n    <el-dialog\r\n      title=\"字段配置\"\r\n      v-model=\"columnSettingsVisible\"\r\n      width=\"600px\"\r\n    >\r\n      <div class=\"column-settings\">\r\n        <div class=\"column-settings-header\">\r\n          <el-checkbox\r\n            v-model=\"allColumnsSelected\"\r\n            @change=\"handleSelectAllColumns\"\r\n          >全选</el-checkbox>\r\n          <el-button type=\"primary\" size=\"small\" @click=\"resetColumnSettings\">重置</el-button>\r\n        </div>\r\n        <div class=\"column-list\">\r\n          <draggable\r\n            v-model=\"columnSettingsList\"\r\n            item-key=\"prop\"\r\n            handle=\".drag-handle\"\r\n            @end=\"handleDragEnd\"\r\n          >\r\n            <template #item=\"{ element }\">\r\n              <div class=\"column-item\">\r\n                <el-icon class=\"drag-handle\"><d-arrow-left /></el-icon>\r\n                <el-checkbox v-model=\"element.visible\">{{ element.label }}</el-checkbox>\r\n              </div>\r\n            </template>\r\n          </draggable>\r\n        </div>\r\n      </div>\r\n      <template #footer>\r\n        <span class=\"dialog-footer\">\r\n          <el-button @click=\"columnSettingsVisible = false\">取消</el-button>\r\n          <el-button type=\"primary\" @click=\"applyColumnSettings\">确定</el-button>\r\n        </span>\r\n      </template>\r\n    </el-dialog>\r\n\r\n    <!-- 右键菜单 -->\r\n    <div \r\n      v-show=\"contextMenuVisible\" \r\n      class=\"context-menu\" \r\n      :style=\"{left: contextMenuX + 'px', top: contextMenuY + 'px'}\"\r\n    >\r\n      <div class=\"context-menu-item\" @click=\"handleCopyView\">\r\n        <span>复制视图</span>\r\n      </div>\r\n      <div class=\"context-menu-item\" @click=\"handleRenameView\">\r\n        <span>重命名</span>\r\n      </div>\r\n      <div class=\"context-menu-item\" @click=\"handleDeleteView\">\r\n        <span>删除</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, onMounted } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { Search } from '@element-plus/icons-vue';\r\nimport { ElMessage, ElMessageBox } from 'element-plus';\r\nimport FilterPanel from '@/components/logistics/FilterPanel.vue';\r\nimport GroupableTable from '@/components/logistics/GroupableTable.vue';\r\nimport { DArrowLeft } from '@element-plus/icons-vue';\r\nimport draggable from 'vuedraggable';\r\n\r\n// 路由相关\r\nconst router = useRouter();\r\n\r\n// 视图管理相关\r\nconst currentView = ref('all');\r\nconst customViews = ref([]);\r\nconst saveViewDialogVisible = ref(false);\r\nconst renameViewDialogVisible = ref(false);\r\nconst contextMenuVisible = ref(false);\r\nconst contextMenuX = ref(0);\r\nconst contextMenuY = ref(0);\r\nconst viewForm = ref({\r\n  name: '',\r\n  columns: []\r\n});\r\n\r\n// 筛选相关\r\nconst filterPanelVisible = ref(false);\r\nconst activeFilters = ref([]);\r\nconst filterLogic = ref('and');\r\n\r\n// 分组相关\r\nconst groupModalVisible = ref(false);\r\nconst groupSettings = ref({\r\n  level1: '',\r\n  level2: '',\r\n  level3: ''\r\n});\r\nconst groupField = ref('');\r\n\r\n// 排序相关\r\nconst sortModalVisible = ref(false);\r\nconst sortSettings = ref([\r\n  { field: '', direction: 'asc' }\r\n]);\r\n\r\n// 字段配置相关\r\nconst columnSettingsVisible = ref(false);\r\nconst columnSettingsList = ref([]);\r\nconst allColumnsSelected = ref(true);\r\n\r\n// 获取用户\r\nconst users = ref([\r\n  { id: 1, name: '张三' },\r\n  { id: 2, name: '李四' },\r\n  { id: 3, name: '客服团队' },\r\n  { id: 4, name: '仓库管理员'} // 添加示例用户\r\n]);\r\n\r\n// 列表加载状态\r\nconst loading = ref(false);\r\n\r\n// 搜索和筛选\r\nconst searchQuery = ref('');\r\nconst filters = reactive({\r\n  status: '',\r\n  type: 'command', // 固定类型\r\n  priority: '',\r\n  assignee: null,\r\n  createdAtRange: [],\r\n});\r\n\r\n// 列表数据 (仅包含指令工单示例)\r\nconst workOrderList = ref([\r\n   {\r\n    id: 'WO202307250004',\r\n    subject: '紧急订单加急处理',\r\n    type: 'command', // 指令工单\r\n    status: 'pending',\r\n    priority: 'urgent',\r\n    orderNo: 'ORD202307250125',\r\n    creator: '张三',\r\n    assignee: '仓库管理员',\r\n    createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000),\r\n    updatedAt: new Date(Date.now() - 2 * 60 * 60 * 1000),\r\n    completedAt: null,\r\n    dueAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24小时后\r\n    location: 'A-01-02',\r\n    palletCount: 2\r\n  },\r\n  {\r\n    id: 'WO202307250006',\r\n    subject: '仓库盘点指令',\r\n    type: 'command', // 指令工单\r\n    status: 'processing',\r\n    priority: 'medium',\r\n    orderNo: '', // 无关联订单\r\n    creator: '李四',\r\n    assignee: '仓库管理员',\r\n    createdAt: new Date(Date.now() - 36 * 60 * 60 * 1000),\r\n    updatedAt: new Date(Date.now() - 12 * 60 * 60 * 1000),\r\n    completedAt: null,\r\n    dueAt: new Date(Date.now() + 48 * 60 * 60 * 1000), // 48小时后\r\n    location: 'B-03-01',\r\n    palletCount: 5\r\n  },\r\n]);\r\n\r\n// 分页\r\nconst pagination = reactive({\r\n  current: 1,\r\n  pageSize: 10,\r\n  total: 0,\r\n});\r\n\r\n// 表格选择\r\nconst selectedRows = ref([]);\r\n\r\n// 表格列配置\r\nconst tableColumns = ref([\r\n  { prop: 'id', label: '工单号', width: 150, visible: true },\r\n  { prop: 'subject', label: '主题', minWidth: 200, visible: true },\r\n  { prop: 'type', label: '类型', width: 120, visible: true },\r\n  { prop: 'status', label: '状态', width: 100, visible: true },\r\n  { prop: 'priority', label: '优先级', width: 80, visible: true },\r\n  { prop: 'orderNo', label: '关联订单', width: 150, visible: true },\r\n  { prop: 'creator', label: '创建人', width: 100, visible: true },\r\n  { prop: 'assignee', label: '当前处理人', width: 100, visible: true },\r\n  { prop: 'createdAt', label: '创建时间', width: 180, visible: true },\r\n  { prop: 'updatedAt', label: '更新时间', width: 180, visible: true },\r\n  { prop: 'completedAt', label: '完成时间', width: 180, visible: true },\r\n  { prop: 'dueAt', label: '最晚完成时间', width: 180, visible: true },\r\n  { prop: 'location', label: '库位', width: 120, visible: true },\r\n  { prop: 'palletCount', label: '板数', width: 80, visible: true }\r\n]);\r\n\r\n// 可分组字段\r\nconst groupableFields = ref([\r\n  { prop: 'status', label: '状态' },\r\n  { prop: 'priority', label: '优先级' },\r\n  { prop: 'creator', label: '创建人' },\r\n  { prop: 'assignee', label: '处理人' },\r\n  { prop: 'type', label: '类型' }\r\n]);\r\n\r\n// 可排序字段\r\nconst sortableFields = ref([\r\n  { prop: 'createdAt', label: '创建时间' },\r\n  { prop: 'updatedAt', label: '更新时间' },\r\n  { prop: 'priority', label: '优先级' },\r\n  { prop: 'status', label: '状态' }\r\n]);\r\n\r\n// 获取分组列标签\r\nconst getGroupColumnLabel = (field) => {\r\n  const fieldConfig = groupableFields.value.find(f => f.prop === field);\r\n  return fieldConfig ? fieldConfig.label : field;\r\n};\r\n\r\n// --- 辅助函数 --- (与 WorkOrderList 相同)\r\nconst formatDateTime = (date) => {\r\n  if (!date) return '-';\r\n  const d = new Date(date);\r\n  return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')} ${String(d.getHours()).padStart(2, '0')}:${String(d.getMinutes()).padStart(2, '0')}`;\r\n};\r\n\r\nconst getStatusText = (status) => {\r\n  const statusMap = {\r\n    'pending': '待处理',\r\n    'processing': '处理中',\r\n    'pending_confirmation': '待确认',\r\n    'resolved': '已解决',\r\n    'closed': '已关闭'\r\n  };\r\n  return statusMap[status] || status;\r\n};\r\n\r\nconst getStatusType = (status) => {\r\n  const typeMap = {\r\n    'pending': 'warning',\r\n    'processing': 'primary',\r\n    'pending_confirmation': 'info',\r\n    'resolved': 'success',\r\n    'closed': 'info'\r\n  };\r\n  return typeMap[status] || 'info';\r\n};\r\n\r\nconst getTypeText = (type) => {\r\n  const typeMap = {\r\n    'exception': '异常订单处理',\r\n    'command': '指令执行',\r\n    'warning': '订单预警响应',\r\n    'value_added': '增值服务请求',\r\n    'other': '其他问题'\r\n  };\r\n  return typeMap[type] || type;\r\n};\r\n\r\nconst getPriorityText = (priority) => {\r\n  const priorityMap = {\r\n    'urgent': '紧急',\r\n    'high': '高',\r\n    'medium': '中',\r\n    'low': '低'\r\n  };\r\n  return priorityMap[priority] || priority;\r\n};\r\n\r\nconst getPriorityType = (priority) => {\r\n  const typeMap = {\r\n    'urgent': 'danger',\r\n    'high': 'warning',\r\n    'medium': 'info',\r\n    'low': 'success'\r\n  };\r\n  return typeMap[priority] || 'info';\r\n};\r\n\r\n// 判断是否可处理\r\nconst canProcess = (workOrder) => {\r\n  return ['pending', 'processing'].includes(workOrder.status);\r\n};\r\n\r\n// --- 事件处理函数 ---\r\nconst handleSearch = () => {\r\n  pagination.current = 1;\r\n  fetchWorkOrders();\r\n};\r\n\r\nconst resetFilters = () => {\r\n  // 不重置固定的 type\r\n  filters.status = '';\r\n  filters.priority = '';\r\n  filters.assignee = null;\r\n  filters.createdAtRange = [];\r\n  searchQuery.value = '';\r\n  handleSearch();\r\n};\r\n\r\nconst handleSelectionChange = (selection) => {\r\n  selectedRows.value = selection;\r\n};\r\n\r\nconst clearSelection = () => {\r\n  // 调用 el-table 的 clearSelection 方法\r\n  // tableRef.value.clearSelection(); // 需要给 el-table 添加 ref=\"tableRef\"\r\n  selectedRows.value = []; // 同时清空本地数组\r\n};\r\n\r\n\r\nconst handleSizeChange = (size) => {\r\n  pagination.pageSize = size;\r\n  fetchWorkOrders();\r\n};\r\n\r\nconst handleCurrentChange = (page) => {\r\n  pagination.current = page;\r\n  fetchWorkOrders();\r\n};\r\n\r\n// --- 操作函数 ---\r\nconst createWorkOrder = () => {\r\n  // 跳转到指令工单创建页面\r\n  router.push('/work-order/command/create');\r\n};\r\n\r\nconst viewWorkOrder = (id) => {\r\n  router.push(`/work-order/command/detail/${id}`);\r\n};\r\n\r\nconst viewOrder = (orderNo) => {\r\n  // 假设订单详情页路由为 /order/detail/:orderNo\r\n  router.push(`/order/detail/${orderNo}`);\r\n};\r\n\r\nconst processWorkOrder = (workOrder) => {\r\n  ElMessageBox.confirm(`确认开始处理工单 \"${workOrder.subject}\"?`, '操作确认', {\r\n    confirmButtonText: '确认',\r\n    cancelButtonText: '取消',\r\n    type: 'info'\r\n  }).then(() => {\r\n    // 实际应用中这里应该调用API更新工单状态\r\n    const index = workOrderList.value.findIndex(item => item.id === workOrder.id);\r\n    if (index !== -1) {\r\n      workOrderList.value[index].status = 'processing';\r\n      workOrderList.value[index].updatedAt = new Date();\r\n    }\r\n    ElMessage.success('工单状态已更新为：处理中');\r\n    // 跳转到指令工单处理页面\r\n    router.push(`/work-order/command/${workOrder.id}/process`);\r\n  }).catch(() => {});\r\n};\r\n\r\nconst batchProcess = () => {\r\n  if (selectedRows.value.length === 0) {\r\n    ElMessage.warning('请先选择工单');\r\n    return;\r\n  }\r\n\r\n  const canProcessIds = selectedRows.value\r\n    .filter(row => canProcess(row))\r\n    .map(row => row.id);\r\n\r\n  if (canProcessIds.length === 0) {\r\n    ElMessage.warning('所选工单中没有可处理的工单');\r\n    return;\r\n  }\r\n\r\n  ElMessageBox.confirm(`确认批量处理 ${canProcessIds.length} 个工单?`, '操作确认', {\r\n    confirmButtonText: '确认',\r\n    cancelButtonText: '取消',\r\n    type: 'info'\r\n  }).then(() => {\r\n    // 实际应用中这里应该调用API批量更新工单状态\r\n    canProcessIds.forEach(id => {\r\n      const index = workOrderList.value.findIndex(item => item.id === id);\r\n      if (index !== -1) {\r\n        workOrderList.value[index].status = 'processing';\r\n        workOrderList.value[index].updatedAt = new Date();\r\n      }\r\n    });\r\n    ElMessage.success(`已开始处理 ${canProcessIds.length} 个工单`);\r\n    clearSelection();\r\n    // 可能需要刷新列表\r\n    fetchWorkOrders();\r\n  }).catch(() => {});\r\n};\r\n\r\n// 获取工单列表数据\r\nconst fetchWorkOrders = async () => {\r\n  loading.value = true;\r\n  try {\r\n    // 实际应用中这里应该调用API获取工单列表\r\n    const params = {\r\n      page: pagination.current,\r\n      pageSize: pagination.pageSize,\r\n      search: searchQuery.value,\r\n      type: filters.type, // 固定为 command\r\n      status: filters.status,\r\n      priority: filters.priority,\r\n      assigneeId: filters.assignee, // API 可能需要 assigneeId\r\n      createdAtStart: filters.createdAtRange ? filters.createdAtRange[0] : null,\r\n      createdAtEnd: filters.createdAtRange ? filters.createdAtRange[1] : null,\r\n    };\r\n    console.log(\"Fetching Command Work Orders with params:\", params);\r\n    // const res = await api.getWorkOrders(params); // 假设有 api.getWorkOrders\r\n    // workOrderList.value = res.data.records;\r\n    // pagination.total = res.data.total;\r\n\r\n    // 模拟API请求延迟和过滤\r\n    setTimeout(() => {\r\n      // 基于模拟数据和筛选条件进行过滤 (简单示例)\r\n      let filteredData = [...workOrderList.value]; // Start with full mock data for demo\r\n      \r\n      // Apply filters (client-side simulation for demo)\r\n       if (params.search) {\r\n           const lowerSearch = params.search.toLowerCase();\r\n           filteredData = filteredData.filter(wo => \r\n               wo.id.toLowerCase().includes(lowerSearch) || \r\n               wo.subject.toLowerCase().includes(lowerSearch) ||\r\n               (wo.orderNo && wo.orderNo.toLowerCase().includes(lowerSearch))\r\n           );\r\n       }\r\n       if (params.status) {\r\n           filteredData = filteredData.filter(wo => wo.status === params.status);\r\n       }\r\n        if (params.priority) {\r\n            filteredData = filteredData.filter(wo => wo.priority === params.priority);\r\n        }\r\n        // assignee filter simulation (assuming filter.assignee is an ID)\r\n       if (params.assigneeId) {\r\n           const assigneeName = users.value.find(u => u.id === params.assigneeId)?.name;\r\n            if(assigneeName) {\r\n                filteredData = filteredData.filter(wo => wo.assignee === assigneeName);\r\n            }\r\n       }\r\n        // createdAtRange filter simulation\r\n        // ... (more complex date range filtering logic needed here) ...\r\n\r\n\r\n       // Apply pagination (simulation)\r\n        const start = (params.page - 1) * params.pageSize;\r\n        const end = start + params.pageSize;\r\n        const paginatedData = filteredData.slice(start, end);\r\n\r\n        workOrderList.value = paginatedData; // Update table data\r\n        pagination.total = filteredData.length; // Update total count based on filtered data\r\n        loading.value = false;\r\n    }, 500);\r\n  } catch (error) {\r\n    console.error('Failed to fetch command work orders:', error);\r\n    ElMessage.error('获取指令工单列表失败');\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 在组件挂载时获取工单列表\r\nonMounted(() => {\r\n  // 可以在这里设置来自路由参数的初始筛选条件，如果需要的话\r\n  // 例如：const initialStatus = route.query.status; if (initialStatus) filters.status = initialStatus;\r\n  fetchWorkOrders();\r\n});\r\n\r\n// // 监听视图变化 - 已移除\r\n// watch(() => activeView.value, () => {\r\n//   router.replace({\r\n//     query: {\r\n//       ...route.query,\r\n//       view: activeView.value\r\n//     }\r\n//   });\r\n// });\r\n\r\n// 视图管理方法\r\nconst handleSaveView = () => {\r\n  saveViewDialogVisible.value = true;\r\n};\r\n\r\nconst saveView = () => {\r\n  if (!viewForm.value.name) {\r\n    ElMessage.warning('请输入视图名称');\r\n    return;\r\n  }\r\n  \r\n  const newView = {\r\n    id: Date.now().toString(),\r\n    name: viewForm.value.name,\r\n    columns: viewForm.value.columns,\r\n    filters: activeFilters.value,\r\n    groupSettings: groupSettings.value,\r\n    sortSettings: sortSettings.value\r\n  };\r\n  \r\n  customViews.value.push(newView);\r\n  saveViewDialogVisible.value = false;\r\n  ElMessage.success('视图保存成功');\r\n};\r\n\r\nconst handleRenameView = () => {\r\n  if (!currentView.value) return;\r\n  renameViewDialogVisible.value = true;\r\n};\r\n\r\nconst handleDeleteView = () => {\r\n  if (!currentView.value) return;\r\n  \r\n  ElMessageBox.confirm('确认删除该视图？', '提示', {\r\n    type: 'warning'\r\n  }).then(() => {\r\n    const index = customViews.value.findIndex(v => v.id === currentView.value);\r\n    if (index !== -1) {\r\n      customViews.value.splice(index, 1);\r\n      currentView.value = 'all';\r\n      ElMessage.success('视图删除成功');\r\n    }\r\n  });\r\n};\r\n\r\n// 筛选相关方法\r\nconst showFilterPanel = () => {\r\n  filterPanelVisible.value = true;\r\n};\r\n\r\nconst applyFilters = ({ filters, logic }) => {\r\n  activeFilters.value = filters;\r\n  filterLogic.value = logic;\r\n  fetchWorkOrders();\r\n};\r\n\r\nconst cancelFilters = () => {\r\n  filterPanelVisible.value = false;\r\n};\r\n\r\n// 分组相关方法\r\nconst showGroupModal = () => {\r\n  groupModalVisible.value = true;\r\n};\r\n\r\nconst applyGroupSettings = () => {\r\n  const { level1, level2, level3 } = groupSettings.value;\r\n  const groupFields = [level1, level2, level3].filter(Boolean);\r\n  groupField.value = groupFields[0] || '';\r\n  fetchWorkOrders();\r\n  groupModalVisible.value = false;\r\n};\r\n\r\nconst clearGroupSettings = () => {\r\n  groupSettings.value = {\r\n    level1: '',\r\n    level2: '',\r\n    level3: ''\r\n  };\r\n  groupField.value = '';\r\n  fetchWorkOrders();\r\n};\r\n\r\n// 排序相关方法\r\nconst showSortModal = () => {\r\n  sortModalVisible.value = true;\r\n};\r\n\r\nconst addSortField = () => {\r\n  sortSettings.value.push({ field: '', direction: 'asc' });\r\n};\r\n\r\nconst removeSortField = (index) => {\r\n  sortSettings.value.splice(index, 1);\r\n};\r\n\r\nconst applySortSettings = () => {\r\n  fetchWorkOrders();\r\n  sortModalVisible.value = false;\r\n};\r\n\r\nconst clearSortSettings = () => {\r\n  sortSettings.value = [{ field: '', direction: 'asc' }];\r\n  fetchWorkOrders();\r\n};\r\n\r\n// 字段配置相关方法\r\nconst showColumnSettings = () => {\r\n  columnSettingsVisible.value = true;\r\n};\r\n\r\nconst handleSelectAllColumns = (val) => {\r\n  columnSettingsList.value.forEach(col => {\r\n    col.visible = val;\r\n  });\r\n};\r\n\r\nconst handleDragEnd = () => {\r\n  // 处理拖拽结束后的逻辑\r\n};\r\n\r\nconst applyColumnSettings = () => {\r\n  tableColumns.value = columnSettingsList.value.map(col => ({\r\n    ...col,\r\n    visible: col.visible\r\n  }));\r\n  columnSettingsVisible.value = false;\r\n  ElMessage.success('字段配置已更新');\r\n};\r\n\r\nconst resetColumnSettings = () => {\r\n  initColumnSettings();\r\n  allColumnsSelected.value = true;\r\n};\r\n\r\n// 初始化字段配置列表\r\nconst initColumnSettings = () => {\r\n  columnSettingsList.value = tableColumns.value.map(col => ({\r\n    ...col,\r\n    visible: true\r\n  }));\r\n};\r\n\r\n// 处理右键菜单\r\nconst handleContextMenu = (event) => {\r\n  event.preventDefault();\r\n  contextMenuVisible.value = true;\r\n  contextMenuX.value = event.clientX;\r\n  contextMenuY.value = event.clientY;\r\n};\r\n\r\n// 复制视图\r\nconst handleCopyView = () => {\r\n  if (!currentView.value) return;\r\n  \r\n  const view = customViews.value.find(v => v.id === currentView.value);\r\n  if (view) {\r\n    const newView = {\r\n      id: Date.now().toString(),\r\n      name: `${view.name} (副本)`,\r\n      columns: [...view.columns],\r\n      filters: [...view.filters],\r\n      groupSettings: { ...view.groupSettings },\r\n      sortSettings: [...view.sortSettings]\r\n    };\r\n    \r\n    customViews.value.push(newView);\r\n    contextMenuVisible.value = false;\r\n    ElMessage.success('视图复制成功');\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 原有样式保持不变 */\r\n.work-order-list-container {\r\n  padding: 20px;\r\n}\r\n\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.page-title {\r\n  margin: 0;\r\n  font-size: 22px;\r\n  font-weight: bold;\r\n}\r\n\r\n.filter-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.search-bar {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.search-input {\r\n  width: 100%;\r\n  max-width: 500px;\r\n}\r\n\r\n.list-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.table-operations {\r\n  margin-bottom: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.selected-count {\r\n  margin-right: 16px;\r\n  color: #606266;\r\n}\r\n\r\n.subject-cell {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.subject-text {\r\n  margin-right: 8px;\r\n}\r\n\r\n.pagination-container {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n/* 新增样式 */\r\n.view-management {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n}\r\n\r\n.status-view-group {\r\n  margin-right: 16px;\r\n}\r\n\r\n.group-settings {\r\n  padding: 20px;\r\n}\r\n\r\n.group-level {\r\n  margin-bottom: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.group-level-label {\r\n  width: 100px;\r\n  text-align: right;\r\n  margin-right: 16px;\r\n}\r\n\r\n.sort-settings {\r\n  padding: 20px;\r\n}\r\n\r\n.sort-item {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n  gap: 16px;\r\n}\r\n\r\n.sort-actions {\r\n  margin-top: 16px;\r\n  text-align: center;\r\n}\r\n\r\n.column-settings {\r\n  padding: 20px;\r\n}\r\n\r\n.column-settings-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.column-list {\r\n  max-height: 400px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.column-item {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 8px;\r\n  border-bottom: 1px solid #EBEEF5;\r\n}\r\n\r\n.column-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.drag-handle {\r\n  cursor: move;\r\n  margin-right: 8px;\r\n  color: #909399;\r\n}\r\n\r\n.context-menu {\r\n  position: fixed;\r\n  background: white;\r\n  border: 1px solid #EBEEF5;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\r\n  z-index: 3000;\r\n}\r\n\r\n.context-menu-item {\r\n  padding: 8px 16px;\r\n  cursor: pointer;\r\n  color: #606266;\r\n}\r\n\r\n.context-menu-item:hover {\r\n  background-color: #F5F7FA;\r\n  color: #409EFF;\r\n}\r\n\r\n/* 分组样式 */\r\n.group-name {\r\n  display: flex;\r\n  align-items: center;\r\n  font-weight: bold;\r\n}\r\n\r\n.group-level-1 {\r\n  color: #409EFF;\r\n  font-size: 14px;\r\n}\r\n\r\n.group-level-2 {\r\n  color: #67C23A;\r\n  font-size: 13px;\r\n}\r\n\r\n.group-level-3 {\r\n  color: #E6A23C;\r\n  font-size: 13px;\r\n}\r\n\r\n.group-title {\r\n  margin-right: 5px;\r\n}\r\n\r\n.group-count {\r\n  color: #909399;\r\n  font-size: 12px;\r\n}\r\n\r\n.data-item {\r\n  background-color: #FAFAFA;\r\n}\r\n</style> ","import script from \"./CommandWorkOrderList.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CommandWorkOrderList.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./CommandWorkOrderList.vue?vue&type=style&index=0&id=0acd5ccc&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-0acd5ccc\"]])\n\nexport default __exports__"],"names":["router","useRouter","currentView","ref","customViews","saveViewDialogVisible","renameViewDialogVisible","contextMenuVisible","contextMenuX","contextMenuY","viewForm","name","columns","filterPanelVisible","activeFilters","filterLogic","groupModalVisible","groupSettings","level1","level2","level3","groupField","sortModalVisible","sortSettings","field","direction","columnSettingsVisible","columnSettingsList","allColumnsSelected","users","id","loading","searchQuery","filters","reactive","status","type","priority","assignee","createdAtRange","workOrderList","subject","orderNo","creator","createdAt","Date","now","updatedAt","completedAt","dueAt","location","palletCount","pagination","current","pageSize","total","selectedRows","tableColumns","prop","label","width","visible","minWidth","groupableFields","sortableFields","getGroupColumnLabel","fieldConfig","value","find","f","formatDateTime","date","d","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getStatusText","statusMap","getStatusType","typeMap","getTypeText","getPriorityText","priorityMap","getPriorityType","canProcess","workOrder","includes","handleSearch","fetchWorkOrders","resetFilters","handleSelectionChange","selection","clearSelection","handleSizeChange","size","handleCurrentChange","page","createWorkOrder","push","viewWorkOrder","viewOrder","processWorkOrder","ElMessageBox","confirm","confirmButtonText","cancelButtonText","then","index","findIndex","item","ElMessage","success","catch","batchProcess","length","warning","canProcessIds","filter","row","map","forEach","async","params","search","assigneeId","createdAtStart","createdAtEnd","console","log","setTimeout","filteredData","lowerSearch","toLowerCase","wo","assigneeName","u","start","end","paginatedData","slice","error","onMounted","handleSaveView","saveView","newView","toString","handleRenameView","handleDeleteView","v","splice","showFilterPanel","applyFilters","logic","cancelFilters","showGroupModal","applyGroupSettings","groupFields","Boolean","clearGroupSettings","showSortModal","addSortField","removeSortField","applySortSettings","clearSortSettings","showColumnSettings","handleSelectAllColumns","val","col","handleDragEnd","applyColumnSettings","resetColumnSettings","initColumnSettings","handleContextMenu","event","preventDefault","clientX","clientY","handleCopyView","view","__exports__"],"sourceRoot":""}